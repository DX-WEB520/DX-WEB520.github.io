{
    "version": "https://jsonfeed.org/version/1",
    "title": "小贝壳",
    "subtitle": "Blog",
    "icon": "https://xqlove.xyz/images/favicon.ico",
    "description": "你一定会长成自己喜欢的模样",
    "home_page_url": "https://xqlove.xyz",
    "items": [
        {
            "id": "https://xqlove.xyz/%E7%8E%A9%E8%BD%ACpromise/",
            "url": "https://xqlove.xyz/%E7%8E%A9%E8%BD%ACpromise/",
            "title": "玩转Promise",
            "date_published": "2021-03-21T01:44:20.000Z",
            "content_html": "<h1 id=\"promise\"><a class=\"anchor\" href=\"#promise\">#</a> Promise</h1>\n<h2 id=\"基础知识\"><a class=\"anchor\" href=\"#基础知识\">#</a> 基础知识</h2>\n<p>浏览器是多线程的 (同时可以做很多事情)</p>\n<ul>\n<li>GUI 渲染线程</li>\n<li>JS 引擎线程 (渲染解析 JS 的)</li>\n<li>DOM / 定时器监听等线程</li>\n<li>HTTP 网络线程</li>\n<li>...</li>\n</ul>\n<p>JS 是单线程的：大部分代码都是同步的，但是也有少部分代码是异步编程的 (但绝对不是类似于多线程开发中的同时做多件事情，一次还是只能处理一件事，因为是单线程，如果 JS 引擎线程正在解析 JS 代码，处理某个任务，那么其他什么事情都处理不了)。</p>\n<ul>\n<li>浏览器基于 EventQueue 事件队列 EventLoop 事件循环 两大机制，构建出来 &quot;异步编程效果&quot;，叫做单线程异步操作。</li>\n</ul>\n<p>Promise 是一种承诺模式，用来管理异步。</p>\n<ul>\n<li>\n<p>宏任务</p>\n<ul>\n<li>定时器</li>\n<li>HTTP 请求：一般都是异步的 [ajax,fetch,jsonp]</li>\n<li>事件绑定</li>\n</ul>\n</li>\n<li>\n<p>微任务</p>\n<ul>\n<li>promise[resolve / reject / then]</li>\n<li>async await</li>\n<li>generator</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"10版本\"><a class=\"anchor\" href=\"#10版本\">#</a> 1.0 版本</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>exector<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   new Promise 内部一定要传递一个函数，不可以是其它类型的值，new Promise 的时候 (new Promise 执行是同步执行的)，在 Promise 内部会立即把 [executor] 函数执行。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   函数中一般用来管理一个异步编程代码 (不管控异步编程也是可以的)</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   同时给 [executor] 函数传递两个值，solve/reject</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   [[内置私有属性]]</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   [[PromiseState]] 实例状态:pending 准备状态，fulfilled/resolved 成功态，rejected 失败态</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   [[PromiseResult]] 实例的值</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   [[公共属性方法]] Promise.prototype</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   then\\catch\\finally</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">let</span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 在 [exector] 执行 resolve/reject 都是为了改变 Promise 实例的状态和值 [结果]，一旦状态被改变为 fulfilled/rejected 则不能再改为其他的状态。</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"OK\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NO\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 出现错误的代码，也就是 [exector] 执行报错，也会把实例的状态改为 rejected，值就是错误信息。Promise 内部做了异常信息捕获 [try/catch]</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 实例的状态改变可以控制执行 then 方法时，存放的两个方法中的某一个方法执行，p.then (onfulfilledCallback,onRejectedCallback), 并且把 [[PromiseResult]] 的值传递给方法</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>p1<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'成功'</span><span class=\"token punctuation\">,</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token parameter\">reason</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'失败'</span><span class=\"token punctuation\">,</span>reason<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>成功 <span class=\"token constant\">OK</span></pre></td></tr></table></figure><figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"OK\"</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 同步改变其状态和结果</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token comment\">// 此时状态已经修改为成功...</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>p<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'成功'</span><span class=\"token punctuation\">,</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>Promise<span class=\"token punctuation\">&#123;</span>fulfilled <span class=\"token operator\">:</span> <span class=\"token string\">\"OK\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>成功 <span class=\"token constant\">OK</span></pre></td></tr></table></figure><h3 id=\"20版本\"><a class=\"anchor\" href=\"#20版本\">#</a> 2.0 版本</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>rejected</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'OK'</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 同步修改其状态和结果</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token comment\">// 此时状态已经修改为成功</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/* 在执行 p.then (onfulfilledCallback,onrejectedCallback)</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  首先把传递进来的 onfulfilledCallback 和 onrejectedCallback 存储起来 [存储在一个容器中：因为可以基于 then 给其存放好多个回调函数]，其次再去检验当前实例的状态。如果实例状态是 pending, 则不做任何的处理，如果已经变为 fulfilled/rejected 则会通知对应的回调函数执行 [但是不是立即执行，而是把其放置在 EventQueue 中的微任务队列中]\"promise 本身不是异步的，是用来管理异步的，但是 then 方法是异步的 [微任务]\"</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>p<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'成功'</span><span class=\"token punctuation\">,</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>Promise<span class=\"token punctuation\">&#123;</span>fulfilled <span class=\"token operator\">:</span> <span class=\"token string\">\"OK\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>成功 <span class=\"token constant\">OK</span></pre></td></tr></table></figure><h3 id=\"30版本\"><a class=\"anchor\" href=\"#30版本\">#</a> 3.0 版本</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>rejected</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'OK'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 改变实例的状态和值 [同步]，通知之前基于 then 存放的 onfulfilledCallback 执行 [异步的微任务：也是把执行方法的事情防止在 EventQueue 中的微任务队列中]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 存储了一个异步的宏任务</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 此时接受 onfulfilledCallback 的时候，状态还是 pending，此时只把方法存储起来</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>p<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'成功'</span><span class=\"token punctuation\">,</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 等 1000ms 后，执行定时器中的函数 [把异步宏任务拿出来执行</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>Promise<span class=\"token punctuation\">&#123;</span>pending<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>Promise<span class=\"token punctuation\">&#123;</span>fulfilled <span class=\"token operator\">:</span> <span class=\"token string\">\"OK\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>成功 <span class=\"token constant\">OK</span></pre></td></tr></table></figure><h3 id=\"40版本\"><a class=\"anchor\" href=\"#40版本\">#</a> 4.0 版本</h3>\n<p>** 注意：** 执行 then 方法会返回一个全新的 Promise 实例。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"OK\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NO\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">let</span> p2 <span class=\"token operator\">=</span> p1<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'P1成功'</span><span class=\"token punctuation\">,</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token parameter\">reason</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'P1失败'</span><span class=\"token punctuation\">,</span>reason<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">let</span> p3 <span class=\"token operator\">=</span> p2<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'P2成功'</span><span class=\"token punctuation\">,</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token parameter\">reason</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'P2失败'</span><span class=\"token punctuation\">,</span>reason<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>p3<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'P3成功'</span><span class=\"token punctuation\">,</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token parameter\">reason</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'P3失败'</span><span class=\"token punctuation\">,</span>reason<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token constant\">P1</span>成功 <span class=\"token constant\">OK</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token constant\">P2</span>失败 <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token constant\">P3</span>成功 <span class=\"token number\">10</span></pre></td></tr></table></figure><p>执行 then 方法会返回一些全新的 promise 实例 p2，那么 p2 的状态是如何改变的呢？</p>\n<ul>\n<li>\n<p>不论执行的是基于 p1.then 存放的 onfulfilledCallback/onrejectedCallback 两个方法中的哪一个</p>\n</li>\n<li>\n<p>只要执行不报错</p>\n<ul>\n<li>如果方法中返回一个全新的 promise 实例，则 “全新的 Promise 实例” 的成功和失败决定 p2 的成功和失败，如果返回的不是 promise，则 [[PromiseState]]:fulfilled,[[PromiseResult]]: 返回值</li>\n<li>若返回值不写就是 undefined</li>\n</ul>\n</li>\n<li>\n<p>如果执行方法报错：p2 的 [[PromiseState]]:rejected,[[PromiseResult]]: 报错原因</p>\n</li>\n</ul>\n<p><strong>如果 onfulfilledCallback/onrejectedCallback 不传递，则状态和结果都会 “顺延 / 穿透” 到下一个同等状态应该执行的回调函数上 [内部补充了一些处理函数]</strong></p>\n<p>catch 是用来捕获失败的，只处理状态为失败下做的事情，不传递成功的函数，所以我们会看到一些在 then 中不处理失败，统一在 catch 中去处理。</p>\n<h2 id=\"深入理解\"><a class=\"anchor\" href=\"#深入理解\">#</a> 深入理解</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">,</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'promise1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 微任务 1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'then11'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'promise2'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 此时我们已经知道微任务 3 一定会被执行，但此时不知道微任务 2 是否可执行，等到主线程空闲，先执行微任务 3</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 微任务 3</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'then21'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 微任务 4</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'then22'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 微任务 2，当微任务 3、微任务 4 被放入队列中时，微任务 2 就可以执行了</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"then12\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>promise1</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>then11</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>promise2</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>then21</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>then12</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>then22</pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    放入 EventQueue 中的顺序是微任务 1、微任务 2、微任务 3、微任务 4，但是执行时是微任务 1、微任务 3、微任务 2、微任务 4</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>*/</span></pre></td></tr></table></figure><figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">,</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'promise1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'then11'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'promise2'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'then21'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'then22'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"then12\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>promise1</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>then11</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>promise2</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>then21</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>then22<span class=\"token comment\">//return promise 返回的是最后一个.then 执行完之后的结果，所以是要等 then22 执行完，才会执行 then12</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>then12</pre></td></tr></table></figure><h3 id=\"promise-all\"><a class=\"anchor\" href=\"#promise-all\">#</a> Promise all</h3>\n<p>promise 数组：{要求数组中的每一项尽可能都是 promise 实例}：返回一个新的 promise 实例 AA,AA 成功还是失败，取决于数组中的每一个 promise 实例是成功还是失败，只要有一个是失败，AA 就是失败的，只有都成功 AA 才是成功的。</p>\n<p>应用场景：同时发十个请求，等到所有的请求都成功了，才进行处理。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">interval</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>interval<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>interval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">let</span> p1 <span class=\"token operator\">=</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">let</span> p2 <span class=\"token operator\">=</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">let</span> p3 <span class=\"token operator\">=</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>p1<span class=\"token punctuation\">,</span>p2<span class=\"token punctuation\">,</span>p3<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">results</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 不论谁先知道状态，最后结果的顺序和传递数组的顺序要保持一致</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">)</span><span class=\"token comment\">//[3000,1000,0]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">reason</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 处理过程中，遇到一个失败，则 ALL 立即为失败，结果就是当前失败我的原因</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reason<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"promise-race\"><a class=\"anchor\" href=\"#promise-race\">#</a> Promise race</h3>\n<p>最先知道状态的 Promise 实例，是成功还是失败，决定了 AA 是成功还是失败。</p>\n<p>应用场景：同时发十个请求，哪个请求的最快，处理哪个。</p>\n<h3 id=\"解决的问题\"><a class=\"anchor\" href=\"#解决的问题\">#</a> 解决的问题</h3>\n<p>有一个需求，api1 请求成功后再执行 api2 再执行 api3。</p>\n<p>ajax 回调函数的方式管理异步编程。会形成回调地狱</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">$ajax</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    url<span class=\"token operator\">:</span><span class=\"token string\">'api1'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function\">$ajax</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>           url<span class=\"token operator\">:</span><span class=\"token string\">'api2'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>           <span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>             <span class=\"token function\">$ajax</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                 url<span class=\"token operator\">:</span><span class=\"token string\">'api3'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                 <span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                     <span class=\"token function\">$ajax</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                         url<span class=\"token operator\">:</span><span class=\"token string\">'api4'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                         <span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">results4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                     <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                 <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>             <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>           <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>基于 promise 完成并行或者串行的请求。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">api1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token function\">$ajax</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       url<span class=\"token operator\">:</span><span class=\"token string\">'api1'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">results1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">api2</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">$ajax</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>       url<span class=\"token operator\">:</span><span class=\"token string\">'api2'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>       <span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">results2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>   </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">api3</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">$ajax</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>       url<span class=\"token operator\">:</span><span class=\"token string\">'api3'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>       <span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">results3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 串行</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token function\">api1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result1</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">api2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result2</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">api3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result3</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">// 并行</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token function\">api1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">api2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">api3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">results</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">let</span> result1 <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">api1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">let</span> result2 <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">api2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">let</span> result3 <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">api3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"es7async-await\"><a class=\"anchor\" href=\"#es7async-await\">#</a> ES7:async +await</h2>\n<p>generator + promise 的语法糖 async +await，具体的用法 MDN 中讲的非常详细，大家可以看看</p>\n<p>async：函数修饰符，控制函数返回 promise 实例。</p>\n<ul>\n<li>函数内部执行报错，则返回失败的 promise 实例，值是失败的原因</li>\n<li>自己返回一个 promise，以自己返回的 为主</li>\n<li>如果函数内部做了异常捕获，则还是成功态</li>\n</ul>\n<p>使用 async 的目的是为了在函数内部使用 await。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">api</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">interval</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>interval<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>interval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    await: 后面应该防止一个 promise 实例（即使写的不是，浏览器也会把其变为 promise 实例），await 中断函数体中，其下面的代码执行 (await 表达式会暂停整个 async 函数的执行进程，并让出其控制权); 只有等待 await 后面的 promise 实例是成功态之后，才会把之前暂停的代码继续执行，如果后面的 promise 实例是失败的，则下面的代码就不再执行了。</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">let</span> result1 <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">qpi</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 这一步是同步的</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result1<span class=\"token punctuation\">)</span><span class=\"token comment\">// 这一步是微任务</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">let</span> result2 <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">qpi</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>以下是一些 await 源码中不同的处理方式。</p>\n<p><img data-src=\"https://cloud-img-1301075855.cos.ap-chengdu.myqcloud.com/xin/Snipaste_2021-03-21_16-07-55.png\" alt=\"\" /></p>\n<p><img data-src=\"https://cloud-img-1301075855.cos.ap-chengdu.myqcloud.com/xin/Snipaste_2021-03-21_15-58-25.png\" alt=\"\" /></p>\n<p><img data-src=\"https://cloud-img-1301075855.cos.ap-chengdu.myqcloud.com/xin/Snipaste_2021-03-21_15-55-36.png\" alt=\"\" /></p>\n<p><img data-src=\"https://cloud-img-1301075855.cos.ap-chengdu.myqcloud.com/xin/Snipaste_2021-03-21_16-06-20.png\" alt=\"\" /></p>\n<p>以下是一些题目的分析。</p>\n<p><img data-src=\"https://cloud-img-1301075855.cos.ap-chengdu.myqcloud.com/xin/Snipaste_2021-03-21_16-34-16.png\" alt=\"\" /></p>\n<p><img data-src=\"https://cloud-img-1301075855.cos.ap-chengdu.myqcloud.com/xin/Snipaste_2021-03-21_16-53-36.png\" alt=\"\" /></p>\n<p><img data-src=\"https://cloud-img-1301075855.cos.ap-chengdu.myqcloud.com/xin/Snipaste_2021-03-21_16-52-57.png\" alt=\"\" /></p>\n<p><img data-src=\"https://cloud-img-1301075855.cos.ap-chengdu.myqcloud.com/xin/Snipaste_2021-03-21_16-41-21.png\" alt=\"\" /><img data-src=\"https://cloud-img-1301075855.cos.ap-chengdu.myqcloud.com/xin/Snipaste_2021-03-21_16-58-27.png\" alt=\"\" /></p>\n<h2 id=\"手写promise\"><a class=\"anchor\" href=\"#手写promise\">#</a> 手写 Promise</h2>\n<p>相互回调函数处理模式，回调函数就是把一个函数 A 作为值，传递给另外一个执行的函数 B 中，在 B 中可以额把 A 执行，执行 0-N 次，还可以改变函数中的 this，还可以给回调函数传递参数，可接受函数的返回值。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 自定义 promise 类</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">executor</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">var</span> self <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            change<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 必须 new 执行并且 executor 必须是一个函数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>self <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeError</span><span class=\"token punctuation\">(</span><span class=\"token string\">'undefined is not a promise'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> exector <span class=\"token operator\">!==</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeError</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Promise resolver'</span> <span class=\"token operator\">+</span> executor <span class=\"token operator\">+</span> <span class=\"token string\">'is not a function'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 实例具备的属性</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        self<span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token string\">'pending'</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        self<span class=\"token punctuation\">.</span>result <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        self<span class=\"token punctuation\">.</span>onFulfilledCallbacks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        self<span class=\"token punctuation\">.</span>onRejectedCallbacks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 修改实例的状态和结果 [一旦状态被改变则不再执行]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token function-variable function\">change</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">change</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span>result<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>             <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>state <span class=\"token operator\">!=</span> <span class=\"token string\">'pending'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>             self<span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> state  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>             self<span class=\"token punctuation\">.</span>result <span class=\"token operator\">=</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>             <span class=\"token comment\">// 创建异步微任务，通知集合中存储的方法执行 (前提：集合中需要有东西才执行)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>             <span class=\"token keyword\">var</span> callbakcs <span class=\"token operator\">=</span> state <span class=\"token operator\">===</span> <span class=\"token string\">'fulfilled'</span> <span class=\"token operator\">?</span> self<span class=\"token punctuation\">.</span>onFulfilledCallbacks <span class=\"token operator\">:</span> onRejectedCallbacks<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                 i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                 len <span class=\"token operator\">=</span> callbacks<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                 callback<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>             <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>callbacks<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                 <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                     <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>len<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                         callback <span class=\"token operator\">=</span> callback<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                         <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> callback <span class=\"token operator\">===</span> <span class=\"token string\">'funtion'</span><span class=\"token punctuation\">)</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                     <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                 <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>             <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token comment\">//new Promsie 的时候会立即执行 executor 函数</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token function\">executor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                <span class=\"token function\">change</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fulfilled'</span><span class=\"token punctuation\">,</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">reason</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                <span class=\"token function\">change</span><span class=\"token punctuation\">(</span><span class=\"token string\">'rejected'</span><span class=\"token punctuation\">,</span>reason<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token function\">change</span><span class=\"token punctuation\">(</span><span class=\"token string\">'rejected'</span><span class=\"token punctuation\">,</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        constructor<span class=\"token operator\">:</span>Promise</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        self<span class=\"token operator\">:</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token function-variable function\">then</span><span class=\"token operator\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">onFulfilled<span class=\"token punctuation\">,</span>onRejected</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token comment\">// 情况 1: 如果已经知道对应实例的状态是成功还是失败，则创建一个 \"异步的微任务\"，后期执行 onFulfilled,onRejected</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token comment\">// 情况 2: 如果此时还不知道实例状态，就先把 onFulfilled/onRejected 存储起来，后期更改其状态之后，再通知方法执行即可，也叫 \"异步微任务\"，基于 queueMicrotask 可以创造异步的微任务 [兼容性差], 也可以基于定时器创造一个异步的宏任务，来模拟微任务。</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                <span class=\"token keyword\">case</span> <span class=\"token string\">'fulfilled'</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                   <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                       <span class=\"token function\">onFulfilled</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                   <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                <span class=\"token keyword\">case</span> <span class=\"token string\">'rejected'</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                   <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                       <span class=\"token function\">onRejected</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                   <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                <span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                    self<span class=\"token punctuation\">.</span>onFulfilledCallbacks<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>onFulfilled<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                    self<span class=\"token punctuation\">.</span>onRejected<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>onRejected<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token function-variable function\">catch</span><span class=\"token operator\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    Promise<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">all</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">promises</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token keyword\">var</span> promiseNew<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            results <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            n <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>promises<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeError</span><span class=\"token punctuation\">(</span>promises <span class=\"token operator\">+</span> <span class=\"token string\">'is not iterable'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token comment\">// 控制集合中的每一项都是 promise 实例</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        promises <span class=\"token operator\">=</span> promises<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">promise</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isPromise</span><span class=\"token punctuation\">(</span>promise<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>promise<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>            <span class=\"token keyword\">return</span> promise</pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token comment\">// 返回一个全新的 promise 实例</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        promiseNew <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>            promises<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">promise<span class=\"token punctuation\">,</span>index</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>                promise<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>                    <span class=\"token comment\">//result 存储的是当前迭代这一项的成功结果</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>                    n<span class=\"token operator\">++</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>                    results<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> result</pre></td></tr><tr><td data-num=\"87\"></td><td><pre>                    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">>=</span> promises<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">reason</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>                    <span class=\"token comment\">// 只要有一项失败，整体就是失败</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>                    <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>reason<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>                       </pre></td></tr><tr><td data-num=\"92\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>        <span class=\"token keyword\">return</span> promiseNew</pre></td></tr><tr><td data-num=\"95\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    Promise<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">resolve</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    Promise<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">reject</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre></pre></td></tr><tr><td data-num=\"100\"></td><td><pre><span class=\"token keyword\">let</span> p1 <span class=\"token operator\">=</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre><span class=\"token keyword\">let</span> p2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>     <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>          <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>                          </pre></td></tr><tr><td data-num=\"105\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre><span class=\"token keyword\">let</span> p3 <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>p1<span class=\"token punctuation\">,</span>p2<span class=\"token punctuation\">,</span>p3<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">results</span> <span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'成功'</span><span class=\"token punctuation\">,</span>results<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">reason</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'失败'</span><span class=\"token punctuation\">,</span>reason<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "JS",
                "Promise",
                "面试"
            ]
        },
        {
            "id": "https://xqlove.xyz/JS%E5%B8%B8%E8%A7%81%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/",
            "url": "https://xqlove.xyz/JS%E5%B8%B8%E8%A7%81%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/",
            "title": "JS常见的设计模式",
            "date_published": "2021-03-19T01:53:03.000Z",
            "content_html": "<h1 id=\"设计模式\"><a class=\"anchor\" href=\"#设计模式\">#</a> 设计模式</h1>\n<p>JS 设计模式：是一种思想，更规范、更合理的去管理代码（方便维护、升级、扩展、开发）</p>\n<p>早期的模块化编程思想：AMD/CMD，现在常用的思想 CommonJS/ES6Module</p>\n<h2 id=\"单例设计模式\"><a class=\"anchor\" href=\"#单例设计模式\">#</a> 单例设计模式</h2>\n<p>Singleton 单例设计模式 &amp;&amp; Command 命令模式（借助了对象、闭包的思想）</p>\n<p>优点：</p>\n<ul>\n<li>避免全局变量的污染，实现模块之间的相互调用（提供了模块导出的方案）</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 公用板块</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> utils <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">func<span class=\"token punctuation\">,</span>wait</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            debounce<span class=\"token operator\">:</span>debounce<span class=\"token comment\">// 想要供外部调用的方法，暴露出来</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">//A 板块</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">let</span> AModule <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    utils<span class=\"token punctuation\">.</span><span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        fn<span class=\"token operator\">:</span>fn</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">//B 板块</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">let</span> BModule <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    utile<span class=\"token punctuation\">.</span><span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    AModule<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">computed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">smile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        smile<span class=\"token operator\">:</span>smile</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"命令模式\"><a class=\"anchor\" href=\"#命令模式\">#</a> 命令模式</h2>\n<p>命令模式是基于单例模式发展而来的设计模式。</p>\n<p>在实际的业务开发中，我们还可以基于命令模式管控方法的执行顺序，从而有效的实现出对应的功能</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 实现该模块的所有功能</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> CModule <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 获取数据</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 绑定数据</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">binding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 处理事件绑定</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 处理其它事情</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 模块的入口，相当于模块的大脑，控制模块中方法的执行顺序，提供一个统一管理的接口。</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token function\">binding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>CModule<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"constructor构造器模式\"><a class=\"anchor\" href=\"#constructor构造器模式\">#</a> Constructor 构造器模式</h2>\n<p>应用面向对象的思想去构建项目。</p>\n<ul>\n<li>自定义类和实例</li>\n<li>私有 &amp; 公有属性和方法</li>\n<li>编写公共的类库 &amp; 插件组件</li>\n</ul>\n<p>插件：每一次调用插件我们都是创造这个类的一个实例，即保证每个实例之间（每次调用之间）有自己的私有属性，互不影响；也可以保证一些属性方法还是公用的，有效避免代码的冗余...</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//ES5 的写法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>xxx <span class=\"token operator\">=</span> xxx</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">Fn</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    constructor<span class=\"token operator\">:</span>Fn<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Fn<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">xxx</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">//ES6 的写法</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Fn</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>xxx <span class=\"token operator\">=</span> xxx</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token function\">xxx</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">let</span> f1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Fn</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">let</span> f2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Fn</span></pre></td></tr></table></figure><h2 id=\"工厂模式factory\"><a class=\"anchor\" href=\"#工厂模式factory\">#</a> 工厂模式（Factory）</h2>\n<p>简单的工厂模式（一个方法根据传递参数不同，做了不同事情的处理）</p>\n<p>JQ 中的工厂模式（加工转换）</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">factory</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">options</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>options <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> option <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^(object|funtion)$</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> options <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        type<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        payload</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> options<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'MYSQL'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>type <span class=\"token operator\">===</span> <span class=\"token string\">\"SQLSERVER\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token function\">factory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    type<span class=\"token operator\">:</span> <span class=\"token string\">\" SQLSERVER\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    payload<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        root<span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        pass<span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        select<span class=\"token operator\">:</span><span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"发布订阅模式publish-subscribe\"><a class=\"anchor\" href=\"#发布订阅模式publish-subscribe\">#</a> 发布订阅模式 (Publish &amp; Subscribe)</h2>\n<p>灵感来源于：addEventListener DOM2 事件绑定</p>\n<ul>\n<li>给当前元素的某一个事件行为，绑定多个不同的方法 (事件池机制)</li>\n<li>事件行为触发，会依次通知事件池中的方法执行</li>\n<li>支持内置事件 (标准事件，例如：click、dblclick、mouseenter)</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 自己创造事件池</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">let</span> pond <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 向事件池中注入方法</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">func</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 去重处理</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pond<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            pond<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 每一次执行，返回的方法是用来移除当前新增的这一项的</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">unsubscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            pond <span class=\"token operator\">=</span> pond<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> item <span class=\"token operator\">!==</span> func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 通知事件池中的每个方法执行</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    subscribe<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">fire</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">fire</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>params</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        pond<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> item <span class=\"token operator\">===</span> <span class=\"token string\">\"function\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token function\">item</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>params<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    window<span class=\"token punctuation\">.</span>subscribe <span class=\"token operator\">=</span> subscribe<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">let</span> unsubscribe1 <span class=\"token operator\">=</span> <span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>subscribe<span class=\"token punctuation\">.</span><span class=\"token function\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token function\">unsubscribe1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    subscribe<span class=\"token punctuation\">.</span><span class=\"token function\">fire</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>应用场景：凡是到达某个阶段的时候，需要执行很多方法 (更多时候到底执行多少方法是不确定的)。我们通过发布订阅模式来管理代码：创建事件池 -&gt; 发布计划 向事件池中加入方法 -&gt; 向计划表中订阅任务 fire-&gt; 通知计划表中的任务执行</p>\n<p>在多人开发的时候，每个人写自己的模块，只需要将自己写好的模块放入事件池中即可，不需要在别人写的代码块中加入自己的方法执行。</p>\n<p>上述方法只有一个事件池，所以只能处理一个场景，所以我们需要做一些改进。</p>\n<p>一个项目中，我们可能出现多个事情都需要基于发布订阅来管理，一个事件池是远远不够的。</p>\n<ul>\n<li>管理多个事件池</li>\n<li>面向对象 类 &amp; 实例</li>\n<li>每个实例都有一个自己的私有的事件池</li>\n<li>subscribe /unsubscribe/fire 公用的</li>\n<li>一个事件池支持不同的自定义事件类型</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Sub</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 实例私有的属性：私有的事件池</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    pond <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 原型上设置方法：向事件池中订阅任务</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">let</span> self <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            pond <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>pond</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pond<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> pond<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">unsubscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">let</span> len <span class=\"token operator\">=</span> pond<span class=\"token punctuation\">.</span>length</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                item <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>len<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                item <span class=\"token operator\">=</span> pond<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>item <span class=\"token operator\">===</span> func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                    pond<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">// 通知当前实例所属事件池中的任务执行</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token function\">fire</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>params</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">let</span> self <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            pond <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>pond</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        pond<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> item <span class=\"token operator\">===</span> <span class=\"token string\">\"function\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token function\">item</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">let</span> subOne <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Sub</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">let</span> sunTwo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Sub</span></pre></td></tr></table></figure><figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//eventBus 原理</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// 向事件池中追加指定自定义事件类型的方法</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">on</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">type<span class=\"token punctuation\">,</span>func</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 每一次增加的时候，验证当前类型在事件池中是否已经存在</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token operator\">!</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>pond<span class=\"token punctuation\">[</span>type<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> pond<span class=\"token punctuation\">[</span>type<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> pond<span class=\"token punctuation\">[</span>type<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    arr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token comment\">// 从事件池中移除指定自定义事件类型的方法</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">off</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">off</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">type<span class=\"token punctuation\">,</span>func</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> pond<span class=\"token punctuation\">[</span>type<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    item <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeError</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>type<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">自定义事件在事件池中并不存在</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        item <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>item <span class=\"token operator\">===</span> func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 这样只是让集合中当前项值变为 Null, 但是集合的机构是不发生改变的 (索引不变); 下一次执行 emit 的时候，遇到当前项是 null，我们再去把其移除掉即可</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token comment\">// 通知事件池中指定自定义事件类型的方法</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">emit</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">type<span class=\"token punctuation\">,</span><span class=\"token operator\">...</span>params</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> pond<span class=\"token punctuation\">[</span>type<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">let</span> item <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeError</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>type<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">自定义事件在事件池中并不存在</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        item <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> item <span class=\"token operator\">===</span> <span class=\"token string\">\"function\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token function\">item</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>params<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token comment\">// 不是函数的值都移除掉即可</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        arr<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        i<span class=\"token operator\">--</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    on<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    off<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    emit</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"观察者模式\"><a class=\"anchor\" href=\"#观察者模式\">#</a> 观察者模式</h2>\n<p>观察者：定义观察者的形式可以不一样，只要具备 update 方法即可。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 观察者</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Observe</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">msg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">观察者1，接收到的消息是：</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>msg<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">let</span> Demo <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">msg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">观察者1，接收到的消息是：</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>msg<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 目标</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Subject</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    observeList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">observe</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>observeList<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>observe<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">observe</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>observeList <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>observeList<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> item <span class=\"token operator\">!==</span> observe<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>params</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>observeList<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>item <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> item<span class=\"token punctuation\">.</span>update <span class=\"token operator\">===</span> <span class=\"token string\">\"function\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                item<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>params<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">let</span> sub <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Subject</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>sub<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Observe</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>sub<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>Demo<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    sub<span class=\"token punctuation\">.</span><span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure>",
            "tags": [
                "设计模式"
            ]
        },
        {
            "id": "https://xqlove.xyz/%E4%B8%80%E8%B5%B7%E5%AD%A6%E4%B9%A0Vue%E5%90%A7/",
            "url": "https://xqlove.xyz/%E4%B8%80%E8%B5%B7%E5%AD%A6%E4%B9%A0Vue%E5%90%A7/",
            "title": "一起学习Vue吧!",
            "date_published": "2021-03-14T01:24:24.000Z",
            "content_html": "<h1 id=\"基础篇\"><a class=\"anchor\" href=\"#基础篇\">#</a> 基础篇</h1>\n<p>Vue.js 中最核心的部分是视图渲染，从里向外依次是视图层渲染、组件机制、路由机制、状态管理、构建工具。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>div id<span class=\"token operator\">=</span><span class=\"token string\">\"app\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">/*&#123;&#125; 中只可以是变量，不可以是表达式 */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span>name<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token operator\">&lt;</span>div v<span class=\"token operator\">-</span><span class=\"token keyword\">for</span><span class=\"token operator\">=</span><span class=\"token string\">\"item in list\"</span> <span class=\"token operator\">:</span>key<span class=\"token operator\">=</span><span class=\"token string\">\"item.id\"</span><span class=\"token operator\">></span>\\<span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼<span class=\"token number\">0</span><span class=\"token operator\">--</span><span class=\"token operator\">></span>\\<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token operator\">&lt;</span>button @click<span class=\"token operator\">=</span><span class=\"token string\">\"fn(item,$event)\"</span><span class=\"token operator\">></span>按钮<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">let</span> vm <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      el<span class=\"token operator\">:</span> <span class=\"token string\">\"#app\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token comment\">/*data 中的属性和 methods 中的属性不能重复 */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      data<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>          name<span class=\"token operator\">:</span><span class=\"token string\">\"123\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>          list<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>              text<span class=\"token operator\">:</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>              id<span class=\"token operator\">:</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>              text<span class=\"token operator\">:</span><span class=\"token string\">\"hi\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>              id<span class=\"token operator\">:</span><span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>              text<span class=\"token operator\">:</span><span class=\"token string\">\"welcome\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>              id<span class=\"token operator\">:</span><span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      methods<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>          <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span>e</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>              <span class=\"token comment\">// 这里的 this 都是当前实例，不可以写成箭头函数，因为箭头函数不存在 this，若使用 this 需要在上级作用域中查找</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><h2 id=\"vue的优点\"><a class=\"anchor\" href=\"#vue的优点\">#</a> Vue 的优点</h2>\n<ul>\n<li>轻量级框架：只关注视图层，是一个构建数据的视图集合，大小只有几十 kb</li>\n<li>简单易学：国人开发，中文文档，易于理解</li>\n<li>采用双向数据绑定：在数据操作方面比较简单</li>\n<li>数据、视图、结构分开：使数据的更改更为简单，不再使用逻辑代码修改数据，只需要直接操作数据就可以完成相关操作。</li>\n<li>组件化：减少代码的冗余，实现了 html 的封装和复用，在构建单页面应用方面有着独特的优势</li>\n<li>虚拟 DOM：DOM 操作非常消耗性能，不再使用原生 DOM 操作节点，提高性能</li>\n<li>运行速度快</li>\n</ul>\n<h2 id=\"为什么vue组件中data必须是一个函数\"><a class=\"anchor\" href=\"#为什么vue组件中data必须是一个函数\">#</a> 为什么 Vue 组件中 data 必须是一个函数</h2>\n<p>保证数据的独立性，对象为引用类型，当复用组件时，由于数据对象都指向同一个 data 对象，当一个组件修改 data 时，其它重用的组件中的 data 也会被修改，而使用返回对象的函数，引用地址不同，不会出现该问题。</p>\n<h2 id=\"vue指令\"><a class=\"anchor\" href=\"#vue指令\">#</a> Vue 指令</h2>\n<p>指令：凡是 <strong>v-</strong> 开头的行内属性，我们都称为 Vue 指令</p>\n<ul>\n<li>\n<p>v-if v-else 之间不可以添加别的指令，v-show 条件为真时显示</p>\n</li>\n<li>\n<p>v-for 循环数组或者对象  v-for=&quot;(item,index) in arr&quot;</p>\n</li>\n<li>\n<p>v-model  相当于 :value 和 @input 合体，常应用于表单和组件中</p>\n</li>\n<li>\n<p>v-on: 事件名 =’函数名‘  简写 @</p>\n</li>\n<li>\n<p>v-bind = 处理行内属性 简写为：，在行内写变量</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">:src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>img<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>/* 属性名是类名，属性值是控制这个类名加不加载，此时name长度为6 >5，则此类名会记载*/</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h3</span> <span class=\"token attr-name\">:class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>&#123;active:name.length > 5&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>xxx<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h3</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span> <span class=\"token attr-name\">:</span><span class=\"token style-attr language-css\"><span class=\"token attr-name\"><span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">='</span><span class=\"token attr-value\">sty</span><span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span>加油呀<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">let</span> vm <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    el<span class=\"token operator\">:</span><span class=\"token string\">\"app\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    data<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      name<span class=\"token operator\">:</span><span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      img<span class=\"token operator\">:</span><span class=\"token string\">\"1.jpg\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      sty<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>          color<span class=\"token operator\">:</span><span class=\"token string\">\"red\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n<li>\n<p>v-cloak 防止数据不能及时加载，使用方法是在 style 标签中添加<span opacity:0=\"\"> v-cloak</span>。原理：在 Vue 渲染之前为正常的行内属性，opacity:0，所以该标签不显示，当渲染完成时，该指令自动移除，标签正常显示。</p>\n</li>\n<li>\n<p>v-text=&quot;&quot; 显示的是 innerText，文本内容比如标签 h1，初衷是为了解决小胡子问题 {}</p>\n</li>\n<li>\n<p>v-html=“” 会被渲染成 html 标签显示，比如标签 h1 就是将其变成一号标题显示</p>\n</li>\n<li>\n<p>v-once：vue 变量只会渲染一次</p>\n</li>\n<li>\n<p>v-pre：Vue 在编译的时候，直接跳过这个元素，可以提升 Vue 的编译效率</p>\n</li>\n</ul>\n<h3 id=\"vue初始化页面闪动问题\"><a class=\"anchor\" href=\"#vue初始化页面闪动问题\">#</a> Vue 初始化页面闪动问题</h3>\n<p>使用 Vue 开发时，在 Vue 初始化之前，由于 div 是不归 Vue 管的，所以我们写的代码在还没有解析的情况下会容易出现花屏现象，看到类似于  的字样，虽然一般情况下这个时间很短暂，但是我们还是有必要让解决这个问题的。</p>\n<p>首先：在 css 里加上以下代码</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>v<span class=\"token operator\">-</span>cloak<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    display<span class=\"token operator\">:</span> none<span class=\"token punctuation\">;</span><span class=\"token comment\">//opacity:0;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"v-if和v-show的区别\"><a class=\"anchor\" href=\"#v-if和v-show的区别\">#</a> v-if 和 v-show 的区别</h3>\n<ul>\n<li>v-if：是惰性的，在条件切换的时候，会对标签进行创建和销毁，条件为真时才会创建标签，有较大的切换开销，有比较小的初始加载开销。</li>\n<li>v-show：初始化的时候加载一次，无论条件是否成立，都会渲染标签，有较大的加载开销，有较小的切换开销，只是简单地控制 display:none 和 block 来改变。</li>\n</ul>\n<h3 id=\"v-for中为什么要使用key\"><a class=\"anchor\" href=\"#v-for中为什么要使用key\">#</a> v-for 中为什么要使用 key</h3>\n<ul>\n<li>\n<p>Key 值是为虚拟 DOM 服务，DOM diff 算法比较两个 DOM 树的不同之处，把不同之处替换，key 值的设定防止两个结构一样但是变量值不同的 DOM 不渲染。</p>\n</li>\n<li>\n<p>理想的 key 应该是数据的唯一的一个 ID 没有的时候我们可以使用索引：缺点 key 具有缓存，有时会导致元素不更新，复用了某老元素。</p>\n</li>\n<li>\n<p>当 Vue 用 v-for 正在更新已渲染过的元素列表时，它默认用 “就地复用” 策略。如果数据项的顺序被改变，Vue 将不是移动 DOM 元素来匹配数据项的改变，而是简单复用此处每个元素，并且确保它在特定索引下显示已被渲染过的每个元素。</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">v-if</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name.length&lt;3<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    密码&lt;input key=1 type=\"text\" placeholder=\"密码\"</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">v-if</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name.length&lt;3<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    年龄&lt;input key=2 type=\"text\" placeholder=\"年龄\"</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>/*</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    如果我们没有添加key值，就会出现就地复用原则，也就是标签只会改变不同的文本，但是不会加载新的标签。密码框中就可能显示的你输入的年龄的值，年龄框中就有可能显示的你输入的密码的值。</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>*/</pre></td></tr></table></figure></li>\n<li>\n<p>为了给 Vue 一个提示，以便它能跟踪每个节点的身份，从而重用和重新排序现有元素，你需要为每项提供一个唯一 key 属性。key 属性的类型只能为 string 或者 number 类型。</p>\n</li>\n<li>\n<p>key 的特殊属性主要用在 Vue 的虚拟 DOM 算法，在新旧 nodes 对比时辨识 VNodes。如果不使用 key，Vue 会使用一种最大限度减少动态元素并且尽可能的尝试修复 / 再利用相同类型元素的算法。使用 key，它会基于 key 的变化重新排列元素顺序，并且会移除 key 不存在的元素。</p>\n</li>\n</ul>\n<h2 id=\"vue事件修饰符\"><a class=\"anchor\" href=\"#vue事件修饰符\">#</a> Vue 事件修饰符</h2>\n<ul>\n<li>.stop：阻止冒泡</li>\n<li>.prevent：阻止默认事件行为</li>\n<li>.capture：在捕获阶段执行 （事件默认是在冒泡阶段执行）</li>\n<li>.self：仅绑定元素自身触发，只有在点击当前元素的时候才会执行，冒泡传出来的不会执行</li>\n<li>.once：2.1.4 新增，只触发一次</li>\n<li>passive：2.3.0 新增，滚动事件的默认行为 (即滚动行为) 将会立即触发，不能和.prevent 一起使用</li>\n<li>.sync 修饰符：从 2.3.0 起 Vue 重新引入了.sync 修饰符，但是这次它只是作为一个编译时的语法糖存在。它会被扩展为一个自动更新父组件属性的 v-on 监听器，也就是实现了组件的 v-model。</li>\n<li>v-for 和 v-if 尽量不要一起使用，v-for 的优先级高于 v-if，v-if 和 v-else 之间不可以插入其它的标签。</li>\n</ul>\n<h2 id=\"v-model修饰符\"><a class=\"anchor\" href=\"#v-model修饰符\">#</a> v-model 修饰符</h2>\n<ul>\n<li>.lazy：没有 lazy 走的是 input 事件，只要数据发生改变，就会重新渲染，加上 lazy 走的是 change 事件，数据发生改变且光标移出才会发生改变。</li>\n<li>.number：只能在末尾输入数据类型的值，如果输入字符串或者其他类型则不显示</li>\n<li>.trim：自动去除首尾的空格</li>\n</ul>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">v-model.lazy</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">v-model.number</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">v-model.trim</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>除此之外还有按键修饰符、鼠标修饰符、系统修饰符，可查阅官方文档查看具体用法。</p>\n<h2 id=\"todo案例\"><a class=\"anchor\" href=\"#todo案例\">#</a> todo 案例</h2>\n<h3 id=\"如何实现页面刷新数据不丢失\"><a class=\"anchor\" href=\"#如何实现页面刷新数据不丢失\">#</a> 如何实现页面刷新数据不丢失？</h3>\n<p>在 Vue 中刷新页面后会重置数组，数据会丢失，我们需要将其存入在 sessionStorage 中。</p>\n<h1 id=\"组件篇\"><a class=\"anchor\" href=\"#组件篇\">#</a> 组件篇</h1>\n<p>组件是可以复用的，但根组件无法复用。单页面开发，只有一个根实例。组件没有使用的时候，我们可以把它理解为一个普通对象，只有在使用的时候才会把这个对象中的配置转成对应的实例。</p>\n<p>全局组件是在 new Vue 之前。工程化不可以使用 template。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Vue<span class=\"token punctuation\">.</span><span class=\"token function\">component</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"my-button\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">h</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>Vue-loader 可以把.vue 文件渲染成 HTML、CSS。</p>\n<h2 id=\"父子组件通信\"><a class=\"anchor\" href=\"#父子组件通信\">#</a> 父子组件通信</h2>\n<p>Vue 是双向数据绑定，单向数据流。也就是说父组件传递给子组件的值，子组件是不可以随意修改的，一般父组件中会套很多子组件，如果子组件中修改了值导致父组件发生了修改，就无法确定到底是那个组件的数据发生了修改。</p>\n<h3 id=\"父传子\"><a class=\"anchor\" href=\"#父传子\">#</a> 父传子</h3>\n<p><strong>自定义行内属性 + props</strong></p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>/*父组件*/</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>my-child</span> <span class=\"token attr-name\">:list</span> <span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span> <span class=\"token punctuation\">\"</span>ary<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>my-child</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>/*子组件*/</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        props<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token string\">'list'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        data<span class=\"token operator\">:</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"子传父\"><a class=\"anchor\" href=\"#子传父\">#</a> 子传父</h3>\n<p><strong>自定义事件 + $emit</strong></p>\n<p>凡是在组件上定义的事件都叫做自定义事件。</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>/*父组件*/</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>my-child</span> <span class=\"token attr-name\">@click</span> <span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span> <span class=\"token punctuation\">\"</span>fn<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>my-child</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                name<span class=\"token operator\">:</span><span class=\"token string\">\"parent\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        methods<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>/*子组件*/</pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                name<span class=\"token operator\">:</span><span class=\"token string\">\"child\"</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        methods<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h2 id=\"其他的方式\"><a class=\"anchor\" href=\"#其他的方式\">#</a> 其他的方式</h2>\n<p>$parent：子组件的属性，可以直接找到父组件的实例</p>\n<p>$children：父组件的属性，可以直接调用到子组件的实例</p>\n<p>这种方式修改没有任何的拦截，父子组件中的数据容易发生混乱</p>\n<h2 id=\"eventbus\"><a class=\"anchor\" href=\"#eventbus\">#</a> eventBus</h2>\n<p>主要用于兄弟组件之间的数据交互。</p>\n<ul>\n<li>bus.$on()</li>\n<li>bus.$off()</li>\n<li>bus.$emit()</li>\n</ul>\n<p><strong>例如：</strong></p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>/*在父组件parents中有两个子组件a、b,a、b组件互为兄弟组件*/</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>//在a组件中</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token comment\"></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>getAge<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>获取年龄<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            name<span class=\"token operator\">:</span><span class=\"token string\">'xxx'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">created</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        bus<span class=\"token punctuation\">.</span><span class=\"token function\">$on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getAge\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">age</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> age</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>//在b组件中</pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token comment\"></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>giveAge<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>给年龄<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            age<span class=\"token operator\">:</span><span class=\"token string\">'18'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    methods：<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      <span class=\"token function\">giveAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>          bus<span class=\"token punctuation\">.</span><span class=\"token function\">$emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'getAge'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h2 id=\"动态组件\"><a class=\"anchor\" href=\"#动态组件\">#</a> 动态组件</h2>\n<p>比如我们在项目中需要动态加载组件时，有时候会用 v-if、v-else，但是当组件比较多的时候可以通过动态组件来加载。</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>component</span> <span class=\"token attr-name\">:is</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>currentName<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>component</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        name<span class=\"token operator\">:</span><span class=\"token string\">'studentb'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                currentName<span class=\"token operator\">:</span><span class=\"token string\">\"studenta\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        method<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token function\">changeName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentName <span class=\"token operator\">=</span> name</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h2 id=\"keep-alive\"><a class=\"anchor\" href=\"#keep-alive\">#</a> keep-alive</h2>\n<p><strong>缓存组件</strong>，例如，现在有一个场景，a、b 组件分别包括一个按钮和文本框，当用户在 a 组件的文本框中输入内容完成后，切换到 b 组件输入，再切换到 a 组件中，会发现 a 组件文本框中的内容为空。解决该问题的方法有两种，①可以将内容存在本地 localStorage 中这种方法比较麻烦，②可以将组件外加上 keep-alive 标签。</p>\n<p>也就是说 <code>keep-alive</code>  可以实现组件缓存，当组件切换时不会对当前组件进行卸载。</p>\n<p>常用的两个属性 <code>include/exclude</code> ，允许组件有条件的进行缓存。</p>\n<p>两个生命周期 <code>activated/deactivated</code> ，用来得知当前组件是否处于活跃状态。</p>\n<p>keep-alive 的中还运用了 <code>LRU(Least Recently Used)</code>  算法。</p>\n<h1 id=\"路由篇\"><a class=\"anchor\" href=\"#路由篇\">#</a> 路由篇</h1>\n<h2 id=\"如何配置路由\"><a class=\"anchor\" href=\"#如何配置路由\">#</a> 如何配置路由</h2>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>//导入 import VueRouter from \"v-router\"</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>//配置注册</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Vue<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>VueRouter<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">const</span> routes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    path<span class=\"token operator\">:</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    name<span class=\"token operator\">:</span><span class=\"token string\">\"Home\"</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 非必须</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    redirect<span class=\"token operator\">:</span><span class=\"token string\">'/input'</span><span class=\"token comment\">// 重定向</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    component<span class=\"token operator\">:</span>Home，</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    chlidren<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span>path<span class=\"token operator\">:</span><span class=\"token string\">'/about'</span><span class=\"token punctuation\">,</span>component<span class=\"token operator\">:</span>Home<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    path<span class=\"token operator\">:</span><span class=\"token string\">'/about'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    name<span class=\"token operator\">:</span><span class=\"token string\">'About'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function-variable function\">component</span><span class=\"token operator\">:</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/*webpackChunkName:\"about\"（这个注释就是当前模块的名字）*/</span><span class=\"token string\">'../views/About.vue'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 路由的懒加载 不走到对应路径就不加载</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    meta<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        title<span class=\"token operator\">:</span><span class=\"token string\">\"关于页\"</span>，</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        level<span class=\"token operator\">:</span> <span class=\"token number\">0</span> </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token comment\">// 权限配置</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">VueRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    mode<span class=\"token operator\">:</span><span class=\"token string\">\"history\"</span><span class=\"token punctuation\">,</span><span class=\"token comment\">//hash history 默认是 hash</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">// 若使用的是 history，是需要后端进行配合的；凡是我们前端设置的路径，去后端请求的时候不要返回 404，返回我们的项目主页即可，因为我们认识这个路径</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    base<span class=\"token operator\">:</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">BASE_URL</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 也是为了配合后端设置的路径名</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    routes<span class=\"token comment\">// 路由映射表，其实就是一个数组</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>在main<span class=\"token punctuation\">.</span>js中挂载</pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">let</span> vm <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    router<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    store<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token function-variable function\">render</span><span class=\"token operator\">:</span><span class=\"token parameter\">h</span> <span class=\"token operator\">=></span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">$mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>router-link</span> <span class=\"token attr-name\">to</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>/input<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span>表单<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>router-link</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>router-view</span><span class=\"token punctuation\">/></span></span></pre></td></tr></table></figure><h2 id=\"路由的两种形式\"><a class=\"anchor\" href=\"#路由的两种形式\">#</a> 路由的两种形式</h2>\n<ul>\n<li>history：利用的是 onpopstate 这个事件，采用了 HTML5 中提供的 API 来实现，主要有 <code>history.pushState()</code>  和 <code>history.replaceState()</code> 。会刷新页面。</li>\n<li>hash：利用的 window 下的 onhashchange 这个事件，即地址栏 URL 中的 #符号，hash 虽然出现 URL 中，但不会被包含在 HTTP 请求中，对后端完全没有影响，因此改变 hash 不会重新加载页面。 <code>location.hash</code>  的值实际就是 URL 中 <code>#</code> 后面的东西。</li>\n</ul>\n<p>这两个方法应用于浏览器的历史记录站，在当前已有的 back、forward、go 的基础之上，它们提供了对历史记录进行修改的功能。只是当它们执行修改时，虽然改变了当前的 URL，但浏览器不会立即向后端发送请求。</p>\n<h2 id=\"路由传递参数的两种方式\"><a class=\"anchor\" href=\"#路由传递参数的两种方式\">#</a> 路由传递参数的两种方式</h2>\n<ul>\n<li>query：路由传参。就是问号传参，字符串拼接或者对象的方式，使用 query 方法传入的参数使用 this.$route.query 接收。</li>\n<li>params：路径传参。使用 params 方式传入的参数使用 this.$route.params 接收。需要在 path 中配置好。</li>\n</ul>\n<h2 id=\"route-和-router有什么区别\"><a class=\"anchor\" href=\"#route-和-router有什么区别\">#</a> $route 和 $router 有什么区别</h2>\n<ul>\n<li>router 里面放方法，比如 push、replace、go 方法，想使用编程式导航使用，$router 是 “路由实例” 对象包括了路由的跳转方法，钩子函数等。</li>\n<li>route 里面放属性，是 “路由信息对象”，包括 path，params，hash,query，fullPath，matched，name 等路由信息参数</li>\n</ul>\n<h2 id=\"push-和-replace有什么区别\"><a class=\"anchor\" href=\"#push-和-replace有什么区别\">#</a> push 和 replace 有什么区别</h2>\n<ul>\n<li>\n<p>push 会新增一条历史记录，也就是可以返回上一个跳转的记录</p>\n</li>\n<li>\n<p>replace 只是把当前的路径进行了一个替换，不会新增历史记录。</p>\n</li>\n</ul>\n<h2 id=\"导航守卫钩子函数\"><a class=\"anchor\" href=\"#导航守卫钩子函数\">#</a> 导航守卫钩子函数</h2>\n<ul>\n<li>beforeEach：前置钩子函数，登录校验</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>router<span class=\"token punctuation\">.</span><span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">to<span class=\"token punctuation\">,</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">,</span>next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isLogin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 权限校验</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>useLevel <span class=\"token operator\">&lt;</span> to<span class=\"token punctuation\">.</span>meta<span class=\"token punctuation\">.</span>level<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/404'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 证明没有登录</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">.</span>path <span class=\"token operator\">==</span> <span class=\"token string\">'/'</span> <span class=\"token operator\">||</span> to<span class=\"token punctuation\">.</span>path <span class=\"token operator\">==</span> <span class=\"token string\">'/login'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token comment\">// 访问不需要登录的界面</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token comment\">// 访问需要登录的页面</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/login'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>     </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>路由独享守卫：beforeEnter</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">VueRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    routes<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            path<span class=\"token operator\">:</span> <span class=\"token string\">'/foo'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            component<span class=\"token operator\">:</span> Foo<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token function-variable function\">beforeEnter</span><span class=\"token operator\">:</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">to<span class=\"token punctuation\">,</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">,</span>next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token comment\">// 给该路由添加的守卫函数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>组件内守卫 (beforeRouterEnter、beforeRouterUpdate、beforeRouterLeave，只有路由的组件才会执行。)\n<ul>\n<li>beforeRouterEnter：在渲染组件的对应路由被 confirm 前调用，不能获取组件实例 &quot;this&quot;，因为在守卫执行前，组件实例还未被创建。</li>\n<li>beforeRouterUpdate：在当前路由改变，该组件被复用时调用，比如对于携带动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，由于会渲染同样的 Foo 组件，因此组件实例会被复用，钩子函数在此时被调用，可以访问组件实例 this</li>\n<li>beforeRouterLeave：导航离开该组件对应路由时调用，可以访问组件实例 'this',</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">beforeRouterLeave</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">to<span class=\"token punctuation\">,</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">,</span>next</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">let</span> bol <span class=\"token operator\">=</span> <span class=\"token function\">confirm</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"是否确认离开?\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"路由懒加载\"><a class=\"anchor\" href=\"#路由懒加载\">#</a> 路由懒加载</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function-variable function\">component</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/*webpackChunkName:'about'*/</span><span class=\"token string\">'../views/About.vue'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"原理篇\"><a class=\"anchor\" href=\"#原理篇\">#</a> 原理篇</h1>\n<h2 id=\"mvvm原理\"><a class=\"anchor\" href=\"#mvvm原理\">#</a> MVVM 原理</h2>\n<h3 id=\"mvvm介绍\"><a class=\"anchor\" href=\"#mvvm介绍\">#</a> MVVM 介绍</h3>\n<ul>\n<li>界⾯框架 WPF ，前端最早的 MVVM 框架 knockout 在 2010 年发布。\n<ul>\n<li>Model 层：对应数据层的域模型，它主要做域模型的同步。通过 Ajax/fetch 等 API 完成客户端和服务端业务 Model 的同步。在层间关系⾥，它主要⽤于抽象出 ViewModel 中视图的 Model。</li>\n<li>View 层：作为视图模板存在，在 MVVM ⾥，整个 View 是⼀个动态模板。除了定义结构、布局外，它展示的是 ViewModel 层的数据和状态。View 层不负责处理状态，View 层做的是数据绑定的声明、 指令的声明、 事件绑定的声明。</li>\n<li>ViewModel 层：把 View 需要的层数据暴露，并对 View 层的 数据绑定声明、 指令声明、 事件绑定声明 负责，也就是处理 View 层的具体业务逻辑。ViewModel 底层会做好绑定属性的监听。当 ViewModel 中数据变化，View 层会得到更新；⽽当 View 中声明了数据的双向绑定（通常是表单元素），框架也会监听 View 层（表单）值的变化。⼀旦值变化，View 层绑定的 ViewModel 中的数据也会得到⾃动更新。</li>\n</ul>\n</li>\n<li>MVVM 是 <code>Model-View-ViewModel</code>  缩写，也就是把 <code>MVC</code>  中的 <code>Controller</code>  演变成 <code>ViewModel</code> 。Model 层代表数据模型，View 代表 UI 组件，ViewModel 是 View 和 Model 层的桥梁，数据会绑定到 viewModel 层并自动将数据渲染到页面中，视图变化的时候会通知 viewModel 层更新数据。</li>\n</ul>\n<h3 id=\"手写mvvm\"><a class=\"anchor\" href=\"#手写mvvm\">#</a> 手写 MVVM</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 数据劫持</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">observer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 先判断 data 是否为一个对象</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'[object,Object]'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">let</span> keys <span class=\"token operator\">=</span> object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 获取所有的属性，为了对每一个属性进行劫持</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    keys<span class=\"token punctuation\">.</span><span class=\"token function\">defineReactive$1</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span>key<span class=\"token punctuation\">,</span>data<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">defineReactive$1</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span>key<span class=\"token punctuation\">,</span>val</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">let</span> dep <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 每一个 key 都有它自己的 dep</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineproperty</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span>key<span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        enumerable<span class=\"token operator\">:</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token comment\">// 为什么需要判断？能够触发 get 的方式有很多种，比如在控制台写数据等，所以只有触发了 watcher 实例才会执行这部分代码</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>Dep<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                dep<span class=\"token punctuation\">.</span><span class=\"token function\">addSub</span><span class=\"token punctuation\">(</span>Dep<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span><span class=\"token comment\">// 事件池中放置的都是一些订阅者             </span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">return</span> val</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>newVal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>newVal <span class=\"token operator\">!==</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>               val <span class=\"token operator\">=</span> newVal </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>               dep<span class=\"token punctuation\">.</span><span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">// 模板编译</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">nodeToFragment</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">el<span class=\"token punctuation\">,</span>vm</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\">// 把文档上的节点转到了文档碎片上</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">let</span> fragment <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createDocumentFragment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">let</span> child<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>child <span class=\"token operator\">=</span> el<span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token comment\">//child 是每一个节点，我们需要把每一个节点都编译了</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token function\">compile</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        fragment<span class=\"token punctuation\">.</span><span class=\"token function\">appendChile</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    el<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>fragment<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">compile</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node<span class=\"token punctuation\">,</span>vm</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    编译 node 节点：先判断节点的类型，元素节点 | 文本节点元素节点需要考虑行内属性和它的子节点，文本节点直接进行替换即可。</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    1 (元素) 3 (文本) 8 (注释) 9</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>nodeType <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token comment\">// 证明这是一个元素节点</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token keyword\">let</span> attrs <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>attributes<span class=\"token punctuation\">;</span><span class=\"token comment\">// 获取是有意的行内属性</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>attrs<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token comment\">// 我们需要的是 v-xxx 的行内属性 例如:v-model model = \"name\"</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^v-</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>nodeName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                <span class=\"token comment\">// 证明是 v-model; 我们需要获取对应的值</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                <span class=\"token keyword\">let</span> vName <span class=\"token operator\">=</span> item<span class=\"token punctuation\">.</span>nodeValue<span class=\"token punctuation\">;</span><span class=\"token comment\">//name 这个变量</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                <span class=\"token keyword\">let</span> val <span class=\"token operator\">=</span> vm<span class=\"token punctuation\">.</span>$data<span class=\"token punctuation\">[</span>vName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 获取 name 的值</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">Watcher</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span>vName<span class=\"token punctuation\">,</span>vm<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                node<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span><span class=\"token comment\">// 把值放入 input 框中</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token comment\">// 以上处理的是行内属性，还需要考虑子节点</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>node<span class=\"token punctuation\">.</span>childNodes<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token comment\">// 递归编译子节点</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token function\">compile</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">,</span>vm<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token comment\">// 文本节点，需要获取对应的文本字符串，然后把 &#123;&#125; 中的内容转成真实内容</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token keyword\">let</span> str <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">;</span><span class=\"token comment\">//&#123;name&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\&#123;\\&#123;(\\w+)\\&#125;\\&#125;</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            <span class=\"token comment\">// 证明里面有 &#123;&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            str <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\&#123;\\&#123;(\\w+)\\&#125;\\&#125;</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                <span class=\"token comment\">//b ---> name</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">Watcher</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>vm<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>                <span class=\"token keyword\">return</span> vm<span class=\"token punctuation\">.</span>$data<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            node<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> str<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre></pre></td></tr><tr><td data-num=\"78\"></td><td><pre><span class=\"token comment\">// 创造一个订阅器，也就是观察者模式，将数据劫持和模板编译联系起来，</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dep</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token comment\">// 每一个属性都应该有自己的订阅器，比如说变量 name 发生改变时，把使用到 name 的地方重新更新，若 age 发生改变，重新更新 age</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>subs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    <span class=\"token function\">addSub</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">sub</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>subs<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>sub<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>subs<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">sub</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>            <span class=\"token comment\">// 负责通知各个事件，sub 就是一些 watcher 实例</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>            sup<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre><span class=\"token comment\">// 创造一个订阅者</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Watcher</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node<span class=\"token punctuation\">,</span>key<span class=\"token punctuation\">,</span>vm</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>        Dep<span class=\"token punctuation\">.</span>target <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//this 就是 watcher 实例</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> key<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>vm <span class=\"token operator\">=</span> vm<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>        Dep<span class=\"token punctuation\">.</span>target <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>    <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>        <span class=\"token comment\">// 负责更新 DOM</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>nodeType <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>            <span class=\"token comment\">// 只考虑 input 框</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value</pre></td></tr><tr><td data-num=\"109\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value</pre></td></tr><tr><td data-num=\"111\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>    <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>vm<span class=\"token punctuation\">.</span>$data<span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 会触发 get 函数</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre></pre></td></tr><tr><td data-num=\"118\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">option</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>    <span class=\"token comment\">// 私有属性 $el 对应的是我们的 AP 元素</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>    <span class=\"token comment\">// 私有属性 $data 对应的是我们传进来的 data</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span>option<span class=\"token punctuation\">.</span>el<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$data <span class=\"token operator\">=</span> option<span class=\"token punctuation\">.</span>data</pre></td></tr><tr><td data-num=\"123\"></td><td><pre>    <span class=\"token comment\">// 先去劫持数据</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>    <span class=\"token function\">observer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$data<span class=\"token punctuation\">)</span><span class=\"token comment\">// 负责劫持数据</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"双向数据绑定\"><a class=\"anchor\" href=\"#双向数据绑定\">#</a> 双向数据绑定</h2>\n<p>Vue 数据双向绑定是通过数据劫持 + 发布订阅模式的方式来实现的。利用了 Object.definePrototype () 这个方法重新定义了对象获取属性值（get) 和设置属性值（set），在 Vue3.0 中采用 proxy。</p>\n<p><strong>注意:</strong> Vue.js 目前对状态的侦测策略采用了中等粒度，只通知到组件级别，然后组件使用虚拟 DOM 来渲染视图。</p>\n<h3 id=\"defineproperty数据劫持\"><a class=\"anchor\" href=\"#defineproperty数据劫持\">#</a> defineproperty（数据劫持）</h3>\n<p>Vue 不兼容 IE8，是因为 IE8 不支持 defineproperty。数据劫持是发生在 Vue 初始化的时候。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* 此时 name 属性被监听了 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineproperty</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name属性被调用了\"</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 获取 obj.name 的值时，会调用此方法，返回 value，其实也就是 set 中赋的值</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>       <span class=\"token keyword\">return</span> value</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>       console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name属性被赋值了\"</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 为 obj.name 赋值时，会调用此方法，所赋值的值为 val 参数的值</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>       value <span class=\"token operator\">=</span> val</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">/*defineproperty 中的其它属性 */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>obj<span class=\"token punctuation\">.</span><span class=\"token function\">defineproperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span><span class=\"token string\">\"sex\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    value<span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 为 sex 变量赋值，此时没有触发 set、get，我们可以在控制台观察到 sex 是灰色的</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    enumerable<span class=\"token operator\">:</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 可枚举，此时循环是不可以遍历到的</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    configurable<span class=\"token operator\">:</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 可删除，此时 delete.obj.sex 是不可以删除该属性得我</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    writable<span class=\"token operator\">:</span><span class=\"token boolean\">false</span><span class=\"token comment\">// 可写，此时无法改变 sex 的值</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"proxy代理\"><a class=\"anchor\" href=\"#proxy代理\">#</a> proxy（代理）</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   target: 代理的目标 (此处为 obj)</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   key: 监听的属性</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   obj2: 可以理解为 obj 的代理对象</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">var</span> obj2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj <span class=\"token operator\">===</span> target<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> target<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span>key<span class=\"token punctuation\">,</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj <span class=\"token operator\">===</span> target<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span>val<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        target<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> val</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   此时我们调用 obj.name 时，它是不触发 get、set 的，只有调用 obj2.name 才会触发。</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>*/</span></pre></td></tr></table></figure><h3 id=\"区别\"><a class=\"anchor\" href=\"#区别\">#</a> 区别</h3>\n<p>defineproperty 是一个属性一个属性的去监听，proxy 是整个对象的代理。</p>\n<h2 id=\"说一说数据更新视图不更新的情况vue如何监听对象或数组某个属性的变化\"><a class=\"anchor\" href=\"#说一说数据更新视图不更新的情况vue如何监听对象或数组某个属性的变化\">#</a> 说一说数据更新，视图不更新的情况（Vue 如何监听对象或数组某个属性的变化）</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> vm <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    el<span class=\"token operator\">:</span><span class=\"token string\">\"#app\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    data<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        name<span class=\"token operator\">:</span><span class=\"token string\">\"dx\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        obj<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span>a<span class=\"token operator\">:</span><span class=\"token number\">123</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        ary<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 通过.length 或者数组下标更改数组，数组的视图不更新，只有通过 splice pop push unshift shift sort reverse 等方法</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    method<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> <span class=\"token number\">666</span><span class=\"token punctuation\">,</span><span class=\"token comment\">//b 是我们新增的一个属性，没有被劫持，所以直接增加一个 b 是不会触发视图更新的。</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>       <span class=\"token comment\">/* fn ()&#123;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            this.obj = &#123;...this.obj,b:666&#125;// 直接更改了 obj 的地址；obj 是被劫持的，所以 obj 一改，视图就更新</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            this.obj = Object.assign (&#123;b:666&#125;,this.obj)// 将 this.obj 加入 b:666 这个属性，在整体放在 b:666 这个地址中.</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            this.obj = Object.assign (this.obj,&#123;b:666&#125;)//obj 的地址没有发生改变，因为地址始终是 this.obj 的地址，object.assign () 默认的地址是第一个的地址</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>          fn ()&#123;</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>             console.log (this.$set)// 利用 Vue 提供的 defineReactive$$1 这个方法，对该目标中的属性进行劫持，defineReactive 本质还是利用了 defineReactive 的 API，也就是 defineProperty 数据劫持原理。</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>             this.$set (this.obj,'b',666)//this.$set (目标，属性名，属性值)</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>          &#125;</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        &#125;*/</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">// 能触发视图更新的哪些变量，一定是被劫持的数据</span></pre></td></tr></table></figure><h2 id=\"单向数据流\"><a class=\"anchor\" href=\"#单向数据流\">#</a> 单向数据流</h2>\n<p>​        双向数据绑定就是在单向绑定的基础上给可输入元素（input、textare 等）添加了 change (input) 事件，来动态修改 model 和 view，即通过触发（$emit）父组件的事件来修改 mv 来达到 mvvm 的效果。而 vue 组件间传递数据是单向的，即数据总是由父组件传递到子组件，子组件在其内部可以有自己维护的数据，但它无权修改父组件传递给它的数据，当开发者尝试这样做的时候，vue 将会报错。这样做是为了组件间更好的解耦，在开发中可能有多个子组件依赖于父组件的某个数据，假如子组件可以修改父组件数据的话，一个子组件变化会引发所有依赖这个数据的子组件发生变化，所以 vue 不推荐子组件修改父组件的数据，直接修改 props 会抛出警告。</p>\n<h2 id=\"虚拟dom\"><a class=\"anchor\" href=\"#虚拟dom\">#</a> 虚拟 DOM</h2>\n<p><strong>虚拟 DOM 就是用普通的 JS 对象去模拟了真实 DOM。</strong></p>\n<h3 id=\"什么是vnode\"><a class=\"anchor\" href=\"#什么是vnode\">#</a> 什么是 VNode</h3>\n<p>在 Vue.js 中存在一个 VNode 类，使用它可以实例化不同类型的 vnode 实例，而不同类型的 vnode 实例各自表示不同类型的 DOM 元素。vnode 可以理解为 <strong>节点描述对象</strong> ，它描述了应该怎样去创建真实的 DOM。</p>\n<p>渲染视图的过程就是先创建 vnode，然后再使用 vnode 去生成真实 DOM，最后插入到页面渲染视图。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* 虚拟 DOM */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    tag<span class=\"token operator\">:</span>div<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    props<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>id<span class=\"token operator\">...</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    children<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        tag<span class=\"token operator\">:</span><span class=\"token string\">\"h1\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        props<span class=\"token operator\">:</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        children<span class=\"token operator\">:</span><span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"vnode的作用\"><a class=\"anchor\" href=\"#vnode的作用\">#</a> VNode 的作用</h3>\n<p>我们知道每次渲染视图的时候，都是先创建 vnode，然后再用它生成虚拟 DOM 插入到页面中，所以我们可以将上一次渲染视图所创建的 vnode 缓存起来，之后重新渲染视图的时候，可以将新创建的 vnode 与缓存的的进行比较，看有什么不同，基于此生成 DOM。</p>\n<p>前面我们也提到了，Vue 的状态侦测策略是中等粒度，也就是说组件中一个状态发生改变，整个组件都需要重新渲染，重新渲染整个组件的节点会造成资源的性能浪费，所以对 <strong>vnode 进行缓存</strong> 显得尤为重要。</p>\n<h3 id=\"vnode的类型\"><a class=\"anchor\" href=\"#vnode的类型\">#</a> VNode 的类型</h3>\n<ul>\n<li>注释节点 ： 只有两个有效属性（text、isComment）</li>\n<li>文本节点 ： 只有 text 属性</li>\n<li>元素节点 ：有以下属性（tag：节点名称，例如 div、p；data：节点上的数据，例如 class、style；children：当前节点的子节点列表；context：当前组件的 Vue.js 实例）</li>\n<li>组件节点：与元素节点类似，有两个独有属性（componentOptions、componentInstance)</li>\n<li>函数式节点：与组件节点类似，有两个独有属性（functionalContext、functionalOptions)</li>\n<li>克隆节点 ：将现有节点的属性复制到新节点中，让新创建的节点和被克隆节点的属性保持一致，从而实现克隆效果。它的作用是优化静态节点（内容不会改变）和插槽节点。克隆节点的 isCloned 属性为 true。</li>\n</ul>\n<h3 id=\"patch\"><a class=\"anchor\" href=\"#patch\">#</a> patch</h3>\n<p><strong>Vue 新旧 DOM 在比较的时候，只会同级比较，不会跨级比较。</strong></p>\n<p><strong>虚拟 DOM 中最核心的部分是 pathch</strong>，它可以将虚拟 DOM 转换成真实 DOM。</p>\n<p>之所以我们要采用 patch 是因为 DOM 操作的执行速度远不如 Javascript 的运算速度快，我们把大量的 DOM 操作搬运到 Javascript 中，使用 patching 算法来计算出真正需要更新的节点，能更大限度的减少 DOM 操作，从而显著提升性能。</p>\n<p>patch 不是暴力替换节点，而是在现有的基础上修改 DOM 达到渲染视图的目的：</p>\n<ul>\n<li>创建新增的节点</li>\n<li>删除已经废除的节点</li>\n<li>修改需要更新的节点</li>\n</ul>\n<h4 id=\"新增节点\"><a class=\"anchor\" href=\"#新增节点\">#</a> 新增节点</h4>\n<ol>\n<li>当 oldVnode 不存在，而 vnode 存在时，也就是首次渲染的时候</li>\n<li>当 vnode 和 oldVnode 完全不是同一个节点时，我们是以 vnode 为标准来渲染视图的，所以 vnode 是一个全新的节点，oldVnode 是一个被废弃的节点。</li>\n</ol>\n<h4 id=\"删除节点\"><a class=\"anchor\" href=\"#删除节点\">#</a> 删除节点</h4>\n<ol>\n<li>vnode 中不存在，而 oldVnode 中存在（替换过程是将新节点插入在旧节点的旁边，然后再将旧节点删除）</li>\n</ol>\n<h4 id=\"更新节点\"><a class=\"anchor\" href=\"#更新节点\">#</a> 更新节点</h4>\n<p>我们可以发现在新增节点和删除节点时，vnode 和 oldVnode 是完全不同的两个节点，还有一种常见的场景是新节点和旧节点是同一个节点，这时候我们就需要对两个节点进行比较细致的比对。</p>\n<p>在更新节点时，首先需要判断其是否为静态节点（一旦渲染到界面上之后，无论日后状态如何变化，都不会发生任何变化的节点），如果是直接跳过该节点即可。</p>\n<p><strong>例如：</strong></p>\n<ol>\n<li>两个节点是同一个文本节点，只是文本的内容不一样，我们就需要重置 oldVnode 在视图中所对应的真实 DOM 节点的文本。直接调用 setTextContent 方法即可。</li>\n<li>当 vnode 没有 text 属性时，我们需要判断其是否有 children。\n<ul>\n<li>若无，则说明 oldVnode 要么是空标签，要么是文本节点，若是文本节点则需要将文本清空，将 vnode 的 children 一个一个创建并插入到视图中。</li>\n<li>若有，则说明它是空节点，oldVnode 中有什么删什么。</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"更新子节点\"><a class=\"anchor\" href=\"#更新子节点\">#</a> 更新子节点</h4>\n<ol>\n<li>\n<p>创建子节点</p>\n<p>新旧两个节点列表是通过循环比较的，所以创建节点的操作是在循环中执行的，具体是在 oldChildren 中中寻找本次循环所指向的新节点。若没有找到，则需要创建节点并插入在未处理的节点前面。</p>\n<p><img data-src=\"https://cloud-img-1301075855.cos.ap-chengdu.myqcloud.com/xin/%E6%9B%B4%E6%96%B0%E5%AD%90%E8%8A%82%E7%82%B9.jpg\" alt=\"\" /></p>\n<p>可能你会疑问为什么要插入在未处理的节点前面，插入到已处理的节点后面不行吗？</p>\n<p>答案是不行的，如果这个新节点后面也是一个新增节点呢？</p>\n<p>我们希望插入的位置是如下图所示的，</p>\n<p><img data-src=\"https://cloud-img-1301075855.cos.ap-chengdu.myqcloud.com/xin/%E6%8F%92%E5%85%A5%E5%88%B0%E6%9C%AA%E5%A4%84%E7%90%86%E8%8A%82%E7%82%B9%E5%89%8D.jpg\" alt=\"\" /></p>\n<p>如果插入到已处理节点的后面就变成了如下图所示，</p>\n<p><img data-src=\"https://cloud-img-1301075855.cos.ap-chengdu.myqcloud.com/xin/%E6%8F%92%E5%85%A5%E5%88%B0%E5%B7%B2%E5%A4%84%E7%90%86%E8%8A%82%E7%82%B9%E5%90%8E.jpg\" alt=\"\" /></p>\n<p><strong>关于新节点插入的位置需要特别注意</strong> 我们是使用虚拟节点进行比对，右下表示已处理的只有两个，不包括新插入的节点，所以如果插入在已处理的节点后面，就会插入到一个错误的位置。</p>\n</li>\n<li>\n<p>更新子节点</p>\n<p>如果两个节点是同一个节点，并且位置相同，则更新即可。</p>\n</li>\n<li>\n<p>移动子节点</p>\n<p>如果位置不相同则需要移动节点，调用 Node.insertBefore () 方法，移动到所有未处理节点的前面即可。</p>\n</li>\n<li>\n<p>删除子节点</p>\n<p>删除在 oldchildren 中存在，newchildren 中不存在的节点即可。</p>\n</li>\n</ol>\n<h4 id=\"优化策略\"><a class=\"anchor\" href=\"#优化策略\">#</a> 优化策略</h4>\n<ol>\n<li>\n<p>新前（newchildren 中未处理的第一个节点）与旧前（oldchildren 中未处理的第一个节点)</p>\n<p>对比是否是同一个节点，若是更新，若不是进行 2</p>\n</li>\n<li>\n<p>新后（newchildren 中未处理的最后一个节点）与旧后（oldchildren 中未处理的最后一个节点)</p>\n<p>对比是否是同一个节点，若是更新，若不是进行 3</p>\n</li>\n<li>\n<p>新后与旧前</p>\n<p>对比是否是同一个节点，若是则更新，由于位置不同则还需要移动到 oldchildren 中所有未处理节点的最后面，若不是进行 4</p>\n</li>\n<li>\n<p>新前与旧后</p>\n<p>对比是否是同一个节点，若是则更新，由于位置不同则还需要移动到 oldchildren 中所有未处理节点的最前面。</p>\n</li>\n</ol>\n<p><strong>进入到循环体内的都是未处理的节点，否则是已处理的节点</strong></p>\n<h2 id=\"模板编译\"><a class=\"anchor\" href=\"#模板编译\">#</a> 模板编译</h2>\n<p>vue 中的模板 template 无法被浏览器解析并渲染，因为这不属于浏览器的标准，不是正确的 HTML 语法，所有需要将 template 转化成一个 JavaScript 函数，这样浏览器就可以执行这一个函数并渲染出对应的 HTML 元素，就可以让视图跑起来了，这一个转化的过程，就成为模板编译。</p>\n<p>模板编译又分三个阶段，解析 parse，优化 optimize，生成 generate，最终生成可执行函数 render。</p>\n<ul>\n<li>parse 阶段：使用大量的正则表达式对 template 字符串进行解析，将标签、指令、属性等转化为抽象语法树 AST。</li>\n<li>optimize 阶段：遍历 AST，找到其中的一些静态节点并进行标记，方便在页面重渲染的时候进行 diff 比较时，直接跳过这一些静态节点，优化 runtime 的性能。</li>\n<li>generate 阶段：将最终的 AST 转化为 render 函数字符串。</li>\n</ul>\n<h3 id=\"渲染函数\"><a class=\"anchor\" href=\"#渲染函数\">#</a> 渲染函数</h3>\n<p>Vue 推荐在绝大多数的情况下使用模板渲染，但是有时候通过模板渲染比较麻烦的情况下，我们通过渲染函数来渲染。比如：在官方文档中通过 level 值判断标签的显示。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function-variable function\">render</span><span class=\"token operator\">:</span><span class=\"token parameter\">h</span><span class=\"token operator\">=></span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">$mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#app\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"api篇\"><a class=\"anchor\" href=\"#api篇\">#</a> API 篇</h1>\n<h2 id=\"vuefilter\"><a class=\"anchor\" href=\"#vuefilter\">#</a> Vue.filter</h2>\n<p>过滤器可以有多个。</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>app<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>&#123;\\&#123;num|parse(1,2,3,4)&#125;\\&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>&#123;\\&#123;num|parse|qqq&#125;\\&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    Vue<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token string\">'parse'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">//val 永远是 |(管道符）前边的表达式或变量对应的值</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span><span class=\"token comment\">//10000,1,2,3,4</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>val<span class=\"token operator\">/</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    Vue<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token string\">'qqq'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token comment\">//100.00</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> val<span class=\"token operator\">+</span><span class=\"token string\">'qqq'</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">let</span> vm <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        el<span class=\"token operator\">:</span> <span class=\"token string\">\"#app\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        data<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            num<span class=\"token operator\">:</span><span class=\"token number\">10000</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h2 id=\"计算属性和侦听器以及两者的区别\"><a class=\"anchor\" href=\"#计算属性和侦听器以及两者的区别\">#</a> 计算属性和侦听器以及两者的区别</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>computed<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 计算属性中的属性名不能跟 data 和 methods 中重复</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">//computed data methods props 这四个中的属性 最终都会挂载到当前实例上</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">revName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'computed'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 依赖 指的是 当前函数体内同步使用的 vue 变量</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 在 revName 中 只使用了 this.name; 也就是 只有当 name 发生改变的时候 才会执行该函数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 计算属性的缓存值 说的就是 上次计算结果</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 当我们发现 某些要写的变量 存在依赖关系的时候 我们应当使用 计算属性</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        qqq<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token comment\">// 上边的这种简写方式 只是相当于 写了一个 get</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token comment\">//val 就是要设置的那个值</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> val</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">let</span> vm <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    el<span class=\"token operator\">:</span><span class=\"token string\">\"#app\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    data<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        name<span class=\"token operator\">:</span><span class=\"token string\">\"xxx\"</span>，</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        obj</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    watch<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token comment\">// 监听的属性，都是已经存在的属性</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newV<span class=\"token punctuation\">,</span>oldV</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token comment\">// 死活监听 name 属性，只要 name 发生了改变；这个函数就会执行，不论同异步</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newV<span class=\"token punctuation\">,</span>oldV<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        name<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token function\">handler</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newV<span class=\"token punctuation\">,</span>oldV</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newV<span class=\"token punctuation\">,</span>oldV<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            immediate<span class=\"token operator\">:</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 第一次渲染的时候就执行一次 默认 false</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token comment\">//obj()&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token comment\">// 监听的是 obj 这个变量 里边属性的改变 我们监听不到</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token comment\">//console.log(arguments)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        obj<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token function\">handler</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newV<span class=\"token punctuation\">,</span>oldV</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                <span class=\"token comment\">// 深度监听之后，新值和老值是同一个地址</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newV<span class=\"token punctuation\">,</span>oldV<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            deep<span class=\"token operator\">:</span><span class=\"token boolean\">true</span><span class=\"token comment\">// 深度监听</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"计算属性computed\"><a class=\"anchor\" href=\"#计算属性computed\">#</a> 计算属性 computed：</h3>\n<ul>\n<li>支持缓存，只有依赖数据发生改变，才会重新进行计算</li>\n<li>不支持异步，当 computed 内有异步操作时无效，无法监听数据的变化</li>\n<li>computed 属性值会默认走缓存，计算属性是基于它们的响应式依赖进行缓存的，也就是基于 data 中声明过或者父组件传递的 props 中的数据通过计算得到的值</li>\n<li>如果一个属性是由其他属性计算而来的，这个属性依赖其他属性，是一个多对一或者一对一，一般用 computed</li>\n<li>如果 computed 属性属性值是函数，那么默认会走 get 方法；函数的返回值就是属性的属性值；在 computed 中的，属性都有一个 get 和一个 set 方法，当数据变化时，调用 set 方法。</li>\n<li>比较适合多对一</li>\n</ul>\n<h3 id=\"侦听属性watch\"><a class=\"anchor\" href=\"#侦听属性watch\">#</a> 侦听属性 watch：</h3>\n<ul>\n<li>不支持缓存，数据变，直接会触发相应的操作；</li>\n<li>watch 支持异步；</li>\n<li>监听的函数接收两个参数，第一个参数是最新的值；第二个参数是输入之前的值；</li>\n<li>当一个属性发生变化时，需要执行对应的操作；一对多；</li>\n<li>监听数据必须是 data 中声明过或者父组件传递过来的 props 中的数据，当数据变化时，触发其他操作，函数有两个参数：</li>\n<li>比较适合一对多</li>\n</ul>\n<blockquote>\n<p>immediate：组件加载立即触发回调函数执行</p>\n</blockquote>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>watch<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  firstName<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">handler</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newName<span class=\"token punctuation\">,</span> oldName</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fullName <span class=\"token operator\">=</span> newName <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lastName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 代表在 wacth 里声明了 firstName 这个方法之后立即执行 handler 方法</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    immediate<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>deep: deep 的意思就是深入观察，监听器会一层层的往下遍历，给对象的所有属性都加上这个监听器，但是这样性能开销就会非常大了，任何修改 obj 里面任何一个属性都会触发这个监听器里的 handler</p>\n</blockquote>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>watch<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  obj<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">handler</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newName<span class=\"token punctuation\">,</span> oldName</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'obj.a changed'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    immediate<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    deep<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>优化：我们可以使用字符串的形式监听</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>watch<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token string\">'obj.a'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">handler</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newName<span class=\"token punctuation\">,</span> oldName</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'obj.a changed'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    immediate<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// deep: true</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这样 Vue.js 才会一层一层解析下去，直到遇到属性 a，然后才给 a 设置监听函数。</p>\n<h3 id=\"vueuse在什么时候会使用\"><a class=\"anchor\" href=\"#vueuse在什么时候会使用\">#</a> Vue.use 在什么时候会使用</h3>\n<p>Vue.use (对象或者一个函数)，若是一个对象，他默认去找里面的 install 方法，若是函数则直接执行函数</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 直接执行函数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Vue<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">_vue</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>_vue <span class=\"token operator\">==</span> Vue<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 找到 install 方法执行</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Vue<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">install</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">_vue</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>_vue<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  配置自定义组件，需要配置 index.js 文件，例如:</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  import button from './button.vue'</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  import input from './input.vue'</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 读取./ 路径下的所有的.vue 后缀的文件；true 代表深层读取；false 代表就读取一层路径</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">const</span> requireComponent <span class=\"token operator\">=</span> require<span class=\"token punctuation\">.</span><span class=\"token function\">context</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./'</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.vue$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// 显示所有的.vue 文件名</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>requireComponent<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">install</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">_vue</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">/*button.name: 在组件 data 中设置 name 属性的值 */</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    _vue<span class=\"token punctuation\">.</span><span class=\"token function\">component</span><span class=\"token punctuation\">(</span>button<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>button<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    _vue<span class=\"token punctuation\">.</span><span class=\"token function\">component</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>input<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> install</pre></td></tr></table></figure><h3 id=\"vueuse怎么保证一个插件只执行一次\"><a class=\"anchor\" href=\"#vueuse怎么保证一个插件只执行一次\">#</a> Vue.use 怎么保证一个插件只执行一次</h3>\n<p>例如：Vue.use (Vuex) 在源码中如果有就会直接返回。<br />\n会把之前所有 use 过的插件放在一个数组中，然后每一次执行的时候，先去判断该插件在不在数组中，只要找到该插件就证明之前 use 过，就会执行，不会再向下查找。</p>\n<p><img data-src=\"https://cloud-img-1301075855.cos.ap-chengdu.myqcloud.com/xin/Vue.use.png\" alt=\"\" /></p>\n<h2 id=\"dom的异步更新\"><a class=\"anchor\" href=\"#dom的异步更新\">#</a> DOM 的异步更新</h2>\n<p>Dom 的更新是一个异步的操作，往往在 DOM 全部获取完成后再进行一次更新。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$ref<span class=\"token punctuation\">.</span>box<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token comment\">//2</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ary<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$ref<span class=\"token punctuation\">.</span>box<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token comment\">//2</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$nextTick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$ref<span class=\"token punctuation\">.</span>box<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token comment\">//1</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$nextTick</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$ref<span class=\"token punctuation\">.</span>box<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 如果不用箭头函数，需要保证 this，就需要这样写，源码中有相应的处理</span></pre></td></tr></table></figure><h3 id=\"nexttick\"><a class=\"anchor\" href=\"#nexttick\">#</a> nextTick</h3>\n<p>它是为了做出一个异步的操作。利用了事件池，把用户传给 nextTick 的回调函数（实际上在回调函数的基础上又套用了一层函数，为了解决报错和 nextTick 执行），让 pending 变成 true，放完之后让 timeFunc 执行，这个函数里面调用了异步函数，优先使用微任务，没有再使用宏任务，在异步函数中执行了 flushCallbacks，让 pending 变为 false，(nextTick 可能会执行很多次，避免开启其它的异步），让事件池中的所有函数挨个执行，并且清空了事件池。</p>\n<p>pending 作用：第一次执行 nextTick 的时候，吊起了异步（要等同步执行完），也就是下面的 nextTick 调用，不会再开始新的异步，只是向事件池中添加事件。</p>\n<h2 id=\"vuex\"><a class=\"anchor\" href=\"#vuex\">#</a> Vuex</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vuex<span class=\"token punctuation\">.</span>Store</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    state<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 放置一些公共的数据</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        count<span class=\"token operator\">:</span><span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    mutations<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 放置一些同步的函数（原则），用来改变数据的方法，这里的方法通过 store.commit (函数名，xxx) 触发，最多两参数，最少一个</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span>option</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+=</span> option</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token function\">minus</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            state<span class=\"token punctuation\">.</span>count<span class=\"token operator\">--</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    action<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 放置一些异步的函数，这里的方法通过 store.dispatch (函数名，xxx) 触发，最多两参数，最少一个</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token function\">asyncAdd</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">store<span class=\"token punctuation\">,</span>option</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token comment\">//store 就是 new 出来的 vuex 实例，</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                store<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'add'</span><span class=\"token punctuation\">,</span>option<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    modules<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\">// 假如说公用的数据太多，全部堆砌在 state 中显得很乱，此时就可以定义模块。</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"vue生命周期\"><a class=\"anchor\" href=\"#vue生命周期\">#</a> Vue 生命周期</h2>\n<p>下图展示了实例的生命周期。你不需要立马弄明白所有的东西，不过随着你的不断学习和使用，它的参考价值会越来越高。&lt;来自官方文档&gt;</p>\n<img data-src=\"https://cloud-img-1301075855.cos.ap-chengdu.myqcloud.com/xin/lifecycle.png\" style=\"zoom: 50%;\" />\n<ul>\n<li>创建（初始化界面前 / 后）\n<ul>\n<li>beforeCreate：data 和 el 都没有初始化，无法获得 data 中的数据， <strong>一般使用在第三方插件中</strong>。</li>\n<li>Created：data 已经初始化，但是 $el 还没有初始化，值为 undefined， <strong>可以访问 data 中的数据</strong> ，一般可以用来做一写 AJAX 请求。</li>\n</ul>\n</li>\n<li>载入（渲染 DOM 前 / 后）\n<ul>\n<li>beforeMount：Vue 实例的 $el 和 data 都初始化了，但还是挂载之前为虚拟 DOM 的节点，data.message 还未替换</li>\n<li>Mounted：Vue 实例挂载完成，可以调用 $el，用  $el 替换 el ，this.$el!=app ，可以获取到真实 DOM 元素 (this.$ref)，echarts、swiper,bmap，data.message 成功渲染</li>\n</ul>\n</li>\n<li>更新（更新数据前 / 后）当能够触发 DOM 更新的数据更改的时候，才会执行这两个函数，不要再更新函数中编写能够触发视图更新的那些操作，会死循环，比如 <span class=\"exturl\" data-url=\"aHR0cDovL3RoaXMubmFtZQ==\">this.name</span> = Math.random()\n<ul>\n<li>beforeUpdate：响应式数据更新时调用，发生在虚拟 DOM 打补丁之前，适合在更新之前访问现有的 DOM，比如手动移除已添加的事件监听器。数据更新了，视图还未更新。</li>\n<li>Updated：虚拟 DOM 重新渲染和打补丁之后调用，组成新的 DOM 已经更新，避免在这个钩子函数中操作数据，防止死循环。数据视图都更新了。</li>\n</ul>\n</li>\n<li>销毁（卸载组件前 / 后）\n<ul>\n<li>beforeDestory：实例销毁前，实例还可以用。</li>\n<li>Destoryed：实例销毁后，所有事件监听器会被移除，切断了数据的双向绑定。</li>\n</ul>\n</li>\n</ul>\n<p>对 data 的改变不会再触发周期函数，说明此时 Vue 实例已经解除了事件监听以及和 DOM 的绑定，但是 DOM 结构依然存在。$destory 只是切断了数据层跟视图层的关系，一般用来清除定时器或者原生事件绑定。</p>\n<h3 id=\"vue-父子组件的生命周期顺序同步\"><a class=\"anchor\" href=\"#vue-父子组件的生命周期顺序同步\">#</a> vue 父子组件的生命周期顺序（同步）</h3>\n<p><strong>加载渲染过程</strong></p>\n<p>父 beforeCreate-&gt; 父 created-&gt; 父 beforeMount-&gt; 子 beforeCreate-&gt; 子 created-&gt; 子 beforeMount-&gt; 子 mounted-&gt; 父 mounted</p>\n<p><strong>子组件更新过程</strong></p>\n<p>父 beforeUpdate-&gt; 子 beforeUpdate-&gt; 子 updated-&gt; 父 updated</p>\n<p><strong>父组件更新过程</strong></p>\n<p>父 beforeUpdate-&gt; 父 updated</p>\n<p><strong>销毁过程</strong></p>\n<p>父 beforeDestroy-&gt; 子 beforeDestroy-&gt; 子 destroyed-&gt; 父 destroyed</p>\n<p><strong>异步引入时生命周期顺序：</strong></p>\n<p>父组件的 beforeCreate、created、beforeMount、mounted --&gt; 子组件的 beforeCreate、created、beforeMount、mounted</p>\n<h1 id=\"vue30\"><a class=\"anchor\" href=\"#vue30\">#</a> Vue3.0</h1>\n<ol>\n<li>\n<p>2.x 使用构造函数 <strong>new Vue(...)</strong> 创建实例，3.x 使用 <strong>createApp</strong> 函数创建实例。</p>\n</li>\n<li>\n<p>2.x 所有属性方法和设置都绑定在 <strong>全局 Vue 对象</strong> ，3.x 改为绑定在创建的 <strong>Vue</strong> 实例下。</p>\n</li>\n<li>\n<p>2.x 所有的数据都在 <strong>data</strong> 中定义返回，方法在 <strong>methods</strong> 中，并且可以通过 <strong>this</strong> 调用，3.x 是组合式 API，所有的逻辑代码在 <strong>setup</strong> 中实现，并且 <strong>没有 this</strong> ，setup 方法在生命周期内只执行一次。</p>\n<ul>\n<li>为什么需要使用组合 API：在 2.x 中，碎片化使得理解和维护复杂组件变得困难，选项分离掩盖了潜在的逻辑问题，在处理逻辑的时候需要不断地跳转相关代码选项块。</li>\n</ul>\n</li>\n<li>\n<p>3.x 通过一个新的 <strong>ref</strong> 函数使任何响应式变量在任何地方起作用，它为我们创建了一个响应式引用。</p>\n</li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> ref <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> counter <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">)</span> <span class=\"token comment\">// &#123; value: 0 &#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>counter<span class=\"token punctuation\">.</span>value<span class=\"token operator\">++</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>3.x 和 2.x 的 watch 一样，支持 immediate 和 deep 选项，但 3.x 不再支持 obj.key1.key2 的 &quot;点分隔&quot; 写法，3.x 中 watch 支持监听单个属性，也支持监听多个属性，相比 2.x 的 watch 更灵活。</li>\n<li>2.x 中，vue template 只允许有一个根节点，3.x 中，vue template 支持多个根节点。</li>\n<li>为了允许将一些 UI 片段移动到页面中的其他位置，在 Vue3 中添加了一个新的 <strong>teleport</strong> 组件，并且该组件销毁时自动清空相应的 dom，不用人工处理。</li>\n</ol>\n<h1 id=\"vue-react\"><a class=\"anchor\" href=\"#vue-react\">#</a> Vue | React</h1>\n<p>我在搭建项目的时候打算采用 Vue 框架，是因为它的官方文档写的很详细，上手快，建议大家学习的时候多看看官方文档。最后一个 part，就来聊聊和其他框架的对比吧。</p>\n<h2 id=\"react\"><a class=\"anchor\" href=\"#react\">#</a> React</h2>\n<p>这个框架大家应该都不陌生，它有着丰富的生态系统，后期我也打算去接触一下这个框架。</p>\n<p>它跟 Vue 有许多相似之处：</p>\n<ul>\n<li>\n<p>提供了虚拟 DOM</p>\n</li>\n<li>\n<p>提供了响应式和组件化的视图插件</p>\n</li>\n<li>\n<p>注意力集中保持在核心库，将路由和全局管理等交给相关的库</p>\n</li>\n<li>\n<p>运行性能都非常快，都提供了强大路由来应对大型应用</p>\n</li>\n</ul>\n<h2 id=\"区别-2\"><a class=\"anchor\" href=\"#区别-2\">#</a> 区别</h2>\n<ul>\n<li>\n<p>React 的某个组件状态发生变化时，它会以该组件为根，重新渲染整个组件子树，会有不必要的子组件重渲染，你需要采用手动实现 shouldComponentUpdate 等方式去避免这个问题。使用该方法还需注意，组件的整个子树的渲染输出都是由该组件的 props 所决定的，如果不符合这个情况可能会出现渲染结果与预期不一致的问题。</p>\n<p>Vue 组件的依赖是在渲染过程中自动追踪的，所以系统可以精确地知道哪个组件需要被重新渲染。</p>\n</li>\n<li>\n<p>在 React 中一切都是 Javascript，HTML、CSS 都可以用 Javascript 来处理。所有组件的渲染功能都依靠 JSX（XML 语法编写）。可以理解为 React 偏逻辑。</p>\n<p>Vue 其实也有渲染函数并且支持 JSX，但默认推荐的还是模板，它是合乎 HTML 规范的，对习惯了 HTML 模板的开发者来说，看起来更加自然，将应用迁移到 Vue 更容易。可以理解为 Vue 偏视图。</p>\n</li>\n<li>\n<p>CSS 作用域在 React 中是通过 CSS-in-JS 实现的。Vue 设置样式的默认方法是单文件组件里类似 Style 的标签，可以让你在同一个文件中完全控制 CSS，将其作为组件代码的一部分。</p>\n</li>\n<li>\n<p>React 的路由库和状态管理库是由社区维护的，Vue 是由官方维护的。</p>\n</li>\n</ul>\n",
            "tags": [
                "Vue",
                "框架",
                "Vue底层原理"
            ]
        },
        {
            "id": "https://xqlove.xyz/axios/",
            "url": "https://xqlove.xyz/axios/",
            "title": "axios",
            "date_published": "2021-03-08T14:22:26.000Z",
            "content_html": "<h1 id=\"axios基础与应用\"><a class=\"anchor\" href=\"#axios基础与应用\">#</a> axios 基础与应用</h1>\n<h2 id=\"什么是axios\"><a class=\"anchor\" href=\"#什么是axios\">#</a> 什么是 axios?</h2>\n<p>Axios 是一个基于 promise 封装的的 ajax 库，核心是 XMLHttpRequests，可以用在浏览器和 node.js 中。</p>\n<p>基于 axios 发送的请求，最后返回的都是 promise 实例。</p>\n<p>相关的 API 可以查阅 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvYXhpb3M=\">axios 官方文档</span></p>\n<h2 id=\"特性\"><a class=\"anchor\" href=\"#特性\">#</a> 特性</h2>\n<ul>\n<li>从浏览器中创建 XMLHttpRequests</li>\n<li>从 node.js 创建 http 请求</li>\n<li>支持 PromiseAPI</li>\n<li>拦截请求和响应</li>\n<li>转换请求数据和响应数据</li>\n<li>取消请求</li>\n<li>自动转换 JSON 数据</li>\n<li>客户端支持防御 XSRF</li>\n</ul>\n<h2 id=\"基础语法\"><a class=\"anchor\" href=\"#基础语法\">#</a> 基础语法</h2>\n<ul>\n<li>CancelToken：用于取消 ajax 请求</li>\n<li>axios.all (iterable)：实现 ajax 并行，当所有的 ajax 请求都成功，整体才会返回一个 promise 实例</li>\n<li>spread：解析出基于 all 返回的结果</li>\n<li>axios.create ([config])：使用自定义配置创建一个新的 axios 实例 ，来做单独的全局配置</li>\n<li>defaults：全局默认配置</li>\n<li>get/delete//head/options ：发送对应方式的请求</li>\n<li>post/put/patch：发送对应方式的请求</li>\n<li>request：发送请求</li>\n<li>interceptors\n<ul>\n<li>request：请求拦截器</li>\n<li>response：响应拦截器</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">//baseURL+url: 最终的请求地址</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    baseURL<span class=\"token operator\">:</span><span class=\"token string\">\"http://127.0.0.1:4000\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    url<span class=\"token operator\">:</span><span class=\"token string\">'use/list'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    method<span class=\"token operator\">:</span><span class=\"token string\">\"post\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">//params: 基于 URL 末尾拼接参数的方式，把 params 对象一项项传递给服务器</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    params<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        lx<span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">from</span><span class=\"token operator\">:</span><span class=\"token string\">'xxx'</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      内部有的方法，params 对象最后可以拼接到 URL 的末尾，内部就是基于这个方法处理的</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      paramsSerializer: function (params) &#123;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        return Qs.stringify (params, &#123;</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            arrayFormat: 'brackets'</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        &#125;);</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    &#125;,</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    */</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">//data: 只针对 post 系列请求，设置请求主体传递的信息，默认会把对象变为 application/json 字符串传递给服务器，data 直接支持 formData\\binary (二进制)\\raw (字符串)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    data<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        file<span class=\"token operator\">:</span><span class=\"token string\">\"xxx\"</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        size<span class=\"token operator\">:</span><span class=\"token number\">1024</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">// 在 post 请求下，把请求主体信息发送给服务器之前，对请求主体信息进行处理，把 data 数据返回成自己想要的格式</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token function-variable function\">transformRequest</span><span class=\"token operator\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token constant\">QS</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    header<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token comment\">// 所有请求头通用</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token string\">'Content-Type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'multipart/form-data'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        common<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token string\">'X-Token'</span><span class=\"token operator\">:</span><span class=\"token string\">'xxx'</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token comment\">// 可以值只针对某种请求设置</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        post<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token string\">'lx'</span> <span class=\"token operator\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        get<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token string\">'lx'</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    withCredentials <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    timeout <span class=\"token operator\">=</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token comment\">// 预设服务器返回的数据格式：不论服务器返回什么格式，内部会转换为我们预设的格式 json/document/text...</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    responseType<span class=\"token operator\">:</span><span class=\"token string\">\"json\"</span>，</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token comment\">// 内部规定，HTTP 状态码为多少算是请求成功，返回成功 Promise，否则返回失败的</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token function-variable function\">vaildateStatus</span><span class=\"token operator\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">status</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>      <span class=\"token keyword\">return</span> status<span class=\"token operator\">>=</span><span class=\"token number\">200</span> <span class=\"token operator\">&amp;&amp;</span> status<span class=\"token operator\">&lt;</span><span class=\"token number\">300</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"请求成功和失败的情况\"><a class=\"anchor\" href=\"#请求成功和失败的情况\">#</a> 请求成功和失败的情况</h3>\n<ol>\n<li>网络层失败（请求没有发送成功，或者没有任何的响应 [没有完成一个 HTTP 事物]）</li>\n<li>axios 层失败\n<ul>\n<li>服务器不一定有返回</li>\n<li>状态码和 vaildateStatus 不一致</li>\n<li>超时或取消请求</li>\n</ul>\n</li>\n<li>业务层失败\n<ul>\n<li>一般都是服务器根据业务需求，基于类似于 code 等标志，来区分不同的业务形态和结果</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"发送请求后返回的信息\"><a class=\"anchor\" href=\"#发送请求后返回的信息\">#</a> 发送请求后返回的信息</h3>\n<h4 id=\"请求成功后\"><a class=\"anchor\" href=\"#请求成功后\">#</a> 请求成功后</h4>\n<p>服务器返回的状态码和 vaildateStatus 指定的匹配条件一致（READY-STATE===4）</p>\n<ul>\n<li>config：设定的配置项</li>\n<li>headers：响应头信息 [对象]</li>\n<li>requset：原生的 XHR 对象</li>\n<li>status/statusText 状态码和状态码的描述</li>\n<li>data：响应主体信息</li>\n</ul>\n<h4 id=\"请求失败后\"><a class=\"anchor\" href=\"#请求失败后\">#</a> 请求失败后</h4>\n<p>服务器返回的状态码不予 vaildateStatus 条件一致 [服务器有返回]</p>\n<p>服务器没有返回</p>\n<p>请求超时或取消</p>\n<ul>\n<li>config</li>\n<li>request</li>\n<li>toJSON</li>\n<li>message：错误信息</li>\n<li>response：如果是网络层失败，是没有 response，如果只是 axios 层失败，是存在 response</li>\n<li>isAxiosError：是否为 axios 层面失败</li>\n</ul>\n<h2 id=\"配置默认值\"><a class=\"anchor\" href=\"#配置默认值\">#</a> 配置默认值</h2>\n<ul>\n<li>\n<p>axios.defaults.baseURL 设置 axios 的默认请求地址</p>\n</li>\n<li>\n<p>axios.defaults.timeout 设置默认的请求超时时间</p>\n</li>\n<li>\n<p>设置 post 请求头</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>axios<span class=\"token punctuation\">.</span>defaults<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">[</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'application/x-www-form-urlencoded;charset=UTF-8'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"axios的二次封装\"><a class=\"anchor\" href=\"#axios的二次封装\">#</a> axios 的二次封装</h2>\n<p>在项目中，我们往往会把所有请求的公共部分进行统一处理</p>\n<ul>\n<li>axios.defaults：设置公共的配置项</li>\n<li>axios.interceptors：基于拦截器做统一处理</li>\n</ul>\n<p>一般我们会封装一个 axios.js、api.js 用来统一管理接口。</p>\n<p>** 为什么要进行接口管理：**api 接口管理的一个好处就是，我们把 api 统一集中起来，如果后期需要修改接口，我们就直接在 api.js 中找到对应的修改就好了，而不用去每一个页面查找我们的接口然后再修改会很麻烦。</p>\n<p>** 配置的优先级：** 业务层发送请求时候传递的配置项 &gt; 用户基于 axios。defaults 设置的公共配置项 &gt; axios 的内部配置</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   配置请求接口的统一前缀 [webpack 环境，我们根据环境变量的值，设置不同的前缀来区分不同的环境]</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   - 开发环境 development</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   - 测试环境 test</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   - 灰度    grayscale (灰度服务器，为了保证新版本能够稳定访问，我们可以先让一少部分人访问新版本，其他的人访问稳定的旧版本，在新版本稳定之后，我们再增加新版本访问人数)</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   - 生产    production</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">const</span> env <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">||</span> <span class=\"token string\">'development'</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">case</span> <span class=\"token string\">'development'</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        axios<span class=\"token punctuation\">.</span>defaults<span class=\"token punctuation\">.</span>baseURL <span class=\"token operator\">=</span> <span class=\"token string\">\"http://127.0.0.1:8000\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">case</span> <span class=\"token string\">'test'</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        axios<span class=\"token punctuation\">.</span>defaults<span class=\"token punctuation\">.</span>baseURL <span class=\"token operator\">=</span> <span class=\"token string\">\"http://127.168.0.2:8000\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">case</span> <span class=\"token string\">'production'</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        axios<span class=\"token punctuation\">.</span>defaults<span class=\"token punctuation\">.</span>baseURL <span class=\"token operator\">=</span> <span class=\"token string\">\"http://127.168.0.1:8000\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>axios<span class=\"token punctuation\">.</span>defaults<span class=\"token punctuation\">.</span>baseURL <span class=\"token operator\">=</span> <span class=\"token string\">\"http://127.0.0.1:8000\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>axios<span class=\"token punctuation\">.</span>defaults<span class=\"token punctuation\">.</span>timeout <span class=\"token operator\">=</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>axios<span class=\"token punctuation\">.</span>defaults<span class=\"token punctuation\">.</span>withCredentials <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">// 配置公共的自定义请求头信息 headers ['common']/headers ['post/get...']/headers</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>axios<span class=\"token punctuation\">.</span>defaults<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">[</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"application/x-www-form-urlenconded\"</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">//post 系列请求对于请求主体信息的统一格式化</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>axios<span class=\"token punctuation\">.</span>defaults<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">transformRequest</span> <span class=\"token operator\">=</span>  <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token punctuation\">,</span>headers</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>data <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">typeof</span> data <span class=\"token operator\">!==</span> <span class=\"token string\">\"object\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">let</span> contentType <span class=\"token operator\">=</span> headers<span class=\"token punctuation\">[</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> headers<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">[</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>contentType<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token string\">'urlencoded'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> Qs<span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>     <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>contentType<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token string\">'json'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> Json<span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">return</span> data</pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\">// 设置响应状态码的校验处理 (规定服务器返回的状态码那些算是请求成功的，哪些算失败的)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>axios<span class=\"token punctuation\">.</span>defaults<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">vaildateStatus</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">status</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">return</span> status <span class=\"token operator\">>=</span> <span class=\"token number\">200</span> <span class=\"token operator\">&amp;&amp;</span> status <span class=\"token operator\">&lt;</span> <span class=\"token number\">400</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> axios<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>如果配置了公共的地址，需要向另外的地址发送数据，可以在对象中配置 baseURL</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/user/list'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/use/hello'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    baseURL<span class=\"token operator\">:</span><span class=\"token string\">\"http://127.0.0.1:8888\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">respomse</span> <span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"拦截器\"><a class=\"anchor\" href=\"#拦截器\">#</a> 拦截器</h2>\n<p>在请求或者响应被  <code>then</code>  或  <code>catch</code>  处理前拦截它们。</p>\n<p>可以为自定义 axios 实例添加拦截器：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> instance <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>instance<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">/*...*/</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>如果想在稍后移除拦截器可以这样：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> myInterceptor <span class=\"token operator\">=</span> _axios<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">/*...*/</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>axios<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">eject</span><span class=\"token punctuation\">(</span>myInterceptor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"请求拦截\"><a class=\"anchor\" href=\"#请求拦截\">#</a> 请求拦截</h3>\n<p>当所有配置处理完，在向服务器发送请求之前，我们拦截到现有的配置，再去做统一的修改。</p>\n<h4 id=\"为什么要进行请求拦截\"><a class=\"anchor\" href=\"#为什么要进行请求拦截\">#</a> 为什么要进行请求拦截</h4>\n<p>因为有些请求是需要用户登录之后才能访问的，或者 post 请求的时候，我们需要序列化我们提交的数据。这时候，我们可以在请求被发送之前进行一个拦截。</p>\n<p>在发送请求之前做什么，一般用来写一些所有接口公用的方法。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>_axios<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// Do something before request is sent</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> config<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// Do something with request error</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"响应拦截\"><a class=\"anchor\" href=\"#响应拦截\">#</a> 响应拦截</h3>\n<p>当前请求有结果之后，我们在业务层自己调用 then/catch 方法之间拦截一下，这样可以做一些成功或者失败的统一提示处理等...</p>\n<h4 id=\"为什么要进行响应拦截\"><a class=\"anchor\" href=\"#为什么要进行响应拦截\">#</a> 为什么要进行响应拦截</h4>\n<p>并不是每一次请求都会成功。那么当每次接口请求失败的时候都去处理会很麻烦，所以我们一般通过封装 axios 进行错误的统一处理。比如未登录，提示错误，跳转登录页面；未注册，提示，跳转注册页面等。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>_axios<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">function</span> <span class=\"token function\">onfultilled</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// Do something with response data</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">function</span> <span class=\"token function\">onrejected</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">reason</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// Do something with response error</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>reason<span class=\"token punctuation\">)</span><span class=\"token comment\">// 保证到业务层还是失败的；</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>对业务层的一些处理：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handle</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">let</span> code <span class=\"token operator\">=</span> <span class=\"token operator\">+</span>data<span class=\"token punctuation\">.</span>code<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>code <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 业务层失败：也可以做一些统一提示或者处理</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>codeText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">requestGET</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">requestGET</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">url<span class=\"token punctuation\">,</span>options</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span>option<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>handle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">requestPOST</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">requestPOST</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">url<span class=\"token punctuation\">,</span>data<span class=\"token punctuation\">,</span>options</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span>data<span class=\"token punctuation\">,</span>options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>handle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    requestGET<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    requextPOST</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"ajax\"><a class=\"anchor\" href=\"#ajax\">#</a> ajax</h2>\n<p>async javascript and xml，基于 XMLHttpRequest 创建 HTTP 请求。</p>\n<ul>\n<li>\n<p>创建一个 xhr 实例</p>\n</li>\n<li>\n<p>打开一个 URL 地址 [发送请求前的一些配置信息]</p>\n<ul>\n<li>method：请求方式（get post put delete...)</li>\n<li>url：请求的 URL 地址</li>\n<li>async：是否采用异步（默认是 true）</li>\n</ul>\n</li>\n<li>\n<p>监听请求的过程，在不同的阶段做不同的处理</p>\n<ul>\n<li>ajax 的状态 xhr.onreadystate (0,1,2,3,4)\n<ul>\n<li>0：unsent</li>\n</ul>\n</li>\n<li>1：open\n<ul>\n<li>2：headers_received（响应头信息已经返回）</li>\n<li>3：loading（响应主体信息正在处理）</li>\n<li>4：done（响应主体信息已经返回）</li>\n</ul>\n</li>\n<li>http 状态码 xhr.status/xhr.statusText</li>\n</ul>\n</li>\n<li>\n<p>获取响应主体信息（xhr.response  xhr.responseText  xhr.responseXML）</p>\n</li>\n<li>\n<p>获取响应头信息（xhr.getResponseHeader/xhr.getAllRequestHeaders）</p>\n</li>\n<li>\n<p>发送请求 [send 中传递的信息，就是设置的请求主体信息]</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> xhr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>xhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'get'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'./1.json'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 设置跨域凭证、超时时间、设置请求头信息需在 open 之后</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>xhr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onreadystatechange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>status <span class=\"token operator\">!==</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>readyState <span class=\"token operator\">===</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>xhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"fetch\"><a class=\"anchor\" href=\"#fetch\">#</a> fetch</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQVBJL0ZldGNoX0FQSS9Vc2luZ19GZXRjaA==\">fetch 的使用</span></p>\n<h2 id=\"ajaxaxiosfetch区别\"><a class=\"anchor\" href=\"#ajaxaxiosfetch区别\">#</a> ajax|axios|fetch 区别</h2>\n<ul>\n<li>\n<p>XMLHttpRequest [ajax 请求]</p>\n<ul>\n<li>$ajax：JQ 库中基于回调函数封装的 ajax 库</li>\n<li>axios：基于 promise 管理 ajax 请求 [对 ajax 库的封装]</li>\n</ul>\n</li>\n<li>\n<p>fetch：基于一种新的通信方案完成客户端和服务器端的数据交互，不是 XMLHttpRequest</p>\n<ul>\n<li>ES6 内置类</li>\n<li>基于 promise 处理异步</li>\n</ul>\n</li>\n</ul>\n<p>在 mdn 文档中也讲到了：</p>\n<ul>\n<li>fetch 对于状态码错误，Promise 状态仍被标记为 resolve (但是会把 resolve 返回值 OK 变为 false)，而不是 reject，只有当网络故障的时候，Promise 状态才会被标记为 reject。</li>\n<li>fetch 不会发送 cookie，除非设置<em> credentials</em>。</li>\n<li>可以接收跨域的 cookies，可以创建跨域。</li>\n</ul>\n<h2 id=\"onerror-onreadystatechange区别\"><a class=\"anchor\" href=\"#onerror-onreadystatechange区别\">#</a> onerror、onreadystatechange 区别</h2>\n<ul>\n<li>onload：信息返回，但 http 状态码不一定是 200</li>\n<li>onerror：信息没有返回，可能是断网错误</li>\n<li>onreadystatechange：信息返回，可以自行对响应主体做一些处理</li>\n</ul>\n<h2 id=\"xhr有哪些方法\"><a class=\"anchor\" href=\"#xhr有哪些方法\">#</a> xhr 有哪些方法</h2>\n<ul>\n<li>open</li>\n<li>send</li>\n<li>onabort：中断请求</li>\n<li>status  /  statusText</li>\n<li>setRequestHeader</li>\n<li>getResponseHeader  /  getAllRequestHeaders</li>\n<li>response  /  responseText  /  responseXML</li>\n</ul>\n<h2 id=\"get和post的区别\"><a class=\"anchor\" href=\"#get和post的区别\">#</a> get 和 post 的区别</h2>\n<p>get 和 post 在官方定义中是没有明确的区别的，但是浏览器或者开发的时候，都有一套约定俗成的规范：</p>\n<ul>\n<li>\n<p>get 请求传递给服务器的信息，除了请求头传递以外，要求基于 URL 问号传参传递给服务器</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>xhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'./1.json?lx=1&amp;name=xxx'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>post 请求要求传递给服务器的信息，是基于 URL 问号传参传递给服务器</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>xhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'lx=1&amp;name=xxx'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ul>\n<ol>\n<li>get 传递的信息不如 post 多，因为 URL 有长度限制 [IE-&gt;2KB]，超过这个长度的信息会被自动截掉，这样导致传递内容过多，最后服务器收到的信息是不完整的，post 理论上是没有限制的，但是传递的东西越多，速度越慢，可能导致浏览器报传输超时的错误，所以实际上我们会手动限制。</li>\n<li>get 会产生缓存 [浏览器默认产生的，不可控的缓存]：两次及以上，请求相同的 API 接口，并且传递的参数也一样，浏览器可能会把第一次请求的信息直接返回，而不是从服务器获取最新的信息。</li>\n<li>post 相对于 get 来说更安全一些：get 传递的参数是基于 URL 末尾拼接，劫持可以直接修改，而 post 请求主体信息的劫持比较困难。但不管什么方式，只要涉及安全信息都需要手动加密。</li>\n</ol>\n<h3 id=\"基于请求主体传递给服务器的数据格式\"><a class=\"anchor\" href=\"#基于请求主体传递给服务器的数据格式\">#</a> 基于请求主体传递给服务器的数据格式</h3>\n<ol>\n<li>form-data：主要应用于文件的上传或者表单数据提交</li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>xhr<span class=\"token punctuation\">.</span><span class=\"token function\">setRequestHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ContentType'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'multipart/form-data'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> fd <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FromData</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>fd<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'lx'</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>fd<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'xxx'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>xhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>x-www-form-urlencoded 格式的字符串</li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   格式:\"lx=1&amp;name=xxx\"[常用]</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   Qs 库：npm i QS</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   Qs.stringify/parse: 实现对象和 urlencoded 格式字符串之间的转换</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   xhr.setRequestHeader ('Content-Type','application/x-www-form-urlencoded')</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   xhr.send ( Qs.stringify (&#123;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>       lx:0,</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>       name:'xxx'</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   &#125;))</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>*/</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>\n<p>raw 字符串格式</p>\n<ul>\n<li>普通字符串        -&gt;text/plain</li>\n<li>JSON 字符串       -&gt; application/json  =&gt;  JSON.stringify/parse [常用]</li>\n<li>XML 格式字符串 -&gt;application/xml</li>\n</ul>\n</li>\n<li>\n<p>binray 进制数据文件 [buffer / 二进制...]（一般也用于文件上传）</p>\n<ul>\n<li>图片 -&gt; image/ipeg</li>\n<li>EXCEL -&gt; application/vnd.openxmlformats-officedocument.spreadsheetml.sheet</li>\n<li>...</li>\n</ul>\n</li>\n</ol>\n",
            "tags": [
                "数据请求",
                "数据传输",
                "axios"
            ]
        },
        {
            "id": "https://xqlove.xyz/TCP%E9%95%BF%E8%BF%9E%E6%8E%A5-%E7%9F%AD%E8%BF%9E%E6%8E%A5%E6%98%AF%E6%80%8E%E4%B9%88%E4%B8%80%E5%9B%9E%E4%BA%8B%EF%BC%9F/",
            "url": "https://xqlove.xyz/TCP%E9%95%BF%E8%BF%9E%E6%8E%A5-%E7%9F%AD%E8%BF%9E%E6%8E%A5%E6%98%AF%E6%80%8E%E4%B9%88%E4%B8%80%E5%9B%9E%E4%BA%8B%EF%BC%9F/",
            "title": "TCP长连接/短连接是怎么一回事？",
            "date_published": "2021-01-31T04:24:18.000Z",
            "content_html": "<h1 id=\"tcp连接\"><a class=\"anchor\" href=\"#tcp连接\">#</a> TCP 连接</h1>\n<p>使用 TCP 协议时，会在客户端和服务器之间建立一条虚拟的信道，这条虚拟信道就是指连接。我们都知道建立连接需要三次握手，断开连接需要四次挥手。</p>\n<p>建立连接是需要时间成本、CPU 资源成本、每个 Socket 是需要消耗系统缓存的。</p>\n<p>TCP 是可靠的传输，所以大量应用程序是使用 TCP 协议作为通信的。</p>\n<h2 id=\"tcp的长连接\"><a class=\"anchor\" href=\"#tcp的长连接\">#</a> TCP 的长连接</h2>\n<p>TCP 与服务器建立连接之后一直处于连接状态，直到最后不再需要服务的时候才断开连接</p>\n<p><strong>优点</strong></p>\n<ul>\n<li>传输数据快</li>\n<li>服务器能够主动第一时间传输数据到客户端</li>\n</ul>\n<p><strong>缺点</strong></p>\n<ul>\n<li>因为客户端与服务器一直保持这种连接，那么在高并发分布式集群系统中客户端数量会越来越多，占用很多的系统资源。</li>\n<li>TCP 本身是一种有状态的数据，在高并发分布式系统会导致后台设计比较难做。</li>\n</ul>\n<h3 id=\"为什么需要长连接\"><a class=\"anchor\" href=\"#为什么需要长连接\">#</a> 为什么需要长连接？</h3>\n<ul>\n<li>服务器端想要主动的给客户端发送消息</li>\n<li>客户端和服务器端需要频繁的通信：如果是短连接在处理一些高并发的场景，会出现大量 TIME_WAIT 状态，导致资源的浪费。</li>\n<li>业务需要，比如客户端掉线时服务器需要做一些处理：比如清空他的缓存或者其它资源或者其它业务含义，比如 QQ 头像显示离线。</li>\n</ul>\n<h2 id=\"tcp的短连接\"><a class=\"anchor\" href=\"#tcp的短连接\">#</a> TCP 的短连接</h2>\n<p>客户端与服务器建立连接开始通信，一次 / 指定次数通信结束之后就断开本次 TCP 连接，当下次再次通信时，再次建立 TCP 的链接。</p>\n<p><strong>优点</strong></p>\n<ul>\n<li>不长期占用服务器的内存，那么服务器能处理的连接数量是比较多的</li>\n</ul>\n<p><strong>缺点</strong></p>\n<ul>\n<li>\n<p>服务器端无法主动向客户端发送消息</p>\n</li>\n<li>\n<p>客户端采用轮询来实时获取信息，或者说大量的客户端使用短连接的方式通信，那么就<strong>浪费了大量的 CPU 和带宽资源用于建立连 接和释放连接，存在资源浪费，甚至是无法建立连接</strong>。比如经典的 http 长轮询</p>\n</li>\n</ul>\n<h2 id=\"tcp的keepalive机制\"><a class=\"anchor\" href=\"#tcp的keepalive机制\">#</a> TCP 的 keepalive 机制</h2>\n<h3 id=\"基本原理\"><a class=\"anchor\" href=\"#基本原理\">#</a> 基本原理</h3>\n<p>探测方会在自己一端设计一个计时器，当计时器被触发之后，向对方发送一个探测报文。如果对端给自己回送一个 ACK，那么就代表对方仍存活；如果在指定的时间内没有给自己回送 ACK，那么就确认对方已经断开连接，从而断开本次 TCP 连接。</p>\n<p><strong>这种机制是为了让客户端和服务器了解什么时候终止进程或者与对方断开连接</strong></p>\n<p>HTTP1.1 和 HTTP1.0 相比较而言，最大的区别就是增加了持久连接支持。</p>\n<p>如果浏览器或者服务器在其头信息加入了这行代码：<em>Connection:keep-alive</em>，TCP 连接在发送后将仍然保持打开状态，于是，浏览器可以继续通过相同的连接发送请求。保持连接节省了为每个请求建立新连接所需的时间，还节约了带宽。</p>\n",
            "tags": [
                "网络",
                "网络",
                "TCP"
            ]
        },
        {
            "id": "https://xqlove.xyz/%E4%B8%80%E8%B5%B7%E8%81%8A%E8%81%8A%E5%BC%BA%E7%BC%93%E5%AD%98%E5%92%8C%E5%8D%8F%E5%95%86%E7%BC%93%E5%AD%98/",
            "url": "https://xqlove.xyz/%E4%B8%80%E8%B5%B7%E8%81%8A%E8%81%8A%E5%BC%BA%E7%BC%93%E5%AD%98%E5%92%8C%E5%8D%8F%E5%95%86%E7%BC%93%E5%AD%98/",
            "title": "一起聊聊强缓存和协商缓存",
            "date_published": "2021-01-31T03:08:47.000Z",
            "content_html": "<h1 id=\"什么是web缓存\"><a class=\"anchor\" href=\"#什么是web缓存\">#</a> 什么是 Web 缓存</h1>\n<p>Web 缓存是可以自动保存常见文档副本的 HTTP 设备。当 Web 请求抵达缓存时， 如果本地有 “已缓存的” 副本，就可以从本地存储设备而不是原始服务器中提取这个文档。（此结论来自 http 权威指南）</p>\n<p><strong>优点</strong></p>\n<ol>\n<li>减少了冗余的数据传输，节省网络费用</li>\n<li>缓解地网络瓶颈，不需要更多的带宽就可以更快加载页面</li>\n<li>降低对原始服务器的要求，服务器可以更快地响应，避免过载的出现</li>\n</ol>\n<p><strong>缺点</strong></p>\n<ol>\n<li>缓存中的数据可能与服务器的数据不一致</li>\n<li>消耗内存</li>\n</ol>\n<p><strong>缓存可分为强缓存（也叫本地缓存）和协商缓存</strong></p>\n<h2 id=\"基本原理\"><a class=\"anchor\" href=\"#基本原理\">#</a> 基本原理</h2>\n<p>浏览器第一次请求的过程大致如图所示：</p>\n<p><img data-src=\"https://cloud-img-1301075855.cos.ap-chengdu.myqcloud.com/xin/Snipaste_2021-01-31_11-20-58.png\" alt=\"\" /></p>\n<p>浏览器后续在请求时的过程如图所示：</p>\n<p><img data-src=\"https://cloud-img-1301075855.cos.ap-chengdu.myqcloud.com/xin/Snipaste_2021-01-31_11-21-17.png\" alt=\"\" /></p>\n<ul>\n<li>浏览器在加载资源时，根据请求头的  <code>expires</code>  和  <code>cache-control</code>  判断是否命中强缓存，是则直接从缓存读取资源，不会发请求到服务器。</li>\n<li>如果没有命中强缓存，浏览器一定会发送一个请求到服务器，通过  <code>last-modified</code>  和  <code>etag</code>  验证资源是否命中协商缓存，如果命中，服务器会将这个请求返回，但是不会返回这个资源的数据，依然是从缓存中读取资源。</li>\n<li>如果前面两者都没有命中，直接从服务器加载资源</li>\n</ul>\n<h2 id=\"两者异同点\"><a class=\"anchor\" href=\"#两者异同点\">#</a> 两者异同点</h2>\n<p>如果命中，都是从客户端缓存中加载资源，而不是从服务器加载资源数据。</p>\n<p>强缓存不发请求到服务器，状态码是 200；协商缓存会发请求到服务器，状态码是 304。</p>\n<h2 id=\"强缓存和协商缓存的header参数\"><a class=\"anchor\" href=\"#强缓存和协商缓存的header参数\">#</a> 强缓存和协商缓存的 header 参数</h2>\n<h3 id=\"强缓存\"><a class=\"anchor\" href=\"#强缓存\">#</a> 强缓存</h3>\n<p>强缓存通过  <code>Expires</code>  和  <code>Cache-Control</code>  两种响应头实现。</p>\n<h4 id=\"expires\"><a class=\"anchor\" href=\"#expires\">#</a> Expires</h4>\n<p>Expires 是 http1.0 提出的一个表示资源过期时间的 header，它的值为一个绝对时间的 GMT 格式的时间字符串，由服务器返回，若请求时间在此之前则本地缓存有效，否则就会发送请求到服务器获取资源。但它受限于本地时间，如果修改了本地时间，可能会造成缓存失效。</p>\n<pre><code>Expires: Wed, 11 May 2018 07:20:00 GMT\n</code></pre>\n<h4 id=\"cache-control\"><a class=\"anchor\" href=\"#cache-control\">#</a> Cache-Control</h4>\n<p>Cache-Control 出现于 HTTP / 1.1，优先级高于 Expires , 表示的是相对时间</p>\n<pre><code>Cache-Control: max-age=300\n</code></pre>\n<p>当值设为 max-age=300 时，则代表在这个请求正确返回时间（浏览器也会记录下来）的 5 分钟内再次加载资源，就会命中强缓存。</p>\n<p><code>max-age</code>   用来设置资源（representations）可以被缓存多长时间，单位为秒</p>\n<p><code>no-cache</code>  强制客户端直接向服务器发送请求，也就是说每次请求都必须向服务器发送，服务器接收到请求，然后判断资源是否变更，是则返回新内容，否则返回 304，未变更。这个很容易让人产生误解，使人误以为是响应不被缓存。实际上  <code>no-cache</code>  是会被缓存的，只不过每次在向客户端（浏览器）提供响应数据时，缓存都要向服务器评估缓存响应的有效性。</p>\n<p><code> no-store</code>  真正的不缓存数据到本地</p>\n<p><code>public </code>  可以被所有用户缓存（多用户共享），包括终端和 CDN 等中间代理服务器</p>\n<p><code>private</code>  只能被终端浏览器缓存（而且是私有缓存），不允许中继缓存服务器进行缓存</p>\n<h3 id=\"协商缓存\"><a class=\"anchor\" href=\"#协商缓存\">#</a> 协商缓存</h3>\n<p>协商缓存是利用的是  <code>[Last-Modified，If-Modified-Since]</code>  和  <code>[ETag、If-None-Match]</code>  这两对 Header 来管理的</p>\n<h4 id=\"last-modifiedif-modified-since\"><a class=\"anchor\" href=\"#last-modifiedif-modified-since\">#</a> Last-Modified，If-Modified-Since</h4>\n<p><code>Last-Modified</code>   表示本地文件最后修改日期，浏览器会在 request header 加上  <code>If-Modified-Since</code>  （上次返回的 <code>Last-Modified</code>  的值），询问服务器在该日期后资源是否有更新，有更新的话就会将新的资源发送回来</p>\n<p>但是如果在本地打开缓存文件，就会造成  <code>Last-Modified</code>  被修改，所以在 HTTP / 1.1 出现了 ETag</p>\n<h4 id=\"etag-if-none-match\"><a class=\"anchor\" href=\"#etag-if-none-match\">#</a> ETag、If-None-Match</h4>\n<p><code>ETag</code>  就像一个指纹，资源变化都会导致  <code>ETag</code>  变化，跟最后修改时间没有关系， <code>ETag</code>  可以保证每一个资源是唯一的</p>\n<p><code>If-None-Match</code>  的 header 会将上次返回的  <code>ETag</code>  发送给服务器，询问该资源的  <code>ETag</code>  是否有更新，有变动就会发送新的资源回来。</p>\n<p><code>ETag</code>  的优先级比  <code>Last-Modified</code>  更高</p>\n<h2 id=\"etag-有什么作用\"><a class=\"anchor\" href=\"#etag-有什么作用\">#</a> Etag 有什么作用</h2>\n<p><strong>你可能会觉得使用 Last-Modified 已经足以让浏览器知道本地的缓存副本是否足够新，为什么还需要 Etag 呢</strong> HTTP1.1 中 Etag 的出现主要是为了解决几个 Last-Modified 比较难解决的问题：</p>\n<ul>\n<li>一些文件也许会周期性的更改，但是他的内容并不改变 (仅仅改变的修改时间)，这个时候我们并不希望客户端认为这个文件被修改了，而重新 GET；</li>\n<li>某些文件修改非常频繁，比如在秒以下的时间内进行修改，(比方说 1s 内修改了 N 次)，If-Modified-Since 能检查到的粒度是 s 级的，这种修改无法判断 (或者说 UNIX 记录 MTIME 只能精确到秒)；</li>\n<li>某些服务器不能精确的得到文件的最后修改时间。</li>\n</ul>\n<p>这时，利用 Etag 能够更加准确的控制缓存，因为 Etag 是服务器自动生成或者由开发者生成的对应资源在服务器端的唯一标识符。</p>\n<p>Last-Modified 与 ETag 是可以一起使用的，服务器会优先验证 ETag ，一致的情况下，才会继续比对 Last-Modified，最后才决定是否返回 304。</p>\n<h2 id=\"如何选择合适的缓存\"><a class=\"anchor\" href=\"#如何选择合适的缓存\">#</a> 如何选择合适的缓存</h2>\n<p>大致的顺序</p>\n<ul>\n<li>Cache-Control —— 请求服务器之前</li>\n<li>Expires —— 请求服务器之前</li>\n<li>If-None-Match (Etag) —— 请求服务器</li>\n<li>If-Modified-Since (Last-Modified) —— 请求服务器</li>\n</ul>\n<p>协商缓存需要配合强缓存使用，如果不启用强缓存的话，协商缓存根本没有意义。</p>\n<p>大部分 web 服务器都默认开启协商缓存，而且是同时启用 [Last-Modified，If-Modified-Since] 和 [ETag、If-None-Match]</p>\n<hr />\n<p><strong>参考文献</strong></p>\n<p>博客园：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vd29ueXVuL3AvNTUyNDYxNy5odG1s\">https://www.cnblogs.com/wonyun/p/5524617.html</span></p>\n<p>掘金：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODQ0OTAzNzM2MTk2NzI2Nzk4\">https://juejin.cn/post/6844903736196726798</span></p>\n<p>作者：Little heaven 链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODQ0OTAzODM4NzY4NDMxMTE4JUU2JTlEJUE1JUU2JUJBJTkwJUVGJUJDJTlBJUU2JThFJTk4JUU5JTg3JTkxJUU4JTkxJTk3JUU0JUJEJTlDJUU2JTlEJTgzJUU1JUJEJTkyJUU0JUJEJTlDJUU4JTgwJTg1JUU2JTg5JTgwJUU2JTlDJTg5\">https://juejin.cn/post/6844903838768431118 来源：掘金著作权归作者所有</span></p>\n<p>作者：前端刊物链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODQ0OTAzNTU3OTQzMDE3NDg2JUU2JTlEJUE1JUU2JUJBJTkwJUVGJUJDJTlBJUU2JThFJTk4JUU5JTg3JTkxJUU4JTkxJTk3JUU0JUJEJTlDJUU2JTlEJTgzJUU1JUJEJTkyJUU0JUJEJTlDJUU4JTgwJTg1JUU2JTg5JTgwJUU2JTlDJTg5\">https://juejin.cn/post/6844903557943017486 来源：掘金著作权归作者所有</span></p>\n<p>github：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FtYW5kYWtlbGFrZS9ibG9nL2lzc3Vlcy80MQ==\">https://github.com/amandakelake/blog/issues/41</span></p>\n",
            "tags": [
                "网络",
                "网络",
                "浏览器缓存"
            ]
        },
        {
            "id": "https://xqlove.xyz/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%92%8C%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/",
            "url": "https://xqlove.xyz/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%92%8C%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/",
            "title": "TCP三次握手和四次挥手",
            "date_published": "2021-01-29T12:41:10.000Z",
            "content_html": "<h1 id=\"一起聊聊tcp三次握手和四次挥手吧\"><a class=\"anchor\" href=\"#一起聊聊tcp三次握手和四次挥手吧\">#</a> 一起聊聊 TCP 三次握手和四次挥手吧！</h1>\n<p>这一次我们带着问题来了解一下 TCP 建立连接和断开连接的过程。</p>\n<ul>\n<li>为什么是三次握手？</li>\n<li>三次握手过程中可以携带数据吗？</li>\n<li>什么是半连接队列？</li>\n<li>ISN 是固定的吗？</li>\n<li>为什么是四次挥手？</li>\n<li>四次挥手释放连接时，等待 2MSL 的意义？长一点短一点会有什么影响？</li>\n<li>当有大量的 time wait 状态，导致资源浪费，怎么排查、改进？</li>\n</ul>\n<h2 id=\"知识卡片\"><a class=\"anchor\" href=\"#知识卡片\">#</a> 知识卡片</h2>\n<h3 id=\"状态\"><a class=\"anchor\" href=\"#状态\">#</a> 状态</h3>\n<ul>\n<li>CLOSED：初始状态</li>\n<li>LISTEN：表示服务器端的某个 SOCKET（套接字）处于监听状态，可以接受连接了</li>\n<li>SYN_SENT：客户端已发送 SYN 报文</li>\n<li>SYN_RECV：服务器端接受到了 SYN 报文</li>\n<li>ESTABLISHED：连接已经建立</li>\n<li>FIN_WAIT1：SOCKET 在 ESTABLISHED 状态时想主动关闭连接，向对方发送了 FIN 报文，此时该 SOCKET 即进入到 FIN_WAIT_1 状态。</li>\n<li>CLOSE_WAIT: 这种状态的含义其实是表示在等待关闭</li>\n<li>FIN_WAIT2：对方回应 ACK 报文后，则进入到 FIN_WAIT_2 状态，表示半连接，也即有一方要求 close 连接，但另外还告诉对方，我暂时还有点数据需要传送给你，稍后再关闭连接。</li>\n<li>CLOSING：如果双方几乎在同时 close 一个 SOCKET 的话，那么就出现了双方同时发送 FIN 报 文的情况，也即会出现 CLOSING 状态，表示双方都正在关闭 SOCKET 连接。</li>\n<li>LAST_ACK：被动关闭一方在发送 FIN 报文后，最后等待对方的 ACK 报文。</li>\n<li>TIME_WAIT：客户端等待 2ML</li>\n</ul>\n<h3 id=\"标识位\"><a class=\"anchor\" href=\"#标识位\">#</a> 标识位</h3>\n<p>SYN：SYN 包作为建立连接的请求等待确认应答。</p>\n<p>序列号是按顺序给发送数据的每一个字节（8 位字节）都标上号码的编号。接收端查询接收数据 TCP 首部中的序列号和数据的长度，将下一步应该接收的序号作为确认应答返送回去（序列号 + 数据长度 = ack）。</p>\n<p>ACK：在 TCP 中，当通过发送端的数据到达接收主机时，接收端主机会返回一个已收到消息的通知。这个消息叫做确认应答（ACK）。</p>\n<p>NACK：这个就是一个否定确认应答，就好比别人跟你说话，你没有听清或者没太理解他的意思回答 “咦？”。一般用于 UDP 通信中，在 UDP 通信中发送端不考虑接收端是否接收到，在接收端发现丢包的时候，构造一个 NACK 消息包发送给发送端。</p>\n<p>FIN：进行断开连接处理发送的包。</p>\n<p>RST：重置连接。</p>\n<h3 id=\"其它\"><a class=\"anchor\" href=\"#其它\">#</a> 其它</h3>\n<p>seq（消息序号）：第一次请求时，随机生成一个值，而后每次 + 1</p>\n<p>ack（确认序号，注意是小写）：接收上一条信息的 seq+1</p>\n<h2 id=\"三次握手的过程是怎样的\"><a class=\"anchor\" href=\"#三次握手的过程是怎样的\">#</a> 三次握手的过程是怎样的？</h2>\n<p>TCP 通过检验和、序列号、确认应答、重发控制、连接管理以及窗口控制等机制实现可靠性传输。</p>\n<p>三次握手的过程如图所示：</p>\n<p><img data-src=\"https://cloud-img-1301075855.cos.ap-chengdu.myqcloud.com/xin/Snipaste_2021-01-30_15-28-13.png\" alt=\"\" /></p>\n<p>刚开始客户端处于 CLOSED 的状态，服务端处于 LISTEN 状态。<br />\n进行三次握手：</p>\n<ul>\n<li>\n<p>第一次握手：不可以携带数据，数据长度为 0，要消耗一个序列号，原因是需要对端确认。此时服务器端可以确实自己可以接受客户端发送的报文。此时客户端处于  <code>SYN_SEND</code>  状态。</p>\n</li>\n<li>\n<p>第二次握手：客户端可以确认服务器端收到了自己发送的报文，并且可以确认自己可以接收服务器端发送的报文。分配服务器端资源。此时服务器处于  <code>SYN_RCVD</code>  的状态。</p>\n</li>\n<li>\n<p>第三次握手：服务器端可以确认客户端接收服务器端发送的报文。只有第三次握手允许携带数据。分配客户端资源。此时客户端处于  <code>ESTABLISHED</code>  状态，服务器收到 ACK 报文之后，也处于  <code>ESTABLISHED</code>  状态，此时，双方已建立起了连接。</p>\n</li>\n<li>\n<p>简单来说就是：客户端第一次发送，证明客户端的发送能力正常；服务器第一次接收并发送，证明服务器端接收、发送能力正常；客户端第二次发送，证明客户端的接收能力正常。</p>\n</li>\n</ul>\n<h2 id=\"为什么需要三次握手\"><a class=\"anchor\" href=\"#为什么需要三次握手\">#</a> 为什么需要三次握手？</h2>\n<p>需要三次握手才能确认双方的接收与发送能力是否正常。</p>\n<p>如客户端发出连接请求，但因连接请求报文丢失而未收到确认，于是客户端再重传一次连接请求。后来收到了确认，建立了连接。数据传输完毕后，就释放了连接，客户端共发出了两个连接请求报文段，其中第一个丢失，第二个到达了服务端，但是第一个丢失的报文段只是在<strong>某些网络结点长时间滞留了，延误到连接释放以后的某个时间才到达服务端</strong>，此时服务端误认为客户端又发出一次新的连接请求，于是就向客户端发出确认报文段，同意建立连接，不采用三次握手，只要服务端发出确认，就建立新的连接了，此时客户端忽略服务端发来的确认，也不发送数据，则服务端一致等待客户端发送数据，浪费资源。</p>\n<p>在掘金上看到的这么一段话，反复的读了好几遍，前面也写了三次握手都有哪些作用。我的理解就是三次握手可以避免连接资源的浪费，不会因为一些特殊情况打开连接，避免 DDOS 攻击。</p>\n<h2 id=\"三次握手过程中可以携带数据吗\"><a class=\"anchor\" href=\"#三次握手过程中可以携带数据吗\">#</a> 三次握手过程中可以携带数据吗？</h2>\n<p>第一二次不可以，第三次可以，因为第三次才成功建立连接，如果第一、二次携带数据很容易造成 SYN 攻击，就是在握手时传入大量的数据，不理睬服务器端能力是否正常，疯狂发送 SYN，导致资源浪费。类似拒绝服务攻击。</p>\n<p>SYN 攻击的解决办法：SYN Cookie 算法、缩短超时时间</p>\n<p>有兴趣深入了解更多攻击技术和防御方法的朋友们，可以阅读这篇文章。</p>\n<p><a href=\"https://xqlove.xyz/Web%E5%AE%89%E5%85%A8/\">Web 安全</a></p>\n<h2 id=\"什么是半连接队列什么是全连接队列\"><a class=\"anchor\" href=\"#什么是半连接队列什么是全连接队列\">#</a> 什么是半连接队列？什么是全连接队列？</h2>\n<p>服务器第一次收到客户端的 SYN 之后，就会处于 SYN_RCVD 状态，此时双方还没有完全建立其连接，服务器会把此种状态下请求连接放在一个<strong>队列</strong>里，我们把这种队列称之为<strong>半连接队列</strong>。</p>\n<p>当然还有一个<strong>全连接队列</strong>，就是已经完成三次握手，建立起连接的就会放在全连接队列中。如果队列满了就有可能会出现丢包现象</p>\n<h2 id=\"isn是固定的吗\"><a class=\"anchor\" href=\"#isn是固定的吗\">#</a> ISN 是固定的吗？</h2>\n<p>当一端发送 SYN 时，它为连接选择一个初始序号。ISN 随时间而变化，因此每个连接都将具有不同的 ISN。ISN 可以看作是一个 32 比特的计数器，每 4ms 加 1 。这样选择序号的目的在于防止在网络中被延迟的分组在以后又被传送，而导致某个连接的一方对它做错误的解释。</p>\n<p><strong>三次握手的其中一个重要功能是客户端和服务端交换 ISN (Initial Sequence Number)，以便让对方知道接下来接收数据的时候如何按序列号组装数据。如果 ISN 是固定的，攻击者很容易猜出后续的确认号，因此 ISN 是动态生成的</strong>。</p>\n<h2 id=\"四次挥手的过程是怎样的\"><a class=\"anchor\" href=\"#四次挥手的过程是怎样的\">#</a> 四次挥手的过程是怎样的？</h2>\n<p><img data-src=\"https://cloud-img-1301075855.cos.ap-chengdu.myqcloud.com/xin/Snipaste_2021-01-30_18-38-48.png\" alt=\"\" /></p>\n<p>挥手前主动释放连接的客户端结束 ESTABLISHED 阶段，然后开始四次挥手。</p>\n<ul>\n<li>\n<p>第一次挥手：客户端想要释放连接，向服务器端发送 TCP 报文，随后客户端进入 <code>FIN-WAIT-1</code>  阶段，也就是半关闭状态，停止客户端向服务器方向上发送数据，但是客户端仍然能接收从服务器端传输过来的数据。</p>\n<p>这里不发送的是数据，但是可以发送确认报文。</p>\n</li>\n<li>\n<p>第二次挥手：服务器端接收到客户端发出的报文后，确认客户端想要释放连接，随后服务器端结束  <code>ESTABLISHED</code>  阶段，进入  <code>CLOSE-WAIT </code> 阶段（半关闭状态）并返回一段 TCP 报文，服务器端开始准备释放服务器端到客户端方向上的连接。客户端收到报文后，确认了服务器收到了客户端发出的释放连接请求，结束  <code>FIN-WAIT-1 </code> 阶段，进入  <code>FIN-WAIT-2</code>  阶段。</p>\n<p>两次挥手后，服务器端知道了客户端想要释放连接，客户端知道了服务器端了解了自己的想法，于是可以关闭客户端到服务器端方向上的连接了。</p>\n</li>\n<li>\n<p>第三次挥手：服务器端经过  <code>CLOSED-WAIT</code>  阶段，做好了释放服务器端到客户端方向上的连接准备，再次向客户端发送报文，随后结束  <code>CLOSE-WAIT </code> 阶段，进入  <code>LAST-ACK</code>  阶段，停止向客户端发送数据，但是仍然可以接收从客户端传输过来的数据。</p>\n</li>\n<li>\n<p>第四次挥手：客户端收到从服务器端发出的报文，确认了服务器端已做好释放连接的准备，结束  <code>FIN-WAIT-2</code>  阶段，进入  <code>TIME-WAIT</code>  阶段，并向服务器端发送一段报文。</p>\n<p>随后客户端开始在  <code>TIME-WAIT</code>  阶段等待 2MSL。</p>\n</li>\n</ul>\n<h2 id=\"为什么是四次挥手\"><a class=\"anchor\" href=\"#为什么是四次挥手\">#</a> 为什么是四次挥手？</h2>\n<p>终止一个连接要经过四次挥手。这是 TCP 的<strong>半关闭</strong>（half-close）造成的。所谓的半关闭，其实就是 TCP 提供了连接的一端在结束它的发送后还能接收来自另一端数据的能力。</p>\n<p>因为当服务端收到客户端的 SYN 连接请求报文后，可以直接发送 SYN+ACK 报文。其中<strong> ACK 报文是用来应答的，SYN 报文是用来同步的</strong>。但是关闭连接时，当服务端收到 FIN 报文时，很可能并不会立即关闭 SOCKET，所以只能先回复一个 ACK 报文，告诉客户端，&quot;你发的 FIN 报文我收到了&quot;。只有等到我服务端所有的报文都发送完了，我才能发送 FIN 报文，因此不能一起发送。</p>\n<h2 id=\"四次挥手释放连接时等待2msl的意义长一点短一点会有什么影响\"><a class=\"anchor\" href=\"#四次挥手释放连接时等待2msl的意义长一点短一点会有什么影响\">#</a> 四次挥手释放连接时，等待 2MSL 的意义？长一点短一点会有什么影响？</h2>\n<p><strong>2 个 MSL (Maximum Segment Lifetime，报文最大生存时间), 在这段时间内如果客户端没有收到服务端的重发请求，那么表示 ACK 成功到达，挥手结束，否则客户端重发 ACK。</strong></p>\n<p>如果不等待，客户端直接跑路，当服务端还有很多数据包要给客户端发，且还在路上的时候，若客户端的端口此时刚好被新的应用占用，那么就接收到了无用数据包，造成数据包混乱。</p>\n<blockquote>\n<p>1 个 MSL 确保四次挥手中主动关闭方最后的 ACK 报文最终能达到对端</p>\n</blockquote>\n<blockquote>\n<p>1 个 MSL 确保对端没有收到 ACK 重传的 FIN 报文可以到达</p>\n</blockquote>\n<h2 id=\"当有大量的time-wait2ml状态导致资源浪费怎么排查-改进\"><a class=\"anchor\" href=\"#当有大量的time-wait2ml状态导致资源浪费怎么排查-改进\">#</a> 当有大量的 TIME-WAIT（2ML）状态，导致资源浪费，怎么排查、改进？</h2>\n<p>TIME_WAIT 状态之所以存在，是为了保证网络的可靠性。</p>\n<h3 id=\"time_wait产生需要的条件\"><a class=\"anchor\" href=\"#time_wait产生需要的条件\">#</a> TIME_WAIT 产生需要的条件:</h3>\n<ul>\n<li>\n<p>高并发（可以让服务器在短时间范围内同时占用大量端口）</p>\n</li>\n<li>\n<p>服务器主动关闭连接</p>\n</li>\n</ul>\n<h3 id=\"产生大量time_wait状态的解决办法\"><a class=\"anchor\" href=\"#产生大量time_wait状态的解决办法\">#</a> 产生大量 TIME_WAIT 状态的解决办法：</h3>\n<ul>\n<li>\n<p>服务器不主动关闭连接</p>\n</li>\n<li>\n<p>减少短连接次数</p>\n</li>\n<li>\n<p>增加客户端 IP (一般客户端 IP 少都是通过应用层的负载均衡到达服务器的)</p>\n</li>\n<li>\n<p>设置允许地址重用，这样每次 bind 的时候，如果五元组正在使用，bind 就会把五元组抢过来 (不安全）</p>\n</li>\n</ul>\n<hr />\n<p><strong>参考文献</strong></p>\n<p>《图解 TCP/IP》第 5 版。</p>\n<p>作者：猿人谷链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODQ0OTAzOTU4NjI0ODc4NjA2JUU2JTlEJUE1JUU2JUJBJTkwJUVGJUJDJTlBJUU2JThFJTk4JUU5JTg3JTkxJUU4JTkxJTk3JUU0JUJEJTlDJUU2JTlEJTgzJUU1JUJEJTkyJUU0JUJEJTlDJUU4JTgwJTg1JUU2JTg5JTgwJUU2JTlDJTg5JUUzJTgwJTgy\">https://juejin.cn/post/6844903958624878606 来源：掘金著作权归作者所有。</span></p>\n<p>博客园：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20veWluYmlhby9wLzEwOTQ1ODM2Lmh0bWw=\">https://www.cnblogs.com/yinbiao/p/10945836.html</span></p>\n",
            "tags": [
                "网络",
                "网络",
                "TCP"
            ]
        },
        {
            "id": "https://xqlove.xyz/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E8%AF%A6%E8%A7%A3/",
            "url": "https://xqlove.xyz/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E8%AF%A6%E8%A7%A3/",
            "title": "跨域问题详解",
            "date_published": "2021-01-28T13:13:30.000Z",
            "content_html": "<h1 id=\"跨域问题详解\"><a class=\"anchor\" href=\"#跨域问题详解\">#</a> 跨域问题详解</h1>\n<h2 id=\"什么是同源策略\"><a class=\"anchor\" href=\"#什么是同源策略\">#</a> 什么是同源策略？</h2>\n<p>同源策略是一种约定，如果没有的话浏览器很不安全，容易受到 XSS（就是一些恶意的广告什么的一直弹，花里胡哨的）等攻击，同源指的是<strong>协议＋域名 + 端口号</strong>三者相同，<strong>即使两个不同的域名指向同一个 ip 地址，也并非同源哦</strong></p>\n<p>比如：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5kb21haW4uY29tL2EuanM=\">http://www.domain.com/a.js</span><br />\n<span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguNC4xMi9iLmpz\">http://192.168.4.12/b.js</span></p>\n<p><strong>还有主域相同、子域不同也不是同源哦</strong></p>\n<p>比如：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5kb21haW4uY29tL2EuanM=\">http://www.domain.com/a.js</span><br />\n<span class=\"exturl\" data-url=\"aHR0cDovL3guZG9tYWluLmNvbS9iLmpz\">http://x.domain.com/b.js</span><br />\n<span class=\"exturl\" data-url=\"aHR0cDovL2RvbWFpbi5jb20vYy5qcw==\">http://domain.com/c.js</span></p>\n<h3 id=\"为什么浏览器不支持跨域\"><a class=\"anchor\" href=\"#为什么浏览器不支持跨域\">#</a> 为什么浏览器不支持跨域</h3>\n<p>就是跨域会很危险，比如银行账户被盗了很有可能哦！</p>\n<h3 id=\"同源策略会有哪些问题也就是不跨域会怎样呢\"><a class=\"anchor\" href=\"#同源策略会有哪些问题也就是不跨域会怎样呢\">#</a> 同源策略会有哪些问题？（也就是不跨域会怎样呢？）</h3>\n<ul>\n<li>Cookie、LocalStorage 和 IndexDB 等存储内容无法读取</li>\n<li>DOM 和 JS 对象无法获得（iframe 可以在自己的页面引入别人的页面（前提是同域））</li>\n<li>AJAX 请求发送出去了，但是响应被浏览器拦截了，然后就是非常难受了</li>\n</ul>\n<h2 id=\"实现跨域\"><a class=\"anchor\" href=\"#实现跨域\">#</a> 实现跨域</h2>\n<ul>\n<li>jsonp</li>\n<li>cors（纯后端提供的，最常用的，安全性高）</li>\n<li>postMessage（两个页面之间的通信）</li>\n<li>document.domain（同域下的但是二级域名一级域名）</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3dpbmRvdy5uYW1l\">window.name</span></li>\n<li>location.hash</li>\n<li>http-proxy（反向代理）</li>\n<li>nginx</li>\n<li>websocket（传播速度快，平等的，没有跨域限制）</li>\n</ul>\n<h3 id=\"jsop\"><a class=\"anchor\" href=\"#jsop\">#</a> jsop</h3>\n<p><strong>原理：利用 script 标签没有跨域限制，通过 script 标签 src 属性，发送带有 callback 参数的 GET 请求，服务端将接口返回数据拼凑到 callback 函数中，返回给浏览器，浏览器解析执行，从而前端拿到 callback 函数返回的数据</strong></p>\n<p>首先我们写代码的时候 src 中可以引入别人家的域，从而获取别人家的数据，可以动手试试，这里就不再赘述啦。</p>\n<p>用 jsop 来实现的话就是：</p>\n<ul>\n<li>本站的脚本创建一个  元素，src 地址指向跨域请求数据的服务器</li>\n<li>提供一个回调函数来接受数据，函数名可以通过地址参数传递进行约定</li>\n<li>服务器收到请求后，返回一个包装了 JSON 数据的响应字符串，类似这样：callback ({...})</li>\n</ul>\n<p>浏览器接受响应后就会去执行回调函数 callback，传递解析后的 JSON 对象作为参数，这样我们就可以在 callback 里处理数据了。实际开发中，会遇到回调函数名相同的情况，是不是看完懵懵的，我第一次看完反正是懵懵的，接下来举个栗子吧！可以简单写一个 JSONP 函数：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 客户端原生 JS 实现</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> script <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'script'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>script<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> <span class=\"token string\">'text/javascript'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 传参一个回调函数名给后端，方便后端返回时执行这个在前端定义的回调函数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>script<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> <span class=\"token string\">'http://www.dc.com:8080/login?user=admin&amp;callback=handleCallback'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>document<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span><span class=\"token function\">appendChlid</span><span class=\"token punctuation\">(</span>script<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 回调执行函数</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">handleCallback</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 服务器端返回如下（返回时即执行全局函数）</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token function\">handleCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"success\"</span><span class=\"token operator\">:</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"user\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">//Vue axios 实现:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$http <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$http<span class=\"token punctuation\">.</span><span class=\"token function\">jsonp</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://www.dx.com:8080/login'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    params<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    jsonp<span class=\"token operator\">:</span><span class=\"token string\">\"handleCallback\"</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">// 后端 node.js 代码</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">var</span> querystring <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'querystring'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">var</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">var</span> server <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>server<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'request'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">var</span> params <span class=\"token operator\">=</span> querystring<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'?'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">var</span> fn <span class=\"token operator\">=</span> params<span class=\"token punctuation\">.</span>callback<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token comment\">//jsonp 返回设置</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    res<span class=\"token punctuation\">.</span><span class=\"token function\">writeHead</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token string\">'Content-Type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'text/javascript'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    res<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>fn <span class=\"token operator\">+</span> <span class=\"token string\">'('</span> <span class=\"token operator\">+</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">')'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>server<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token string\">'8080'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Server is running at port 8080...'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>缺点：只能发送 get 请求，不支持 post  put（在这个路径上修改文件）  delete</p>\n<p>不安全   xss 攻击     不采用</p>\n<p>执行完以后返回的是一个 promise</p>\n<h3 id=\"cors\"><a class=\"anchor\" href=\"#cors\">#</a> CORS</h3>\n<p>是一个 W3C 标准，全称是 &quot;跨域资源共享&quot;（Cross-origin resource sharing）</p>\n<p>它允许浏览器向跨域服务器，发出 XMLHttpRequest 请求，从而克服了 AJAX 只能同源使用的限制。</p>\n<p>CORS 需要浏览器和服务器同时支持。</p>\n<p>浏览器将 CORS 跨域请求分为<strong>简单请求</strong>和<strong>非简单请求</strong></p>\n<p>只要同时满足一下两个条件，就属于简单请求</p>\n<ol>\n<li>使用下列方法之一\n<ul>\n<li>head</li>\n<li>get</li>\n<li>post</li>\n</ul>\n</li>\n<li>请求的 Header 是\n<ul>\n<li>Accept</li>\n<li>Accept-Language</li>\n<li>Content-Language</li>\n<li>Content-Type：只限于三个值：application/x-www-form-urlencoded\\multipart/form-data、text/plain</li>\n</ul>\n</li>\n</ol>\n<p>不同时满足上面两个条件，就属于非简单请求。费劲心思的进行了区分，那就说明浏览器对于两者的处理是不一样的。</p>\n<p><strong>简单请求</strong></p>\n<p>** 浏览器直接发出 CORS 请求，也就是在头信息中增加一个 Origin（用来说明请求来自哪个源）也就是说明请求的（协议 + 域名 + 端口）** 服务器根据这个值，决定是否同意这次请求。</p>\n<p><strong>非简单请求</strong></p>\n<p>比如请求方法是 PUT 或 DELETE，或者 Content-Type 字段的类型是 application/json。</p>\n<p>这种请求会在正式通信之前，增加一次 HTTP 查询请求称为<strong>预检请求</strong>用的请求方法是 options，表示这个请求是用来询问的。请求头信息里面，关键字段是 Origin，表示请求来自哪个源。</p>\n<p>预检请求包含两个特殊字段</p>\n<ul>\n<li>\n<p><strong>Access-Control-Request-Method</strong>：必选</p>\n<p>用来列出浏览器的 CORS 请求会用到哪些 HTTP 方法，如 PUT</p>\n</li>\n<li>\n<p><strong>Access-Control-Request-Headers</strong>：可选</p>\n<p>指定浏览器 CORS 请求会额外发送的头信息字段</p>\n</li>\n</ul>\n<p>客户端</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> xhr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>document<span class=\"token punctuation\">.</span>cookie <span class=\"token operator\">=</span> <span class=\"token string\">\"name=zzz\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//cookie 是不允许跨域的</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>xhr<span class=\"token punctuation\">.</span>withCredentials <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 必须携带 cookie</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>xhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'http://localhost:4000/getData'</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>xhr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onreadystatechange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>readyState <span class=\"token operator\">===</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>status<span class=\"token operator\">>=</span><span class=\"token number\">200</span> <span class=\"token operator\">&amp;&amp;</span> xhr<span class=\"token punctuation\">.</span>status <span class=\"token operator\">&lt;</span> <span class=\"token number\">300</span> <span class=\"token operator\">||</span> xhr<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span><span class=\"token number\">304</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>服务器</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span>res<span class=\"token punctuation\">,</span>next</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">let</span> origin <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">.</span>origin<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>whitList<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>origin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 设置哪个源可以访问我</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    res<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Access-Control-Allow-Origin'</span><span class=\"token punctuation\">,</span>origin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 允许携带哪个头访问我</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    res<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Access-Control-Allow-Headers'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 允许携带哪个方法访问我</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    res<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Access-Control-Allow-Methods'</span><span class=\"token punctuation\">,</span>put<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 允许携带 cookie</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    res<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Access-Control-Allow-Credentials'</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 预检的存活时间</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    res<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Access-Control-Max-Age'</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 允许前端获取哪个头</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    res<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Access-Control-Expose-Headers'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'name'</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                      </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>method <span class=\"token operator\">===</span> <span class=\"token string\">'Origin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Origin 不做任何处理</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/getDate'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span>res</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我爱你\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"3postmessage\"><a class=\"anchor\" href=\"#3postmessage\">#</a> 3.postMessage</h4>\n<p>h5 提供的</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a.html</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>iframe</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://localhost:4000/b.html<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">frameborder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>0<span class=\"token punctuation\">'</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>frame<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">onload</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>load()<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>iframe</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">function</span> <span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">let</span> frame <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'frame'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            frame<span class=\"token punctuation\">.</span>contentWindow<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">'我爱你'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'http://localhost:4000'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>b.html</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    window<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        e<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'我爱你'</span><span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">,</span>origin<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"windowname\"><a class=\"anchor\" href=\"#windowname\">#</a> <span class=\"exturl\" data-url=\"aHR0cDovL3dpbmRvdy5uYW1l\">window.name</span></h3>\n<ul>\n<li>a 和 b 是同域的 http://localhost:3000</li>\n<li>c 是独立的 http://localhost:4000</li>\n<li>a 获取 c 的数据</li>\n<li>a 先引用 c  <span class=\"exturl\" data-url=\"aHR0cDovL3huLS1jd2luZG93LXdrN2tmOWw3dzVjc2hnLm5hbWU=\">c 把值放到 window.name</span>，把 a 引用的地址改到 b</li>\n</ul>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a.html</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>&lt;iframe src=\"http://localhost:4000/c.html\" frameborder='0' onload=\"load()\" id=\"iframe\"<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>iframe</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">let</span> first <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>          <span class=\"token keyword\">let</span> iframe <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'iframe'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>          iframe<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> <span class=\"token string\">'http://localhost:3000/b.html'</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            first <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>          iframe<span class=\"token punctuation\">.</span>contentWindow<span class=\"token punctuation\">.</span>name</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>c.html</pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    window<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"我爱你\"</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"locationhash\"><a class=\"anchor\" href=\"#locationhash\">#</a> location.hash</h3>\n<ul>\n<li>路径后面的 hash 值可以用来通信</li>\n<li>目的：a 访问 c</li>\n<li>a 给 c 传一个 hash 值，c 收到 hash 值后，c 把 hash 值传递给 b，b 将结果放到 a 的 hash 值中</li>\n</ul>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a.html</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>iframe</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://localhost:4000/c.html#love<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>iframe</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    window<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onhashchange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>location<span class=\"token punctuation\">.</span>hash<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>c.html</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">let</span> iframe <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'iframe'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    iframe<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> <span class=\"token string\">\"http://localhost:3000html#ilove\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendchlid</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"iframe\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>b.html</pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    window<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>hash <span class=\"token operator\">=</span> location<span class=\"token punctuation\">.</span>hash</pre></td></tr><tr><td data-num=\"19\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"documentdomain-iframe\"><a class=\"anchor\" href=\"#documentdomain-iframe\">#</a> document.domain + iframe</h3>\n<p>适用于主域名相同的情况下</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a.html</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>iframe</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://b.dx.cn:3000/b.html<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">frameborder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">onload</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>onload()<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>iframe</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">onload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        document<span class=\"token punctuation\">.</span>domain <span class=\"token operator\">=</span> <span class=\"token string\">\"dx1.cn\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>   </pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>c.html</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    document<span class=\"token punctuation\">.</span>domain <span class=\"token operator\">=</span> <span class=\"token string\">\"dx1.cn\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"websocket\"><a class=\"anchor\" href=\"#websocket\">#</a> websocket</h3>\n<p>传输速度快    服务器可以主动跟客户端通信   相当于全双工</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 高级 api 不兼容 socket.io (一般使用它)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> socket <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebSocket</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ws://localhost:3000'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>socket<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onopen</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    socket<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'aini'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>socket<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>服务器端</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> WebSocket <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ws'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> wss <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebSocket<span class=\"token punctuation\">.</span>Server</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>port<span class=\"token operator\">:</span><span class=\"token number\">3000</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>wss<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'connection'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ws</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    ws<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        ws<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ainito\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"nginx代理跨域\"><a class=\"anchor\" href=\"#nginx代理跨域\">#</a> nginx 代理跨域</h3>\n<p>nginx 代理跨域，实质和 CORS 跨域原理一样，通过配置文件设置请求响应头 Access-Control-Allow-Origin… 等字段。</p>\n<p>1）nginx 配置解决 iconfont 跨域</p>\n<p>浏览器跨域访问 js、css、img 等常规静态资源被同源策略许可，但 iconfont 字体文件 (eot|otf|ttf|woff|svg) 例外，此时可在 nginx 的静态资源服务器中加入以下配置。</p>\n<pre><code class=\"language-text\">location / &#123;\n  add_header Access-Control-Allow-Origin *;\n&#125;\n</code></pre>\n<p>2）nginx 反向代理接口跨域</p>\n<p>跨域问题：同源策略仅是针对浏览器的安全策略。服务器端调用 HTTP 接口只是使用 HTTP 协议，不需要同源策略，也就不存在跨域问题。</p>\n<p>实现思路：通过 Nginx 配置一个代理服务器域名与 domain1 相同，端口不同）做跳板机，反向代理访问 domain2 接口，并且可以顺便修改 cookie 中 domain 信息，方便当前域 cookie 写入，实现跨域访问。</p>\n<p>nginx 具体配置：</p>\n<pre><code class=\"language-text\">#proxy服务器\nserver &#123;\n    listen       81;\n    server_name  www.domain1.com;\n\n    location / &#123;\n        proxy_pass   http://www.domain2.com:8080;  #反向代理\n        proxy_cookie_domain www.domain2.com www.domain1.com; #修改cookie里域名\n        index  index.html index.htm;\n\n        # 当用webpack-dev-server等中间件代理接口访问nignx时，此时无浏览器参与，故没有同源限制，下面的跨域配置可不启用\n        add_header Access-Control-Allow-Origin http://www.domain1.com;  #当前端只跨域不带cookie时，可为*\n        add_header Access-Control-Allow-Credentials true;\n    &#125;\n&#125;\n\n</code></pre>\n<h3 id=\"nodejs中间件代理跨域\"><a class=\"anchor\" href=\"#nodejs中间件代理跨域\">#</a> nodejs 中间件代理跨域</h3>\n<p>node 中间件实现跨域代理，原理大致与 nginx 相同，都是通过启一个代理服务器，实现数据的转发，也可以通过设置 cookieDomainRewrite 参数修改响应头中 cookie 中域名，实现当前域的 cookie 写入，方便接口登录认证。</p>\n<h4 id=\"非vue框架的跨域\"><a class=\"anchor\" href=\"#非vue框架的跨域\">#</a> 非 vue 框架的跨域</h4>\n<p>使用 node + express + http-proxy-middleware 搭建一个 proxy 服务器。</p>\n<ul>\n<li>前端代码：</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> xhr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 前端开关：浏览器是否读写 cookie</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>xhr<span class=\"token punctuation\">.</span>withCredentials <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 访问 http-proxy-middleware 代理服务器</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>xhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'get'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'http://www.domain1.com:3000/login?user=admin'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>xhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>中间件服务器代码：</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> proxy <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http-proxy-middleware'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">var</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">proxy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 代理跨域目标接口</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    target<span class=\"token operator\">:</span> <span class=\"token string\">'http://www.domain2.com:8080'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    changeOrigin<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 修改响应头信息，实现跨域并允许带 cookie</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function-variable function\">onProxyRes</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">proxyRes<span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        res<span class=\"token punctuation\">.</span><span class=\"token function\">header</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Access-Control-Allow-Origin'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'http://www.domain1.com'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        res<span class=\"token punctuation\">.</span><span class=\"token function\">header</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Access-Control-Allow-Credentials'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'true'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 修改响应信息中的 cookie 域名</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    cookieDomainRewrite<span class=\"token operator\">:</span> <span class=\"token string\">'www.domain1.com'</span>  <span class=\"token comment\">// 可以为 false，表示不修改</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Proxy server is listen at port 3000...'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"vue框架的跨域\"><a class=\"anchor\" href=\"#vue框架的跨域\">#</a> vue 框架的跨域</h4>\n<p>node + vue + webpack +  webpack-dev-server 搭建的项目，跨域请求接口，直接修改 webpack.config.js 配置。开发环境下，vue 渲染服务和接口代理服务都是 webpack-dev-server 同一个，所以页面与代理接口之间不再跨域。</p>\n<p>webpack.config.js 部分配置：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    entry<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    module<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token operator\">...</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    devServer<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        historyApiFallback<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        proxy<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            context<span class=\"token operator\">:</span> <span class=\"token string\">'/login'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            target<span class=\"token operator\">:</span> <span class=\"token string\">'http://www.domain2.com:8080'</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// 代理跨域目标接口</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            changeOrigin<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            secure<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// 当代理某些 https 服务报错时用</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            cookieDomainRewrite<span class=\"token operator\">:</span> <span class=\"token string\">'www.domain1.com'</span>  <span class=\"token comment\">// 可以为 false，表示不修改</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        noInfo<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "网络",
                "基础知识扫盲",
                "网络",
                "跨域"
            ]
        },
        {
            "id": "https://xqlove.xyz/Web%E5%AE%89%E5%85%A8/",
            "url": "https://xqlove.xyz/Web%E5%AE%89%E5%85%A8/",
            "title": "Web安全",
            "date_published": "2021-01-28T05:33:13.000Z",
            "content_html": "<h1 id=\"我了解的web安全\"><a class=\"anchor\" href=\"#我了解的web安全\">#</a> 我了解的 Web 安全</h1>\n<p>​        刚开始不知道这个部分应该拟一个什么样的题目比较合适，这部分是书中我的安全世界观讲述的内容，想来想去觉得这部分也应该写出来，我从作者的角度，了解了 Web 安全的发展和一点点皮毛，写出来给大家扫扫盲。</p>\n<p>​         互联网本来是安全的，自从有了研究安全的人之后，互联网就变得不安全了。</p>\n<p>​         这句话是书中的内容，我觉得非常有趣，所以想写在这里，大家可以品一品。</p>\n<h2 id=\"web安全简史\"><a class=\"anchor\" href=\"#web安全简史\">#</a> Web 安全简史</h2>\n<p>早期研究计算机网络系统和网络的人被称为 “Hacker”, 也就是我们口中的黑客。黑客使用的漏洞利用代码叫做 “exploit”, 有些黑客只对攻击本身感兴趣，只懂得编译别人的代码，没有动手能力，被称为 “Script Kids”。我们都知道用户的最高权限叫做 “root&quot;，这也是黑客的目标。</p>\n<p>黑客的发展分为三个时代：启蒙时代、黄金时代、黑暗时代。也许大家都不知道，之前的黑客精神代表的是：Share、Free、Open，但随着安全产业的发展，黑客的功利性越来越强，黑色产业链逐渐发展，黑暗时代降临。</p>\n<p>“黑客” 也是有好坏之分的，在黑客的世界中，往往用帽子的颜色区分黑客的好坏，白帽子代表反黑客领域专家，他们需要找到所有弱点，才能保证系统不被入侵，需要不断的分解找到的问题，逐个解决。黑帽子代表利用技术造成破坏，甚至网络犯罪的一类人，他们只要找到网络中的一个弱点入侵即可，为了完成一次入侵，往往利用找到的漏洞组合起来，不断地组合问题。</p>\n<p><strong>安全的本质是信任问题</strong>，也就是说我们要相信一些最基本的假设，不然安全就无法建立。</p>\n<p>安全有三要素，简称 CIA：<strong>机密性、完整性、可用性</strong></p>\n<p>机密性要求数据内容不能泄露，通常通过<strong>加密</strong>手段来保证。</p>\n<p>完整性要求数据内容是完整的、不被篡改的，通常通过<strong>数字签名</strong>保证。</p>\n<p>安全评估的过程分为四个阶段：资产等级划分、威胁分析、风险分析、确认解决方法。</p>\n<p>互联网安全的核心问题是数据安全问题。</p>\n<p>讲述几个概念：</p>\n<ul>\n<li>威胁：可能造成危险的来源</li>\n<li>风险：可能出现的损失</li>\n<li>漏洞：系统中可能被威胁、利用以造成危害的地方</li>\n</ul>\n<p>白帽子兵法：</p>\n<ul>\n<li>Secure By Default 原则：也就是黑名单、白名单。有时候黑名单会覆盖不全面，所以我们使用白名单可能是更好的选择。</li>\n<li>纵深防御：更全面、更正确的看待问题，也就是设计安全方案时要看到各个层面、各个方面，避免短板效应。</li>\n<li>数据与代码分离：漏洞成因上看待问题</li>\n<li>不可预测性原则：克服攻击方法方面看待问题，比如利用随机地址。</li>\n</ul>\n<h1 id=\"浏览器安全\"><a class=\"anchor\" href=\"#浏览器安全\">#</a> 浏览器安全</h1>\n<h2 id=\"同源策略\"><a class=\"anchor\" href=\"#同源策略\">#</a> 同源策略</h2>\n<p>浏览器的同源策略，限制了来自不同源的 “document” 或脚本，对当前 “document” 读取或设置某些属性。</p>\n<p>影响 “源” 的因素：协议、端口号、域名</p>\n<p>scrip、img、iframe、link 都可以跨域加载资源</p>\n<p>关于如何解决跨域问题有一篇专门的讲解文章：<a href=\"https://xqlove.xyz/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E8%AF%A6%E8%A7%A3/\">跨域问题介绍</a></p>\n<h1 id=\"跨站脚本攻击xss\"><a class=\"anchor\" href=\"#跨站脚本攻击xss\">#</a> 跨站脚本攻击（XSS）</h1>\n<h2 id=\"什么是xss\"><a class=\"anchor\" href=\"#什么是xss\">#</a> 什么是 XSS？</h2>\n<p>跨站脚本攻击，英文全称是 Cross Site Script，本来的缩写应该是 CSS，但为了和层叠样式表有所区别，叫做 XSS。它指的是黑客通过 “HTML 注入” 篡改了网页，插入恶意的脚本，在用户浏览网页时，控制用户浏览器。刚开始这种案例是跨域的，所以叫做跨站脚本，但是现在是否跨域已经不再重要。</p>\n<p>XSS 破坏力强大，产生的情景复杂，难以一次解决，所以是 Web 安全中的头号大敌。针对不同情景的 XSS 我们要区别对待。</p>\n<h2 id=\"xss分类\"><a class=\"anchor\" href=\"#xss分类\">#</a> XSS 分类</h2>\n<ul>\n<li>\n<p>反射型 XSS（非持久型）：把用户输入的数据 “反射” 给浏览器。黑客需要诱使用户 “点击” 一个恶意链接，才能攻击成功。</p>\n<ul>\n<li>\n<p>例如：访问 http://www.xss.com/test.html?param = 这是一个测试！</p>\n<p>我们会看到数据展示在页面中</p>\n</li>\n<li>\n<p>例如：访问 http://www.xss.com/test.html?param=script 标签中包含 alert (/xss/)</p>\n<p>我们会看到 alert (/xss/) 在当前页面被执行了，用户输入的 script 脚本，已经被写入页面中，这显然是开发者不愿意看到的。也就是反射型 XSS。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>存储型 XSS：把用户输入的数据 “存储” 在服务器端。具有很强的稳定性。</p>\n<ul>\n<li>例如：黑客写下一篇包含恶意 javascipt 代码的文章，发表后，所有访问该文章的用户，都会在他们的浏览器中执行这段恶意的代码。</li>\n</ul>\n</li>\n<li>\n<p>Dom Based XSS：修改页面的 DOM 节点形成的 XSS。通过 innerHTML 把一段用户数据当做 HTML 写入页面中。</p>\n</li>\n</ul>\n<h2 id=\"xss攻击进阶\"><a class=\"anchor\" href=\"#xss攻击进阶\">#</a> XSS 攻击进阶</h2>\n<h3 id=\"xss-payload\"><a class=\"anchor\" href=\"#xss-payload\">#</a> XSS Payload</h3>\n<p>XSS Payload：用以完成各种具体功能的恶意脚本。</p>\n<p>一个最常用的 XSS Payload，就是用过读取浏览器的 Cookie 对象，从而发起 “Cookie 劫持” 攻击，攻击者可以不通过密码，而直接登录进用户的账户。</p>\n<p>Cookie 的 “HttpOnly” 标识可以防止 “Cookie 劫持 “。</p>\n<h3 id=\"构造get与post请求\"><a class=\"anchor\" href=\"#构造get与post请求\">#</a> 构造 GET 与 POST 请求</h3>\n<p>攻击者可以仅通过 JavaScript，就可以让浏览器发起这两种请求。只需要知道 ID，构造出 URL，就可以进行操作。</p>\n<h3 id=\"xss钓鱼\"><a class=\"anchor\" href=\"#xss钓鱼\">#</a> XSS 钓鱼</h3>\n<p>将 XSS 与钓鱼结合起来，伪造一个登录框，用户输入用户名和密码时，将密码直接发送至黑客的服务器上</p>\n<h3 id=\"识别用户浏览器\"><a class=\"anchor\" href=\"#识别用户浏览器\">#</a> 识别用户浏览器</h3>\n<p>XSS 读取浏览器的 UserAgent 对象，但是 UserAgent 是可以伪造的，浏览器可以屏蔽或者自定义，所以采用分辨浏览器之间的差异会更精准的读取 UserAgent。</p>\n<h3 id=\"识别用户安装的软件\"><a class=\"anchor\" href=\"#识别用户安装的软件\">#</a> 识别用户安装的软件</h3>\n<p>通过判断 ActiveX 控件的 classid 是否存在，来推测用户是否安装了该软件。</p>\n<h3 id=\"css-history-hack\"><a class=\"anchor\" href=\"#css-history-hack\">#</a> CSS History Hack</h3>\n<p>通过 CSS，来发现一个用户曾经访问过的网站。其原理是利用 style 的 visited，曾经访问过的链接，颜色会变得与众不同。</p>\n<h3 id=\"获取用户的真实ip地址\"><a class=\"anchor\" href=\"#获取用户的真实ip地址\">#</a> 获取用户的真实 IP 地址</h3>\n<p>XSS 攻击需要借助第三方软件来完成，比如客户端安装了 Java 环境，就可以调用 Java Applet 的接口获取客户端的本地 IP 地址。</p>\n<h2 id=\"xss防御\"><a class=\"anchor\" href=\"#xss防御\">#</a> XSS 防御</h2>\n<ul>\n<li>HttpOnly：浏览器将禁止页面的 JavaScript 访问带有 HttpOnly 属性的 Cookie，解决 XSS 后的 Cookie 劫持攻击，它是在 Set-Cookie 时标记的，使用非常灵活，有时候仅把它标记给用于认证的关键 Cookie。但它不是万能的，比如攻击者利用 AJAX 构造 HTTP 请求，以用户身份完成操作，就是在不知道用户 Cookie 的情况下进行的。</li>\n<li>输入检查：有时候也是格式检查，比如注册时要求只能是数字、字母组合，这种有点像白名单，可以让一些基于特殊字符攻击失败。一般的做法是同时在客户端 JavaScript 中和服务器端代码实现相同的输入检查。客户端的输入检查主要可以阻挡误操作的用户，节约资源。但是有可能会改变用户的输入语义。</li>\n<li>输出检查：在变量输出到 HTML 页面时，可以使用编码或转义的方式防御 XSS 攻击。有很多安全的编码函数，比如在 HTML 标签中输入，采用 HtmlEncode，在 script 标签或者事件中输出，采用 JavaScriptEncode，在 CSS 中输入，采用 encodeForCSS，在地址中输入，采用 URLEncode。</li>\n<li>在标签的选择上使用白名单，避免使用黑名单。</li>\n</ul>\n<p>XSS 攻击主要发生在 view 层。大部分的 XSS 漏洞可以在模板系统中解决。它的本质还是一种 “HTML 注入”，用户数据被当成了 HTML 代码一部分来执行，一般来说，存储型 XSS 风险会高于反射型 XSS。</p>\n<h1 id=\"跨站点请求伪造csrf\"><a class=\"anchor\" href=\"#跨站点请求伪造csrf\">#</a> 跨站点请求伪造（CSRF）</h1>\n<h2 id=\"什么是csrf\"><a class=\"anchor\" href=\"#什么是csrf\">#</a> 什么是 CSRF？</h2>\n<p>通过诱使用户访问一个页面，就以该用户身份在第三方站点里执行一次操作。请求是攻击者所伪造的攻击就是 “跨站点请求伪造”。</p>\n<h2 id=\"csrf进阶\"><a class=\"anchor\" href=\"#csrf进阶\">#</a> CSRF 进阶</h2>\n<p>攻击者伪造的请求之所以能够被服务器验证通过，是因为用户的浏览器成功发送了 Cookie 的缘故。</p>\n<p>浏览器所持有的 Cookie 分为两种：一种是 “Session Cookie”，又称临时 Cookie；另一种是 “Third-party Cookie”，也称为 “本地 Cookie”。</p>\n<p>两者的区别在于，后者是服务器在 Set-Cookie 时指定 Expire 时间，只有到了 Expire 时间后 Cookie 才会失效，所以这种 Cookie 会保存在本地；而 Session Cookie 则没有指定 Expire 时间，保存在浏览器进程的内存空间中，所以浏览器关闭后，Session Cookie 就失效了，浏览器打开了新的 Tab 页，Session Cookie 也都是有效的。一般 IE 浏览器会拦截第三方 Cookie。</p>\n<h2 id=\"csrf的防御\"><a class=\"anchor\" href=\"#csrf的防御\">#</a> CSRF 的防御</h2>\n<h3 id=\"验证码\"><a class=\"anchor\" href=\"#验证码\">#</a> 验证码</h3>\n<p>CSRF 攻击，往往是在用户不知情的情况下构造了网络请求。而验证码，强制用户必须与应用进行交互，才能完成最终请求。</p>\n<h3 id=\"referer-check\"><a class=\"anchor\" href=\"#referer-check\">#</a> Referer Check</h3>\n<p>Referer Check 应用于 &quot;防止图片盗链&quot;，也可以用于检查请求是否来自合法的 “源”。通过它的合法性判断是否收到了 CSRF 攻击。但是服务器并非什么时候都能取到 Referer。</p>\n<h3 id=\"token\"><a class=\"anchor\" href=\"#token\">#</a> Token</h3>\n<h4 id=\"csrf本质\"><a class=\"anchor\" href=\"#csrf本质\">#</a> CSRF 本质</h4>\n<p>重要操作的所有参数都是可以被攻击者猜测到的。攻击者只有猜测出 URL 的所有参数及参数值，才能成功地构造一个伪造的请求，反之，攻击者将无法攻击成功。</p>\n<h4 id=\"加密或混淆url\"><a class=\"anchor\" href=\"#加密或混淆url\">#</a> 加密或混淆 URL</h4>\n<p>把参数加密，或者使用一些随机数，从而让攻击者无法猜测到参数值，这是 “不可预测性原则”。但加密的参数解读非常复杂，并且这种 URL 无法被用户收藏，因为 URL 会一直在改变，给数据分析会带来很大的困扰。</p>\n<h4 id=\"保持原参数不变新增一个参数token\"><a class=\"anchor\" href=\"#保持原参数不变新增一个参数token\">#</a> 保持原参数不变，新增一个参数 Token</h4>\n<p>这个 Token 是随机的，不可预测的。</p>\n<p>Token 需要同时放在表单和 Session 中。在提交请求时，服务器只需验证表单中的 Token，与用户 Session（或 Cookie）中的 Token 是否一致，如果一致，则认为是合法的请求；如果不一致，或者有一个为空，则认为请求不合法，可能发生了 CSRF 攻击。Token 不是为了防止重复提交，所以允许在一个用户的有效生命周期内，在 Token 消耗掉前都使用同一个 Token，如果用户已经提交了表单，则 Token 被消耗了，应该重新生成一个 Token。</p>\n<h1 id=\"点击劫持chlickjacking\"><a class=\"anchor\" href=\"#点击劫持chlickjacking\">#</a> 点击劫持（ChlickJacking)</h1>\n<h2 id=\"什么是点击劫持\"><a class=\"anchor\" href=\"#什么是点击劫持\">#</a> 什么是点击劫持？</h2>\n<p>它是一种视觉上的欺骗手段。攻击者使用一个透明的、不可见的 iframe，覆盖在一个网页上，诱使用户在该网页上进行操作，在用户将在不知情的情况下点击透明的 iframe 页面。利用与用户产生交互的页面。比如图片覆盖攻击、拖拽劫持与数据窃取、触屏劫持等。</p>\n<h2 id=\"防御chlickjacking\"><a class=\"anchor\" href=\"#防御chlickjacking\">#</a> 防御 ChlickJacking</h2>\n<h3 id=\"禁止跨域的iframe\"><a class=\"anchor\" href=\"#禁止跨域的iframe\">#</a> 禁止跨域的 iframe</h3>\n<p>通常写一段 JavaScript 代码，以禁止 iframe 的嵌套。这种方法叫 frame busting。</p>\n<h3 id=\"x-frame-options\"><a class=\"anchor\" href=\"#x-frame-options\">#</a> X-Frame-Options</h3>\n<p>使用 HTTP 头 ——X-Frame-Options</p>\n<h1 id=\"认证与会话\"><a class=\"anchor\" href=\"#认证与会话\">#</a> 认证与会话</h1>\n<h2 id=\"什么是认证\"><a class=\"anchor\" href=\"#什么是认证\">#</a> 什么是认证？</h2>\n<p>有时候人们会把认证和授权两个概念搞混，认证为了认出用户是谁，就是一个验证凭证的过程。授权</p>\n<p>则为了决定用户能够做什么。</p>\n<h2 id=\"认证的手段\"><a class=\"anchor\" href=\"#认证的手段\">#</a> 认证的手段</h2>\n<h3 id=\"密码\"><a class=\"anchor\" href=\"#密码\">#</a> 密码</h3>\n<p>持有正确密码的人，被认为是可信的。它的优点是使用成本低，认证过程实现起来很简单；缺点是密码认证是一种比较弱的安全方案，可能会被破解。</p>\n<p>设置密码时，我们首先需要考虑密码的强度，一般在注册时，网站会告诉用户所使用密码的复杂度。</p>\n<p>保存密码时，必须以不可逆的加密算法，或者是单向散列函数算法，加密后存储在数据库中。将明文密码经过哈希后（比如 MD5）再保存到数据库中，是目前比较普遍的做法 —— 在用户注册时就已将密码哈希后保存在数据库中，登录时验证密码的过程仅仅是验证用户提交的 “密码” 哈希值，与保存在数据库中的 “密码” 哈希值是否一致。</p>\n<p>现在黑客有可能直接通过彩虹表查询出密码明文，所以我们需要在计算密码明文的哈希值时，增加一个 “Salt”。也就是一个字符串，增加明文复杂度，并能使得彩虹表一类的攻击失败。</p>\n<h3 id=\"多因素认证\"><a class=\"anchor\" href=\"#多因素认证\">#</a> 多因素认证</h3>\n<p>除了密码外，一般还有手机验证码、数字证书、第三方证书等，将它们与密码相互结合完成认证。</p>\n<h3 id=\"session与认证\"><a class=\"anchor\" href=\"#session与认证\">#</a> Session 与认证</h3>\n<p>当认证成功后，就需要替换一个对用户透明的凭证。这个凭证就是 SessionID。</p>\n<p>当用户完成登录后，服务器会创建一个新的会话，会话中保存用户的状态和相关信息。服务器端维护所有在线用户的 Session，此时的认证，只需要知道哪个用户在浏览当前的页面即可。为了告诉服务器应该使用哪一个 Session，浏览器需要把当前用户持有的 SessionID 告知服务器。</p>\n<h2 id=\"session-fixation攻击\"><a class=\"anchor\" href=\"#session-fixation攻击\">#</a> Session Fixation 攻击</h2>\n<p>这个攻击的意思就好像 A 有一间房子，A 把房卖给了 B，A 并没有把所有的钥匙交给 B，还自己藏了一把。如果 B 没有给房换锁的话，A 仍然是可以用藏的钥匙开门的。换成登录过程就是攻击者先获取一个未认证的 SessionID，然后交给用户去认证，认证完成后，服务器并没有更新此 SessionID 的值，所以攻击者可以用此 SessionID 登录进 Y 账户。</p>\n<p>解决的方法显而易见，就是换锁，也就是登录完成后，重写 SessionID。</p>\n<h2 id=\"session-保持攻击\"><a class=\"anchor\" href=\"#session-保持攻击\">#</a> Session 保持攻击</h2>\n<p>Session 劫持攻击：攻击者窃取了用户的 SessionID, 从而能够登录进用户的账户。</p>\n<p>Session 保持攻击：通过不停地发起访问请求，让 Session 一直 “活” 下去。常见做法是在一定时间后，强制销毁 Session 或者当用户的 IP、UserAgent 等信息发生了变化时，强制销毁并要求重新登录。</p>\n<h2 id=\"单点登录single-sign-on-简称-sso\"><a class=\"anchor\" href=\"#单点登录single-sign-on-简称-sso\">#</a> 单点登录（Single Sign On 简称 SSO）</h2>\n<p>希望用户只登录一次，就可以访问所有的系统。这样可以把风险都集中在单点上，优点就是风险集中化，缺点也很明显了，如果单点被攻破，那么后果会非常严重。</p>\n<h1 id=\"访问控制\"><a class=\"anchor\" href=\"#访问控制\">#</a> 访问控制</h1>\n<p>它也就是我们常说的权限控制，广泛应用于各个系统中。都是某个主体对某个客体需要实施某种操作，而系统对这种操作的限制就是权限控制。</p>\n<p>根据访问客体的不同，我们将访问控制分为 “' 基于 URL 的访问控制 '、&quot;基于方法的访问控制&quot;、” 基于数据的访问控制 “。</p>\n<h2 id=\"垂直权限管理\"><a class=\"anchor\" href=\"#垂直权限管理\">#</a> 垂直权限管理</h2>\n<p>访问控制实际上是建立用户与权限之间的对应关系，现在广泛应用的一种方法，就是 “基于角色的访问控制”，简称 RBAC。只需要验证用户的所属的角色就可以根据角色所拥有的权限进行授权了。比如超级管理员、普通用户权限就是不同的。</p>\n<h2 id=\"水平权限管理\"><a class=\"anchor\" href=\"#水平权限管理\">#</a> 水平权限管理</h2>\n<p>在同一个角色上，系统只验证了能访问数据的角色，既没有对角色内的用户做细分，也没有对数据的子集做细分，因此缺乏一个用户到数据之间的对应关系。由于水平权限管理是系统缺乏一个数据级的访问控制所造成的，因此又可以称之为 “基于数据的访问控制”。</p>\n<h1 id=\"应用层拒绝服务攻击\"><a class=\"anchor\" href=\"#应用层拒绝服务攻击\">#</a> 应用层拒绝服务攻击</h1>\n<h2 id=\"什么是ddos\"><a class=\"anchor\" href=\"#什么是ddos\">#</a> 什么是 DDOS？</h2>\n<p>DDOS 又称为分布式拒绝服务，DDOS 本是利用合理的请求造成资源过载，导致服务不可用。当访问数量达到上线后，会形成 “僵尸网络”。</p>\n<p>我们都了解 TCP 三次握手的过程，如果不了解的话，可以看看这篇文章。</p>\n<p><a href=\"https://xqlove.xyz/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%92%8C%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/\">TCP 三次握手和四次挥手</a></p>\n<p>攻击者在 TCP 建立连接时会大量发送伪造源地址的 SYN 请求，服务器会消耗非常多的资源 (CPU 和内存）来处理这种半连接，同时还要对这些 IP 进行 SYN+ACK 重试。最后的结果是服务器无暇理财正常的连接请求，导致拒绝服务。</p>\n<h2 id=\"解决方法\"><a class=\"anchor\" href=\"#解决方法\">#</a> 解决方法</h2>\n<h4 id=\"采用syn-cookie等算法\"><a class=\"anchor\" href=\"#采用syn-cookie等算法\">#</a> 采用 SYN Cookie 等算法</h4>\n<p>SYN Cookie 的主要思想是为每一个 IP 地址分配一个 “Cookie”，并统计每个 IP 地址的访问频率。如果在短时间内收到大量的来自同一个 IP 地址的数据包，则认为受到攻击，这个 IP 地址的包将会被丢弃。</p>\n<h4 id=\"限制请求频率\"><a class=\"anchor\" href=\"#限制请求频率\">#</a> 限制请求频率</h4>\n<p>在应用中针对每个 “客户端” 做一个请求频率的限制。如果客户端的请求在一定时间内过于频繁，则对之后来自该客户端的所有请求都重定向到一个出错页面。</p>\n<h4 id=\"代码做好优化\"><a class=\"anchor\" href=\"#代码做好优化\">#</a> 代码做好优化</h4>\n<h4 id=\"验证码-2\"><a class=\"anchor\" href=\"#验证码-2\">#</a> 验证码</h4>\n<p>验证码验有效阻止自动化的行为</p>\n<h2 id=\"资源耗尽攻击\"><a class=\"anchor\" href=\"#资源耗尽攻击\">#</a> 资源耗尽攻击</h2>\n<h3 id=\"slowloris攻击\"><a class=\"anchor\" href=\"#slowloris攻击\">#</a> SlowLoris 攻击</h3>\n<p>它是 RSnake 提出的一种攻击方法，其原理是以极低的速度往服务器发送 HTTP 请求。由于 Web Server 对于并发的连接数都有一定的上限，因此若是恶意地占用住这些连接不释放，那么 Web Server 的所有连接都将被恶意连接占用，从而无法介绍新的请求，导致拒绝服务。</p>\n<p>为了保持住这个连接，RSnake 构造了一个不完整的 HTTP 请求。在正常的 HTTP 包头中，是以两个 CLRF 表示 HTTP Headers 部分结束的。而此种方法是以一个 \\r\\n 结尾，因此会认为该 HTTP Headers 部分没有结束，保持此连接不释放，继续等待完整的请求。构造多个连接后，服务器的连接数很快就会达到上限。本质是对有限资源的无限制滥用。</p>\n<h2 id=\"http-post-dos\"><a class=\"anchor\" href=\"#http-post-dos\">#</a> HTTP POST DOS</h2>\n<p>其原理是在发送 HTTP POST 包时，指定一个非常大的 Content-Length 值，然后以很低的速度发包，保持住这个连接不断开。这样客户端连接数多了以后，占用住了 Web Server 的所有可用连接，从而导致 DOS。</p>\n<p>内存泄漏则被认为是一种能够造成拒绝服务攻击的方式。</p>\n<h2 id=\"redos\"><a class=\"anchor\" href=\"#redos\">#</a> ReDos</h2>\n<p>正则表达式是基于 NFA 的，它是一个状态机，每个状态根据输入符号都可能有许多不同的下一个状态。如果遇到状态机是 a*，则 a 的数量无法确定就会造成拒绝服务攻击。</p>\n<h2 id=\"解决方法-2\"><a class=\"anchor\" href=\"#解决方法-2\">#</a> 解决方法</h2>\n<p>限制每个不可信任的资源使用者的配额。</p>\n<p>​</p>\n",
            "tags": [
                "网络",
                "基础知识扫盲",
                "网络",
                "XSS攻击",
                "CSRF攻击"
            ]
        },
        {
            "id": "https://xqlove.xyz/cookie%E3%80%81localStorage%E3%80%81sessionStorage/",
            "url": "https://xqlove.xyz/cookie%E3%80%81localStorage%E3%80%81sessionStorage/",
            "title": "cookie、localStorage、sessionStorage",
            "date_published": "2021-01-12T02:46:16.000Z",
            "content_html": "<h1 id=\"cookie\"><a class=\"anchor\" href=\"#cookie\">#</a> cookie</h1>\n<h2 id=\"cookie是什么\"><a class=\"anchor\" href=\"#cookie是什么\">#</a> cookie 是什么</h2>\n<p>它是存储在浏览器上的一小段数据，用来记录某些当页面关闭或者刷新后依然需要记录的信息。在控制台可以用<strong> document.cookie</strong> 查看当前正在浏览的网站的 cookie</p>\n<h2 id=\"设置cookie方式\"><a class=\"anchor\" href=\"#设置cookie方式\">#</a> 设置 cookie 方式</h2>\n<p>cookie 可以使用 js 在浏览器直接设置（用于记录不敏感信息，如用户名），也可以在服务端通过使用 HTTP 协议规定的<strong> set-cookie</strong> 来让浏览器种下 cookie（常用的方法）</p>\n<p>每次网络请求 Request headers 中都会带上 cookie。所以会影响传输效率。</p>\n<p>cookie 最大容量为 4kb，所以大量数据不要存的 cookie</p>\n<h2 id=\"cookie参数\"><a class=\"anchor\" href=\"#cookie参数\">#</a> cookie 参数</h2>\n<ul>\n<li><code>XName</code> ：这个  <code>Cookie</code>  的名称，一旦被设置则无法再被改变；</li>\n<li><code>Value</code> ：代表了这个  <code>Cookie</code>  的值；</li>\n<li><code>Domain</code> ：可以访问这个  <code>Cookie</code>  的域名；</li>\n<li><code>Max Age</code> ：这个  <code>Cookie</code>  失效的时间，单位为秒。如果设置为正数则代表 X 秒后失效，如果设置为负数则代表关闭浏览器后失效；</li>\n<li><code>Path</code> ：可以访问这个  <code>Cookie</code>  的路径，如  <code>/</code>  则表示根下所有都可访问，如  <code>/path</code>  则仅为  <code>path</code>  下的所有路径可以访问这个 <code>Cookie</code> ；</li>\n<li><code>Size</code> ：这个  <code>Cookie</code>  的大小</li>\n<li><code>HTTP</code> ：如果为  <code>true</code> ，则只有 HTTP 头中才会携带这个  <code>Cookie</code>  的信息，而不能通过  <code>document.cookie</code>  去获取；</li>\n<li><code>Secure</code> ：表示这个  <code>Cookie</code>  是否使用安全协议进行传输。</li>\n</ul>\n<h2 id=\"cookie优缺点\"><a class=\"anchor\" href=\"#cookie优缺点\">#</a> cookie 优缺点</h2>\n<ul>\n<li>提供了方便，分担了服务器存储的负担。</li>\n<li>通过加密和安全传输技术（SSL），减少 cookie 被破解的可能性。</li>\n<li>控制 cookie 的生命期，使之不会永远有效。偷盗者很可能拿到一个过期的 cookie。</li>\n<li>每个特定的域名下最多生成<strong> 20</strong> 个 cookie,IE 和 Opera 会清理近期最少使用的 cookie，Firefox 会随机清理 cookie。</li>\n<li>安全性问题。如果 cookie 被人拦截了，那人就可以取得所有的 session 信息。即使加密也与事无补，因为拦截者并不需要知道 cookie 的意义，他只要原样转发 cookie 就可以达到目的了。</li>\n</ul>\n<h1 id=\"localstorage浏览器本地存储\"><a class=\"anchor\" href=\"#localstorage浏览器本地存储\">#</a> localStorage（浏览器本地存储）</h1>\n<ul>\n<li>localStorage HTML5 本地存储 web storage 特性的 API 之一，用于将大量数据（最大 5M）保存在浏览器中，保存后数据永远存在不会失效过期，除非用 js 手动清除。</li>\n<li>不参与网络传输。</li>\n<li>一般用于性能优化，可以保存图片、js、css、html 模板、大量数据。</li>\n</ul>\n<h1 id=\"sessionstorage浏览器本地存储登录的显示\"><a class=\"anchor\" href=\"#sessionstorage浏览器本地存储登录的显示\">#</a> sessionStorage（浏览器本地存储，登录的显示）</h1>\n<ul>\n<li>用户在输入用户名和密码提交给服务器端，服务器端验证通过后会创建一个 session 用于记录用户的相关信息，这个 session 可保存在服务器内存中，也可保存在数据库中。</li>\n<li>创建 session 后，会把关联的 session_id 通过 setCookie 添加到 http 响应头部中。</li>\n<li>浏览器在加载页面时发现响应头部有 set-cookie 字段，就把这个 cookie 种到浏览器指定域名下。</li>\n<li>当下次刷新页面时，发送的请求会带上这条 cookie， 服务端在接收到后根据这个 session_id 来识别用户。</li>\n<li>cookie 是存储在浏览器里的一小段「数据」，而 session 是一种让服务器能识别某个用户的「机制」，session 在实现的过程中需要使用 cookie。当然有时候说到 session 也指服务器里创建的那个和用户身份关联的对象。</li>\n</ul>\n<h1 id=\"cookiessessionstorage-和-localstorage-的区别\"><a class=\"anchor\" href=\"#cookiessessionstorage-和-localstorage-的区别\">#</a> cookies，sessionStorage 和 localStorage 的区别？</h1>\n<ul>\n<li><code>Cookie</code>  的大小只有 4KB 左右，而  <code>Storage</code>  可以存储 5MB 的数据；</li>\n<li><code>Cookie</code>  可以被携带在 HTTP 请求头中，而  <code>Storage</code>  则不会参与和服务器端的通信；</li>\n<li><code>Cookie</code>  需要程序员自己封装，且对原生接口不友好，而  <code>Storage</code>  可以接受原生接口且可以对其进一步封装以对  <code>Array</code>  和  <code>Object</code>  有更好的支持；</li>\n<li><code>Cookie</code>  一般由服务器生成，可以设置失效时间，如果在浏览器端生成了  <code>Cookie</code>  则会保持到关闭浏览器，相比之下  <code>Storage</code>  的存储时间更久一些。</li>\n<li>有效时间\n<ul>\n<li>localStorage 存储<strong>持久数据</strong>，浏览器关闭后数据<strong>不丢失</strong>除非主动删除数据；</li>\n<li>sessionStorage 是会话级别的存储，数据在当前浏览器窗口关闭或会话关闭后<strong>自动删除</strong>。</li>\n<li>cookie 设置的 cookie<strong> 过期时间</strong>之前一直有效，即使窗口或浏览器关闭</li>\n</ul>\n</li>\n<li>作用域不同\n<ul>\n<li>sessionStorage<strong> 不在不同</strong>的浏览器<strong>窗口</strong>中共享，即使是同一个页面；localStorage 在所有同源窗口中都是<strong>共享</strong>的；cookie 也是在所有同源窗口中都是共享的。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"cookie-和session-的区别\"><a class=\"anchor\" href=\"#cookie-和session-的区别\">#</a> cookie 和 session 的区别：</h1>\n<p>1、<strong>cookie</strong> 数据存放在客户的<strong>浏览器</strong>上，<strong>session</strong> 数据放在<strong>服务器</strong>上。</p>\n<p>2、cookie 不是很安全，别人可以分析存放在本地的<strong> cookie</strong> 并进行<strong> cookie</strong> 欺骗</p>\n<p>考虑到安全应当使用 session。</p>\n<p>3、session 会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能，</p>\n<p>考虑到减轻服务器性能方面，应当使用<strong> cookie</strong>。</p>\n<p>4、单个 cookie 保存的数据不能超过 4K，很多浏览器都限制一个站点最多保存 20 个 cookie。</p>\n<h1 id=\"跨域问题\"><a class=\"anchor\" href=\"#跨域问题\">#</a> 跨域问题</h1>\n<p>Stroage 不可以跨域，但是可以通过 Promessage+iframe 跨域</p>\n",
            "tags": [
                "网络",
                "基础知识扫盲",
                "状态管理"
            ]
        },
        {
            "id": "https://xqlove.xyz/%E5%9B%BE%E8%A7%A3http/",
            "url": "https://xqlove.xyz/%E5%9B%BE%E8%A7%A3http/",
            "title": "图解http",
            "date_published": "2021-01-08T01:22:01.000Z",
            "content_html": "<h1 id=\"网络基础\"><a class=\"anchor\" href=\"#网络基础\">#</a> 网络基础</h1>\n<h2 id=\"tcpip模型有几层分别是osi模型有几层分别是作用是\"><a class=\"anchor\" href=\"#tcpip模型有几层分别是osi模型有几层分别是作用是\">#</a> TCP/IP 模型有几层分别是，OSI 模型有几层分别是？作用是？</h2>\n<p>TCP/IP 模型有四层，分别是应用层、传输层、网络层、链路层。</p>\n<p>OSI 模型有七层，分别是应用层、表示层、会话层、传输层、网络层、数据链路层、物理层。</p>\n<p>OSI（参考模型）：将通信功能划分为 7 个分层。</p>\n<p>应用层：为应用程序提供服务并规定应用程序中通信相关的细节。包括文件传输（FTP21 端口）、电子邮件、远程登录（TELNET23 端口与 SSH22 端口）等协议还有异常处理。<span style=\"color:red\">HTTP 协议 80 端口、HTTPS 协议 443 端口、DNS</span></p>\n<p>表示层：将应用处理的信息转换为适合网络传输的格式，或将下层的数据转换成上层能够处理的格式。（主要负责数据格式的转换）<span style=\"color:red\">HTML 协议</span></p>\n<p>会话层：负责建立和断开通信连接，以及数据的分割等数据传输相关的管理（何时建立链接、何时发送数据、决定采用何种连接方法，首部记录数据传送顺序中的信息）。</p>\n<p>传输层：起着可靠传输的作用。只在通信双方节点上进行处理，无需在路由器上处理。（负责建立连接、断开连接、在两个主机之间创建逻辑上的通信连接）<span style=\"color:red\">TCP、UDP 协议</span></p>\n<p>网络层：将数据传输到目标地址。目标地址可以是多个网络通过路由器连接而成的某一个地址。（主要负责寻址和路由选择、将数据从发送端主机传送到接收端主机）<span style=\"color:red\">IP 协议面向无连接、ARP</span></p>\n<p>数据链路层：负责物理层面上互联的、节点之间的通信传输（在这些通过传输介质互连的设备之间使用地址实现传输）</p>\n<p>物理层：负责 0、1 比特流与电压的高低、光的闪灭之间的互换</p>\n<h2 id=\"http-tcp-ip-dns-arp协议\"><a class=\"anchor\" href=\"#http-tcp-ip-dns-arp协议\">#</a> HTTP TCP IP DNS  ARP 协议</h2>\n<p>接口：上下层之间进行交互时所遵循的约定叫做 “接口”。</p>\n<p>协议：同一层之间的交互所遵循的约定叫做 “协议”。</p>\n<p>TCP 位于传输层，提供可靠的字节流服务，就是说 TCP 为了更容易的传输大数据将大数据分割成报文段为单位的数据包，并能够确认数据最终是否送达对方。</p>\n<p>IP 协议</p>\n<ul>\n<li>\n<p>属于网络层，是把各种数据包传送给对方（包括两个重要条件 IP 地址和 MAC 地址，前者是指名了节点被分配到的地址，后者指网卡所属的固定地址）。</p>\n</li>\n<li>\n<p>IP 地址由网络标识和主机标识两部分组成。网段不同则网络标识需不同，主机标识在同一网段下是必须不同的。例如：19.168.128.（网络表示）10 （主机标识）  /24（表示从头数第几位为止属于网络标识）</p>\n</li>\n<li>\n<p>IP 地址分类：</p>\n<ul>\n<li>\n<p>A 类 1-8 位为网络标识</p>\n</li>\n<li>\n<p>B 类 1-16 位为网络标识</p>\n</li>\n<li>\n<p>C 类 1-24 位为网络标识</p>\n</li>\n<li>\n<p>D 类 1-32 位为网络标识</p>\n</li>\n<li>\n<p>不可以全部为 0 或 1</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>DNS 属于应用层，提供通过域名查找对应的 IP 地址，或者逆向 3 从地址反查域名的服务。</p>\n<p>ARP 在 TCP/IP 模型中属于网络层，在 OSI 模型中属于数据链路层，是一种用以解析地址的协议，知道通信双方的 IP 地址后，可以反查出 MAC 地址。</p>\n<h2 id=\"tcp-ip-dns协议在http通信的过程中发挥了哪些作用\"><a class=\"anchor\" href=\"#tcp-ip-dns协议在http通信的过程中发挥了哪些作用\">#</a> TCP IP DNS 协议在 HTTP 通信的过程中发挥了哪些作用？</h2>\n<p><img data-src=\"https://cloud-img-1301075855.cos.ap-chengdu.myqcloud.com/xin/http%E9%80%9A%E4%BF%A1%E8%BF%87%E7%A8%8B.png\" alt=\"\" /></p>\n<h2 id=\"在网页的浏览器中输入url的时候web页面是如何呈现的\"><a class=\"anchor\" href=\"#在网页的浏览器中输入url的时候web页面是如何呈现的\">#</a> 在网页的浏览器中输入 URL 的时候，Web 页面是如何呈现的？</h2>\n<p>假设我们访问的是 <code>http://www.baidu.com</code>  这个地址，按下 ENTER 键后，我们可以看到百度首页面。</p>\n<p><strong>首先我们要知道：</strong></p>\n<ul>\n<li>百度页面并没有在我们自己的客户端本地，我们是输入地址后，才请求过来的</li>\n<li>输入不同的域名可以看到不同的页面</li>\n<li>有的网址是 https，有的是 http（也有的是 ftp）</li>\n<li>需要客户端联网才能完成这些事情</li>\n</ul>\n<p><strong>都经历哪些事情？</strong></p>\n<ul>\n<li>Request 请求阶段</li>\n</ul>\n<ol>\n<li>首先根据客户端输入的域名，到 DNS 服务器上进行反解析（通过域名找到对应服务器的外网 IP）</li>\n<li>通过找到的外网 IP，找到对应的服务器</li>\n<li>通过在地址栏中输入的端口号（没输入是因为不同协议有自己默认端口号）找到服务器上发布的对应的项目</li>\n</ol>\n<ul>\n<li>Response 响应阶段</li>\n</ul>\n<ol start=\"4\">\n<li>服务器获取到去请求资源文件的地址 <code>例如：/stu/index.html</code> ，把资源文件中的 ** <code>源代码</code>  ** 找到</li>\n<li>服务器端会把找到的源代码返回给客户端（通过 HTTP 等传输协议返回的）</li>\n</ol>\n<ul>\n<li>浏览器自主渲染阶段</li>\n</ul>\n<ol start=\"6\">\n<li>客户端接收到源代码后，会交给浏览器的内核（渲染引擎）进行渲染，最后由浏览器绘制出对应的页面</li>\n</ol>\n<h2 id=\"dns介绍\"><a class=\"anchor\" href=\"#dns介绍\">#</a> DNS 介绍</h2>\n<h3 id=\"产生的原因\"><a class=\"anchor\" href=\"#产生的原因\">#</a> 产生的原因</h3>\n<p>由于 IP 地址不便记忆，所以产生了一个可以有效管理主机名和 IP 地址之间对应关系的系统，就是 DNS 系统。</p>\n<h3 id=\"域名的构成\"><a class=\"anchor\" href=\"#域名的构成\">#</a> 域名的构成</h3>\n<p>域名是为了识别主机名称和组织机构名称的一种具有分层的名称。由几个英文字母用点号连接构成。</p>\n<h3 id=\"域名服务器\"><a class=\"anchor\" href=\"#域名服务器\">#</a> 域名服务器</h3>\n<p>域名服务器是指管理域名的主机和相应的软件，它可以管理所在分层的域的相关信息。</p>\n<p>各个域的分层上，都设有各自的域名服务器，各层域名服务器都了解该层以下分层中所有域名服务器的 IP 地址。因此它们从根域名服务器开始呈树状结构相互链接。从根域名开始按照顺序追踪，可以访问世界上所有域名服务器的地址。</p>\n<p>根部所设置的 DNS 叫做根域名服务器。它对 DNS 的检索数据功能起着至关重要的作用。</p>\n<p>一般为了提高容灾能力，会设置至少两个以上的域名服务器。</p>\n<h3 id=\"解析器\"><a class=\"anchor\" href=\"#解析器\">#</a> 解析器</h3>\n<p>进行 DNS 查询的主机和软件叫做 DNS 解析器。用户所使用的工作站或个人电脑都属于解析器。</p>\n<h3 id=\"dns查询\"><a class=\"anchor\" href=\"#dns查询\">#</a> DNS 查询</h3>\n<ol>\n<li>解析器为了调查 IP 地址，向域名服务器进行查询处理。</li>\n<li>接收查询请求的域名服务器首先会在自己的数据库进行查找，如果有该域名所对应的 IP 地址就返回，如果没有，则域名服务器再向上一层根域名服务器进行查询。</li>\n<li>从根开始对这棵树按照顺序进行遍历，直到找到指定的域名服务器。</li>\n<li>解析器和域名服务器将最新了解到的信息暂时保存在缓存里。</li>\n</ol>\n<h2 id=\"在搭项目的时候发现一个问题localhost和本机ip以及network有什么区别\"><a class=\"anchor\" href=\"#在搭项目的时候发现一个问题localhost和本机ip以及network有什么区别\">#</a> 在搭项目的时候发现一个问题，localhost 和本机 IP 以及 network 有什么区别？</h2>\n<h3 id=\"首先我们需要扫盲一下内网和外网\"><a class=\"anchor\" href=\"#首先我们需要扫盲一下内网和外网\">#</a> 首先我们需要扫盲一下内网和外网</h3>\n<h4 id=\"什么是内网ip\"><a class=\"anchor\" href=\"#什么是内网ip\">#</a> 什么是内网 IP?</h4>\n<p>内网（局域网：几倍相同的 DNS 和默认网关，并且由相同的路由器下发的 IP [可以理解为连接同一个 wifi，但不是很准确]），限定在一定区域内访问的。</p>\n<h4 id=\"什么是外网ip\"><a class=\"anchor\" href=\"#什么是外网ip\">#</a> 什么是外网 IP？</h4>\n<p>外网不管是不是在同一个网段，用户都可以通过外网 IP 访问到你的服务器，但是一般我们会在服务器上做处理，禁止直接通过 IP 访问。</p>\n<h4 id=\"区别\"><a class=\"anchor\" href=\"#区别\">#</a> 区别</h4>\n<p>127.0.0.1：127.0.0.1 一般分配给 loopback 接口。loopback 是个特殊的网络接口（可理解为虚拟网卡），用于本机各个应用之间的网络交互。只要操作系统的网络组件正常，loopback 就能工作，不联网 ，网卡传输，受防火墙和网卡限制 ，本机访问 。</p>\n<p>network：一般是指当前主机分配的网络。</p>\n<p>localhost：localhost 首先是一个域名（如同：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5iYWlkdS5jb20=\">www.baidu.com</span>），也是本机地址，它可以被配置为任意的 IP 地址（也就是说，可以通过 hosts 这个文件进行更改的），不过通常情况下都指向：IPv4：表示   127.0.0.1，整个 127.* 网段通常被用作 loopback 网络接口的默认地址，按照惯例通常设置为 127.0.0.1。我们当前这个主机上的这个地址，别人不能访问，即使访问，也是访问自己。不联网 ，不使用网卡，不受防火墙和网卡限制 ，本机访问 。</p>\n<p>本机 IP：指的是本机物理网卡所绑定的网络协议地址，一般指 ipv4 协议。联网 ，网卡传输 ，受防火墙和网卡限制 ，本机或外部访问。</p>\n<h2 id=\"url-uri-urn\"><a class=\"anchor\" href=\"#url-uri-urn\">#</a> URL、URI、URN</h2>\n<p>URI：统一资源标识符（可以访问在互联网上任意位置的资源）</p>\n<p>URL：统一资源路径地址</p>\n<p>URN：统一资源名称</p>\n<p>URI=URL + URN</p>\n<p>一个完整的 URL 包含很多部分： <code>http://www.html5train.com/stu/index.html?name=zf&amp;age=9&amp;teacher=zxt#good</code> （传输协议、域名、端口号、请求资源文件的路径名称、问号传参、hash）</p>\n<h2 id=\"tcp和udp的特点-区别\"><a class=\"anchor\" href=\"#tcp和udp的特点-区别\">#</a> TCP 和 UDP 的特点、区别</h2>\n<p>TCP：面向有连接的、可靠的流协议，并具备顺序控制、重发控制等机制，也就是说可以确保发送的顺序，但还是犹如没有任何间隔的数据流发送给客户端。</p>\n<p>UDP：面向无连接的、可以确保发送信息的大小，但是不能确保信息一定能到达，如何在传输的过程中顺序打乱或者丢失是无法处理的，主要用于那些对高速传输且实时性要求较高的通信或广播。</p>\n<h2 id=\"tcp三次握手和四次挥手\"><a class=\"anchor\" href=\"#tcp三次握手和四次挥手\">#</a> TCP 三次握手和四次挥手</h2>\n<p>由于这篇文章详细的讲解了 TCP 三次握手和四次挥手的过程，以及一些需要注意的问题，这里就不再赘述了，感兴趣的小伙伴们可以看看这篇文章。</p>\n<p><a href=\"https://xqlove.xyz/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%92%8C%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/TCP\">TCP 三次握手和四次挥手</a></p>\n<h1 id=\"http10http1xhttp20\"><a class=\"anchor\" href=\"#http10http1xhttp20\">#</a> HTTP1.0/HTTP1.x/HTTP2.0</h1>\n<p>HTTP 协议是不保存状态的，比如商城的登录状态保持，也就是单点登录，我们需要借助 cookie（用户识别和状态管理）来实现。</p>\n<p>如图所示：</p>\n<p><img data-src=\"https://cloud-img-1301075855.cos.ap-chengdu.myqcloud.com/xin/cookie.png\" alt=\"\" /></p>\n<p>对 cookie、localStorage、sessionStorage 不了解的，可以看一下这一篇文章。</p>\n<p><a href=\"http://xqlove.xyz/cookie%E3%80%81localStorage%E3%80%81sessionStorage/\">cookie、localStorage、sessionStorage</a></p>\n<h2 id=\"http支持的方法\"><a class=\"anchor\" href=\"#http支持的方法\">#</a> HTTP 支持的方法</h2>\n<p><img data-src=\"https://cloud-img-1301075855.cos.ap-chengdu.myqcloud.com/xin/http%E6%94%AF%E6%8C%81%E7%9A%84%E6%96%B9%E6%B3%95.png\" alt=\"\" /></p>\n<p>**HTTP/1.0：** 进行一次 HTTP 请求都要断开一次 HTTP 连接，一次 TCP 链接只能发送一次请求和交互。</p>\n<p><strong>HTTP/1.1</strong>：持久链接，节省通行量，比如在访问图片的时候，不用进行多次通信。建立一次 TCP 链接后，可以发送多次请求和响应的交互。持久链接使得多数请求以管线化方式发送称为可能。从前发送一个请求需等待并接受到响应，才能发送下一个请求。管线化，不用等待响应亦可发送下一个请求。</p>\n<p>这样可同时并行发送多个请求，而不需要一个接一个地等待响应了。</p>\n<h5 id=\"http1x存在的问题\"><a class=\"anchor\" href=\"#http1x存在的问题\">#</a> HTTP/1.X：存在的问题</h5>\n<ul>\n<li>\n<p>线头阻塞：TCP 连接上只能发送一个请求，前面的请求未完成前，后续的请求都在排队等待。</p>\n</li>\n<li>\n<p>多个 TCP 连接<br />\n虽然 HTTP/1.1 管线化可以支持请求并发，但是浏览器很难实现，chrome、firefox 等都禁用了管线化。所以 1.1 版本请求并发依赖于多个 TCP 连接，建立 TCP 连接成本很高，还会存在慢启动的问题</p>\n</li>\n<li>\n<p>头部冗余，采用文本格式</p>\n<p>HTTP/1.X 版本是采用文本格式，首部未压缩，而且每一个请求都会带上 cookie、user-agent 等完全相同的首部。</p>\n</li>\n<li>\n<p>客户端需要主动请求</p>\n</li>\n</ul>\n<p><strong>HTTP/2.0:</strong></p>\n<ul>\n<li>\n<p>HTTP2 性能提升的核心就在于二进制分帧层。HTTP2 是二进制协议，他采用二进制格式传输数据而不是 1.x 的文本格式。一条 HTTP 响应，划分成了两个帧来传输，HEAD 和 DATE。</p>\n</li>\n<li>\n<p>头部压缩也是 HTTP2 的一大亮点。在 1.X 版本中，首部用文本格式传输，通常会给每个传输增加 500-800 字节的开销。现在打开一个网页上百个请求已是常态，而每个请求带的一些首部字段都是相同的，例如 cookie、user-agent 等。HTTP2 为此采用 HPACK 压缩格式来压缩首部。头部压缩需要在浏览器和服务器端之间：</p>\n<ul>\n<li>维护一份相同的静态字典，包含常见的头部名称，以及常见的头部名称和值的组合</li>\n<li>维护一份相同的动态字典，可以动态的添加内容</li>\n<li>通过静态 Huffman 编码对传输的首部字段进行编码</li>\n</ul>\n</li>\n<li>\n<p>服务器端推送</p>\n<p>服务器端推送使得服务器可以预测客户端需要的资源，主动推送到客户端。<br />\n例如：客户端请求 index.html，服务器端能够额外推送 script.js 和 style.css。 实现原理就是客户端发出页面请求时，服务器端能够分析这个页面所依赖的其他资源，主动推送到客户端的缓存，当客户端收到原始网页的请求时，它需要的资源已经位于缓存。</p>\n</li>\n</ul>\n<h1 id=\"http报文中的http信息\"><a class=\"anchor\" href=\"#http报文中的http信息\">#</a> HTTP 报文中的 http 信息</h1>\n<h2 id=\"http报文\"><a class=\"anchor\" href=\"#http报文\">#</a> HTTP 报文</h2>\n<p>用于 HTTP 协议交互的信息被称为 HTTP 报文。请求端（客户端）的 HTTP 报文叫做请求报文，响应端（服务器端）的叫做响应报文，报文本身是由多行（用 CR+LF 作换行符）数据构成的字符串文本。</p>\n<p>HTTP 报文大致可分为报文首部和报文主体两块。两者由最初出现的空行（CR+LF）来划分，通常并不一定要出现报文主体。</p>\n<p><img data-src=\"https://cloud-img-1301075855.cos.ap-chengdu.myqcloud.com/xin/Snipaste_2021-01-08_15-42-24.png\" alt=\"\" /></p>\n<p>请求报文的首部：</p>\n<ul>\n<li>请求行：包含用于请求的方法发，请求 URI 和 HTTP 版本</li>\n<li>请求首部字段</li>\n<li>通用首部字段</li>\n<li>实体首部字段</li>\n<li>其他</li>\n</ul>\n<p>响应报文的首部：</p>\n<ul>\n<li>状态行：包含表明响应结果的状态码，原因短语和 HTTP 版本</li>\n<li>响应首部字段</li>\n<li>通用首部字段</li>\n<li>实体首部字段</li>\n<li>其他</li>\n</ul>\n<p>报文：是 HTTP 通信中的基本单位，由 8 位组字节流组成，通过 HTTP 通信传输</p>\n<p>实体：作为请求或响应的有效载荷数据被传输，其内容由实体首部和实体主体组成</p>\n<p>HTTP 报文的主体用于传输请求或响应的实体主体。通常报文主体等于实体主体。只有在传输中进行编码操作时，实体主体的内容发生变化，才导致它和报文主体产生差异。</p>\n<h1 id=\"状态码\"><a class=\"anchor\" href=\"#状态码\">#</a> 状态码</h1>\n<p>作用：像客户端告知服务器返回的结果。</p>\n<p><img data-src=\"https://cloud-img-1301075855.cos.ap-chengdu.myqcloud.com/xin/%E7%8A%B6%E6%80%81%E7%A0%81%E7%B1%BB%E5%88%AB.png\" alt=\"\" /></p>\n<p>204：从客户端往服务器发送信息，而对客户端不需要发送新信息内容的情况下使用</p>\n<p>206：客户端进行了范围请求，服务器成功执行</p>\n<p>301：永久性重定向</p>\n<p>302：临时重定向</p>\n<p>303：临时重定向，客户端应当采用 GET 方法获取资源</p>\n<p>304：客户端发送附带条件的请求时，服务端允许请求访问资源，但未满足条件</p>\n<p>307：临时重定向，不会从 POST 变为 GET</p>\n<p>400：请求报文中存在错误语法</p>\n<p>401：需要 HTTP 认证，若之前认证过此次则表示认证失败</p>\n<p>403：请求资源的方位被服务器拒绝了</p>\n<p>404：无法找到请求的资源</p>\n<p>500：服务器端在执行请求时发生了错误</p>\n<p>503：服务器超载或者正在停机维护</p>\n<h1 id=\"http首部\"><a class=\"anchor\" href=\"#http首部\">#</a> HTTP 首部</h1>\n<h2 id=\"http报文首部\"><a class=\"anchor\" href=\"#http报文首部\">#</a> HTTP 报文首部</h2>\n<p>HTTP 协议的请求和响应报文中必定包含 HTTP 首部。首部内容为客户端和服务器分别处理请求和响应提供所需要的信息。</p>\n<p>HTTP 请求报文由方法、URI、HTTP 版本、（这三个包含在请求行）HTTP 首部字段等部分构成。</p>\n<p>HTTP 响应报文由 HTTP 版本、状态码 [数字和原因短语]（这两个部分包含在状态行）、HTTP 首部字段 3 部分组成。</p>\n<h2 id=\"http首部字段\"><a class=\"anchor\" href=\"#http首部字段\">#</a> HTTP 首部字段</h2>\n<p>首部字段名：字段值</p>\n<h3 id=\"4种http首部字段类型\"><a class=\"anchor\" href=\"#4种http首部字段类型\">#</a> 4 种 HTTP 首部字段类型</h3>\n<ul>\n<li>通用首部字段：请求报文和响应报文都会使用的字段</li>\n<li>请求首部字段：从客户端向服务器端发送请求报文时使用的首部。补充了请求的附加内容、客户端信息、响应内容相关优先级等信息。</li>\n<li>响应首部字段：从服务器端向客户端返回响应报文时使用的首部。</li>\n<li>实体首部字段：针对请求报文和响应报文的实体部分使用的首部。</li>\n</ul>\n<h4 id=\"常见通用首部字段\"><a class=\"anchor\" href=\"#常见通用首部字段\">#</a> 常见通用首部字段</h4>\n<h5 id=\"cache-control-指令\"><a class=\"anchor\" href=\"#cache-control-指令\">#</a> Cache-Control ： 指令</h5>\n<p>控制缓存的行为，指令参数是可选的，多个指令之间通过 “,” 分割</p>\n<ul>\n<li>\n<p>public：表明可向任意方提供响应的缓存</p>\n</li>\n<li>\n<p>private ：响应只以特定的用户作为对象</p>\n</li>\n<li>\n<p>no-cache：防止从缓存中返回过期的资源。</p>\n<ul>\n<li>请求中包含该指令：客户端将不会接收缓存过的响应，所以‘中间’的缓存服务器必须把客户端请求转发给源服务器。</li>\n<li>响应中包含该指令：缓存服务器不能对资源进行缓存，源服务器也不会对缓存服务器请求中提出的资源有效性进行确认。</li>\n</ul>\n</li>\n<li>\n<p>no-store：暗示请求或响应中的机密信息，缓存不能在本地存储请求或响应中的任一部分。</p>\n</li>\n<li>\n<p>max-age：保存为缓存的最长时间，也就是过期时间</p>\n</li>\n<li>\n<p>max-stale：即使过期但仍处于这个时间内则仍是可用的缓存</p>\n</li>\n</ul>\n<h5 id=\"connection\"><a class=\"anchor\" href=\"#connection\">#</a> Connection</h5>\n<ul>\n<li>\n<p>Connection：不再转发的首部字段 （控制不再转发给代理的首部字段）</p>\n<p>例如：Connection：Upgrade 需要删除 Upgrade 首部字段再转发</p>\n</li>\n<li>\n<p>HTTP/1.1 版本的默认链接都是持久链接，用户可在持久链接上连续发送请求，该首部字段可以管理持久链接</p>\n<p>例如：Connection：close（这下客户端 A 小姐和服务器 B 先生的关系彻底结束了）要想破镜重圆则需要设置</p>\n<p>Connection：Keep-Alive</p>\n</li>\n</ul>\n<h5 id=\"via\"><a class=\"anchor\" href=\"#via\">#</a> Via</h5>\n<p>追踪客户端和服务器端请求和响应报文的传输路径。</p>\n<p>报文经过代理或网关时，会在 Via 字段附加该服务器的信息，然后再转发，还可以避免请求回环的发生。</p>\n<p><img data-src=\"https://cloud-img-1301075855.cos.ap-chengdu.myqcloud.com/xin/Snipaste_2021-01-08_19-37-07.png\" alt=\"\" /></p>\n<h4 id=\"常见请求首部字段\"><a class=\"anchor\" href=\"#常见请求首部字段\">#</a> 常见请求首部字段</h4>\n<h5 id=\"accept\"><a class=\"anchor\" href=\"#accept\">#</a> Accept</h5>\n<p>通知服务器用户代理能够处理的媒体类型以媒体类型的相对优先级</p>\n<h5 id=\"accept-charset\"><a class=\"anchor\" href=\"#accept-charset\">#</a> Accept-Charset</h5>\n<p>通知服务器用户代理支持的字符集</p>\n<h5 id=\"accept-encoding\"><a class=\"anchor\" href=\"#accept-encoding\">#</a> Accept-Encoding</h5>\n<p>通知服务器用户代理支持的内容编码及内容编码的优先级顺序</p>\n<h5 id=\"accept-languages\"><a class=\"anchor\" href=\"#accept-languages\">#</a> Accept-Languages</h5>\n<p>通知服务器用户代理支持的自然语言</p>\n<h5 id=\"authorization\"><a class=\"anchor\" href=\"#authorization\">#</a> Authorization</h5>\n<p>通知服务器，用户代理的认证信息</p>\n<h5 id=\"from\"><a class=\"anchor\" href=\"#from\">#</a> From</h5>\n<p>通知服务器，使用用户代理的用户的电子邮件地址</p>\n<h5 id=\"host必须被包含在请求内的首部字段\"><a class=\"anchor\" href=\"#host必须被包含在请求内的首部字段\">#</a> Host (必须被包含在请求内的首部字段)</h5>\n<p>告知服务器，请求的资源所处的互联网的主机名和端口号</p>\n<p><strong>这里需要解释一下，为什么 host 是必须的首部字段呢？</strong></p>\n<p>请求被发送至服务器时，请求中的主机名会用 IP 地址直接替换解决。但是如果相同的 IP 地址下部署着多个域名，服务器就找不到是哪个域名对应的请求，因此我们需要在 Host 中写上主机名，也就是请求对应的域名。</p>\n<p>如图所示：</p>\n<p><img data-src=\"https://cloud-img-1301075855.cos.ap-chengdu.myqcloud.com/xin/Snipaste_2021-01-08_19-14-18.png\" alt=\"\" /></p>\n<h5 id=\"refer\"><a class=\"anchor\" href=\"#refer\">#</a> Refer</h5>\n<p><img data-src=\"https://cloud-img-1301075855.cos.ap-chengdu.myqcloud.com/xin/Snipaste_2021-01-08_19-20-39.png\" alt=\"\" /></p>\n<p>告知服务器请求的原始资源的 URL</p>\n<p>客户端一般都会发送 Refer 给服务器，但当直接在浏览器输入 URL 时，为了安全考虑（URL 中可能含有 ID 和密码等），一般不发送。</p>\n<h4 id=\"常见响应首部字段\"><a class=\"anchor\" href=\"#常见响应首部字段\">#</a> 常见响应首部字段</h4>\n<h5 id=\"age\"><a class=\"anchor\" href=\"#age\">#</a> Age</h5>\n<p>告知客户端，源服务器在多久前创建了响应，若是缓存服务器，则指的是缓存后的响应再次认证到认证完成所需要的事件，代理创建响应时必须添加。</p>\n<h5 id=\"etag\"><a class=\"anchor\" href=\"#etag\">#</a> ETag</h5>\n<p>告知客户端实体标识。可将资源做唯一字符串标识，服务器会给每一份资源都分配 ETag，例如当资源的 URI 相同时，中文版和英文版对应的资源时不同的，ETag 也是不同的。</p>\n<ul>\n<li>强 ETag：无论实体发生多么细微的变化都会改变其值</li>\n<li>弱 ETag：用于提示资源是否相同，只有资源发生根本性改变 ETag 才会改变。</li>\n</ul>\n<h5 id=\"location\"><a class=\"anchor\" href=\"#location\">#</a> Location</h5>\n<p>告知客户端，浏览的页面已经被转移，将响应接收方引导至某个与请求 URL 位置不同的资源。可以理解为重定向到另一个 URL，一般都会强制性的访问 Location 提供的 URL 资源。</p>\n<h5 id=\"server\"><a class=\"anchor\" href=\"#server\">#</a> Server</h5>\n<p>告知客户端，当前服务端安装的 HTTP 服务器应用程序的信息，如软件应用程序信息、版本号、安装时启动项</p>\n<p>Server：Apache/2.2.6(Unix)  PHP/5.2.5</p>\n<h4 id=\"常见实体首部字段\"><a class=\"anchor\" href=\"#常见实体首部字段\">#</a> 常见实体首部字段</h4>\n<h5 id=\"allow\"><a class=\"anchor\" href=\"#allow\">#</a> Allow</h5>\n<p>通知客户端，能够支持的所有 Request-URL 指定资源的所有 HTTP 方法，若接收到服务器不支持的方法时，返回 405，并且把能够支持的方法返回。</p>\n<h5 id=\"content-type\"><a class=\"anchor\" href=\"#content-type\">#</a> Content-Type</h5>\n<p>说明实体主体内对象的媒体类型</p>\n<h5 id=\"expires\"><a class=\"anchor\" href=\"#expires\">#</a> Expires</h5>\n<p>告知客户端资源的失效日期，一般接收到该字段，会以缓存来应答，在该时间之前，响应的副本会一直保存。当超过该时间时，缓存服务器在请求发送过来时，会转向源服务器请求资源。当指定 max-age 时，会优先考虑 max-age。</p>\n<h5 id=\"set-cookie\"><a class=\"anchor\" href=\"#set-cookie\">#</a> Set-Cookie</h5>\n<ul>\n<li>expires：指定浏览器可发送 cookie 的有效期，当省略 expires 时，其有效期仅限于维持浏览器会话。</li>\n<li>path：限制指定 cookie 的发送范围的文件目录</li>\n<li>domain：作为 cookie 使用对象的域名，结尾匹配一致原则，<span class=\"exturl\" data-url=\"aHR0cDovL3huLS1hYmMtZW84ZXIyMmYuY29t\">比如 abc.com</span>,www.abc.com 或者 www2.abc.com 都可以发送 cookie</li>\n<li>secure：限制 Web 页面仅在使用 https 协议时才可以发送 cookie</li>\n<li>HttpOnly：cookie 的扩展功能，它使 javascript 脚本无法获取 cookie，为了防止 xss（跨站脚本攻击）对 cookie 信息的窃取。</li>\n</ul>\n<h5 id=\"cookie\"><a class=\"anchor\" href=\"#cookie\">#</a> cookie</h5>\n<p>当客户端想获得 HTTP 状态管理支持时，就会在请求中包含从服务器获取到的 cookie</p>\n<h1 id=\"https\"><a class=\"anchor\" href=\"#https\">#</a> HTTPS</h1>\n<h2 id=\"http缺点\"><a class=\"anchor\" href=\"#http缺点\">#</a> HTTP 缺点</h2>\n<ul>\n<li>通信使用明文（不加密），内容可能会被窃听</li>\n<li>不验证通信方的身份，因此有可能遭遇伪装</li>\n<li>无法证明报文的完整性，所以有可能已遭篡改</li>\n</ul>\n<h2 id=\"http加密认证完整性保护https\"><a class=\"anchor\" href=\"#http加密认证完整性保护https\">#</a> HTTP + 加密 + 认证 + 完整性保护 = HTTPS</h2>\n<p>HTTPS 并不是一种新协议，只是通信接口部分用 SSL 和 TLS 协议代替。</p>\n<p>通常，HTTP 直接和 TCP 通信。当使用 SSL 时，则演变成先和 SSL 通信，再由 SSL 和 TCP 通信了。</p>\n<p>SSL 是独立于 HTTP 的协议，是当今世界上应用最为广泛的网络安全技术。</p>\n<h2 id=\"ssl加密方法\"><a class=\"anchor\" href=\"#ssl加密方法\">#</a> SSL 加密方法</h2>\n<p>采用公开密钥加密，加密算法公开，密钥保密。</p>\n<ul>\n<li>\n<p>共享密钥加密的困境</p>\n<p>加密和解密同用一个密钥的方式称为共享密钥加密，也被叫做对称密钥加密。</p>\n<p>共享密钥加密时必须将密钥也发送给对方，如果通信监听密钥就会落入攻击者之手，所以需要安全保管密钥。</p>\n<p>速度快。</p>\n</li>\n<li>\n<p>使用两把密钥的公开密钥加密</p>\n<p>公开密钥加密使用一对非对称的密钥。一把叫做私有密钥，另一把叫做公开密钥。私有密钥不被其他人知道，公开密钥可以随意发布，用公款密钥加密，用私有密钥解密。不用发送解密的私有密钥。</p>\n<p>速度慢。</p>\n<p><img data-src=\"https://cloud-img-1301075855.cos.ap-chengdu.myqcloud.com/xin/Snipaste_2021-01-08_20-44-03.png\" alt=\"\" /></p>\n</li>\n</ul>\n<h2 id=\"https采用混合加密机制\"><a class=\"anchor\" href=\"#https采用混合加密机制\">#</a> HTTPS 采用混合加密机制</h2>\n<p>交换密钥环节使用公开密钥加密方式，建立通信交换报文阶段则使用共享密钥加密方式。</p>\n<p><img data-src=\"https://cloud-img-1301075855.cos.ap-chengdu.myqcloud.com/xin/Snipaste_2021-01-08_20-44-22.png\" alt=\"\" /></p>\n<h2 id=\"为什么不全部使用https协议\"><a class=\"anchor\" href=\"#为什么不全部使用https协议\">#</a> 为什么不全部使用 HTTPS 协议</h2>\n<ul>\n<li>处理速度慢。通信慢，大量消耗 CPU 及内存资源，导致处理速度变慢。</li>\n<li>网络负载变慢 2-100 倍，除去和 TCP 建立连接，发送 HTTP 请求响应外，还必须进行 SSL 通信，处理通行量不可避免会增加。</li>\n<li>加密解密运算</li>\n<li>无根本性解决方法，使用 SSL 加速器解决</li>\n</ul>\n<h1 id=\"websocket\"><a class=\"anchor\" href=\"#websocket\">#</a> WebSocket</h1>\n<h2 id=\"http1x瓶颈\"><a class=\"anchor\" href=\"#http1x瓶颈\">#</a> HTTP/1.X 瓶颈</h2>\n<ul>\n<li>一条连接上只可发送一个请求。</li>\n<li>请求只能从客户端开始。客户端不可以接收除响应以外的指令。</li>\n<li>请求 / 响应首部未经压缩就发送，首部信息越多延迟越大。</li>\n<li>发送冗长的首部，每次互相发送相同的首部造成的浪费较多。</li>\n<li>可任意选择数据压缩格式。非强制压缩发送。</li>\n</ul>\n<p>为了解决 HTTP 的瓶颈，出现了很多新的协议，WebSocket 就是其中之一。</p>\n<p>WebSocket, 即 Web 浏览器与 Web 服务器之间全双工通信标准。本来是 H5 中的标准，现在已经演变为独立的标准。主要为了解决 Ajax 和 Comet 里 XMLHttpRequest 附带的缺陷所引起的问题。</p>\n<h2 id=\"websocket主要特点\"><a class=\"anchor\" href=\"#websocket主要特点\">#</a> WebSocket 主要特点</h2>\n<ul>\n<li>推送功能：服务器可直接发送数据，而不必等到客户端同意。</li>\n<li>减少通信量：只要建立起 WebSocket 通信就希望一直保持连接状态</li>\n</ul>\n<p>为了实现 WebSocket 通信，建立 HTTP 通信后，需要完成一次握手且需要用到 HTTP 的 Upgrade 首部字段告知服务器通信协议发生改变。成功握手后，通信时不再使用 HTTP 的数据帧，而是采用 WebSocket 独立的数据帧。</p>\n<h1 id=\"web攻击技术\"><a class=\"anchor\" href=\"#web攻击技术\">#</a> Web 攻击技术</h1>\n<h2 id=\"攻击模式\"><a class=\"anchor\" href=\"#攻击模式\">#</a> 攻击模式</h2>\n<ul>\n<li>以服务器为目标的主动攻击：直接访问 Web 应用，把攻击代码传入\n<ul>\n<li>SQL 注入攻击</li>\n<li>OS 命令注入攻击</li>\n</ul>\n</li>\n<li>以服务器为目标的被动攻击：利用圈套策略执行攻击代码的攻击模式。\n<ul>\n<li>跨站脚本攻击和跨站点请求伪造</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"安全对策\"><a class=\"anchor\" href=\"#安全对策\">#</a> 安全对策</h2>\n<ul>\n<li>客户端的验证</li>\n<li>Web 应用端（服务器端）的验证\n<ul>\n<li>输入值验证</li>\n<li>输出值转义</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"跨站脚本攻击xss\"><a class=\"anchor\" href=\"#跨站脚本攻击xss\">#</a> 跨站脚本攻击 (XSS)</h2>\n<p>通过存在安全漏洞的 Web 网站注册用户的浏览器内运行非法的 HTML 标签或者 JavaScript 进行的一种攻击。动态创建的 HTML 可能存在安全漏洞，攻击者编写脚本设下陷阱，用户在自己的浏览器上运行时，一不小心就受到被动攻击。</p>\n<ul>\n<li>利用虚假输入表单骗取用户个人信息</li>\n<li>利用脚本窃取用户的 Cookie 值，被害者在不知情的情况下，帮助攻击者发送恶意请求</li>\n<li>显示伪造的文章或图片</li>\n</ul>\n<h2 id=\"跨站点请求伪造的csrf\"><a class=\"anchor\" href=\"#跨站点请求伪造的csrf\">#</a> 跨站点请求伪造的（CSRF)</h2>\n<p>攻击者通过设置好的陷阱，强制对已完成认证的用户进行非预期的个人信息或设定信息等某些状态更新，属于被动攻击。</p>\n<ul>\n<li>利用已通过认证的用户权限更新设定信息等</li>\n<li>利用已通过认证的用户权限购买商品</li>\n<li>利用已通过认证的用户权限在留言板上发表言论</li>\n</ul>\n<p>如果想要详细了解这两种攻击技术，可以阅读这篇文章。</p>\n<p><a href=\"https://xqlove.xyz/Web%E5%AE%89%E5%85%A8/\">Web 安全</a></p>\n",
            "tags": [
                "网络",
                "基础知识扫盲",
                "网络",
                "http"
            ]
        },
        {
            "id": "https://xqlove.xyz/font-size-line-height-vertical-align/",
            "url": "https://xqlove.xyz/font-size-line-height-vertical-align/",
            "title": "font-size&line-height&vertical-align",
            "date_published": "2020-12-27T03:05:11.000Z",
            "content_html": "<h1 id=\"font-size\"><a class=\"anchor\" href=\"#font-size\">#</a> font-size</h1>\n<p>指定字体的大小。因为该属性的值会被用于计算 em 和 ex 长度单位，定义该值可能改变其他元素的大小。<br />\n一个流行的技巧是设置 body 元素的字体大小为 62.5%（即默认大小 16px 的 62.5%），等于 10px。现在你可以通过计算基准大小 10px 的倍数，在任何元素上方便使用 em 单位。这样 6px = 0.6em,8px = 0.8em。</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">body</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span>62.5%<span class=\"token punctuation\">;</span> <span class=\"token comment\">/*font-size 1em=10px*/</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token selector\">p</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span>1.6em <span class=\"token comment\">/*1.6em = 16px*/</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"font-size的实战应用\"><a class=\"anchor\" href=\"#font-size的实战应用\">#</a> font-size 的实战应用</h2>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>parent<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>3<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">.parent</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 4px solid red<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">text-align</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">/* 清除行内块元素的默认间距 */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token selector\">.parent span</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">/*span 为行内元素，设置宽高不起作用，因此要转换为行内块元素 */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token property\">display</span><span class=\"token punctuation\">:</span>inline-block<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 40px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 40px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> burlywood<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">/* 间距一般需要给左右同时设置，否则可能会影响居中的效果 */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span>0 4px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> cadetblue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">/* 由于清除了其默认的间距，所以字体效果不显示，需要重新设置字体大小 */</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 20px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"line-height-vertical-align\"><a class=\"anchor\" href=\"#line-height-vertical-align\">#</a> line-height vertical-align</h1>\n<p>行高，两行文字基线之间的距离。<br />\n行高 = 内容区宽度 + 行间距。行间距一分为 2，将其一半分别应用到内容区的顶部和底部<br />\n<img data-src=\"https://cloud-img-1301075855.cos.ap-chengdu.myqcloud.com/xin/line-height.png\" alt=\"\" /></p>\n<p><img data-src=\"https://cloud-img-1301075855.cos.ap-chengdu.myqcloud.com/xin/%E5%9F%BA%E7%BA%BF.png\" alt=\"\" /></p>\n<h2 id=\"line-height的实战应用\"><a class=\"anchor\" href=\"#line-height的实战应用\">#</a> line-height 的实战应用</h2>\n<ol>\n<li>大小不固定的图片、多行文字垂直居中</li>\n<li>不定尺寸图片或多行文字的垂直居中</li>\n</ol>\n<ul>\n<li>主体元素 liine-block 化</li>\n<li>0 宽度，100% 高度辅助元素</li>\n<li>vertical-align:middle</li>\n</ul>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  辅助元素 i</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  利用 vertical-align:</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  1. 主体元素 inline-block</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  2. 宽度 0，高度 100%</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  3.vertical-align:middle</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>&lt;p style=\"height:300px;background-color:cadetblue;text-align: center;\"></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    &lt;span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        1243242&lt;br></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        1243242&lt;br></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        1243242</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    &lt;/span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    &lt;i>&lt;/i></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>&lt;/p></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>span &#123;</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    display: inline-block;</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    vertical-align: middle;</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>&#125;</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>i &#123;</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    display: inline-block;</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    width: 0;</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    height: 100%;</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    vertical-align: middle;</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>&#125;</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>*/</span></pre></td></tr></table></figure><figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">&lt;div class=\"box\"></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    &lt;p>12345677654321&lt;/p></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    &lt;p>12345677654321&lt;/p></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    &lt;p>12345677654321&lt;/p></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>&lt;/div></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>*</span><span class=\"token punctuation\">&#123;</span><span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span><span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token selector\">p</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> cadetblue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 60px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token property\">text-align</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token property\">line-height</span><span class=\"token punctuation\">:</span> 60px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>在使图片垂直居中的时候，需要让中线和基线合并，否则因为基线对齐的问题，图片会略微向上偏移</strong></p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">&lt;div class=\"box\"></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   &lt;img>&lt;/img></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>&lt;/div></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>.box</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">/* 清除默认的样式 */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span>0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token property\">line-height</span><span class=\"token punctuation\">:</span>300px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token property\">text-align</span><span class=\"token punctuation\">:</span>center<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token selector\">.box img</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">/*x*/</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token property\">vertical-align</span><span class=\"token punctuation\">:</span>middle</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"面试题img默认下间距解决方法\"><a class=\"anchor\" href=\"#面试题img默认下间距解决方法\">#</a> 面试题：img 默认下间距解决方法</h1>\n<ol>\n<li>display:block (可以导致 vertical-align:baseline 失效)</li>\n<li>vertical-align:top/bottom/middle（非 baseline 即可）</li>\n<li>line-height 足够小（让图片和父元素贴近，这样基线对齐的 x 就会和图片的下边重合）</li>\n<li>font-size:0<br />\n 以上所有的属性均添加给 img</li>\n</ol>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>&lt;div style=\"<span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span>#000<span class=\"token punctuation\">;</span><span class=\"token property\">color</span><span class=\"token punctuation\">:</span>#fff<span class=\"token selector\">;text-align:center></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    &lt;img>&lt;/img></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>&lt;/div></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>img</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token property\">vertical-align</span><span class=\"token punctuation\">:</span>bottom<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "CSS基础",
                "CSS",
                "基础知识扫盲"
            ]
        },
        {
            "id": "https://xqlove.xyz/CSS%E5%B7%A5%E7%A8%8B%E5%8C%96%E5%8F%8A%E6%A1%86%E6%9E%B6%E7%AE%80%E4%BB%8B/",
            "url": "https://xqlove.xyz/CSS%E5%B7%A5%E7%A8%8B%E5%8C%96%E5%8F%8A%E6%A1%86%E6%9E%B6%E7%AE%80%E4%BB%8B/",
            "title": "CSS工程化及框架简介",
            "date_published": "2020-12-27T03:01:52.000Z",
            "content_html": "<h1 id=\"postcss\"><a class=\"anchor\" href=\"#postcss\">#</a> Postcss</h1>\n<h2 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h2>\n<ul>\n<li>PostCss 是一个用于 javascript 工具和插件转换 CSS 代码的工具</li>\n<li>PostCSS 是一个允许使用 JS 插件转换样式的工具，可以检查你的 CSS，支持 CSS Variables 和 Mixins，编译尚未被浏览器广泛支持的先进的 CSS 语法，内联图片等功能。</li>\n<li>应用广泛，维基百科、Twitter、阿里巴巴等。PoatCSS 的 Autoprefixer 插件是最流行的 CSS 处理工具之一。</li>\n<li>PostCss 接收一个 CSS 文件并提供一个 API 来分析、修改它的规则。</li>\n</ul>\n<p><img data-src=\"https://cloud-img-1301075855.cos.ap-chengdu.myqcloud.com/xin/postcss.png\" alt=\"\" /></p>\n<h2 id=\"常用插件\"><a class=\"anchor\" href=\"#常用插件\">#</a> 常用插件</h2>\n<ul>\n<li>autoprefixer 自动加前缀</li>\n<li>postcss-import 模块合并</li>\n<li>cssnano 压缩代码</li>\n<li>postcss-cssnext 使用 css 新特性</li>\n<li>precss 变量、条件、循环、Mixin Extend、import，属性值引用等</li>\n<li>css 语法检查 兼容性检查</li>\n</ul>\n<h2 id=\"postcss结合webpack应用\"><a class=\"anchor\" href=\"#postcss结合webpack应用\">#</a> PostCSS 结合 Webpack 应用</h2>\n<ul>\n<li>安装：$npm i -D style-loader css-loader postcss-loader</li>\n<li>$npm install --save-dev style-loader css-loader postcss-loader</li>\n<li>增加 webpack 配置文件 webpack.config.js</li>\n<li>运行：webpack postcss</li>\n</ul>\n<h1 id=\"css模块化方案\"><a class=\"anchor\" href=\"#css模块化方案\">#</a> CSS 模块化方案</h1>\n<ul>\n<li>css-modules 和 extract-text-plugin 避免 CSS 类名冲突</li>\n</ul>\n<h2 id=\"css-modules使用\"><a class=\"anchor\" href=\"#css-modules使用\">#</a> CSS modules 使用</h2>\n<ul>\n<li>解决类名冲突问题</li>\n<li>使用 postCSS 或者 webpack 等构建工具进行编译</li>\n<li>在 HTML 模板中使用编译过程中产生的类名</li>\n</ul>\n<h2 id=\"使用js来引用和加载css的好处\"><a class=\"anchor\" href=\"#使用js来引用和加载css的好处\">#</a> 使用 JS 来引用和加载 CSS 的好处</h2>\n<ul>\n<li>JS 作为入口，管理资源有天然优势</li>\n<li>将组件的结构、样式、行为封装到一起，增强内聚</li>\n<li>可以做更多处理（webpack）</li>\n</ul>\n<h2 id=\"webpack和css\"><a class=\"anchor\" href=\"#webpack和css\">#</a> webpack 和 css</h2>\n<ul>\n<li>css-loader   将 css 变成 js</li>\n<li>style-loader 将 js 样式插入 head</li>\n<li>ExtractTextPlugin/MiniCssExtractPlugin 将 CSS 从 JS 中提取出来</li>\n<li>css modules 解决 CSS 命名冲突问题</li>\n<li>less-loader sass-loader 各类预处理器</li>\n<li>postcss-loader PostCSS 处理</li>\n</ul>\n<h1 id=\"经典项目布局的类型\"><a class=\"anchor\" href=\"#经典项目布局的类型\">#</a> 经典项目布局的类型</h1>\n<ul>\n<li>pc 项目：官网 系统 （float+position）</li>\n<li>pc + pad + 手机：官网 @media =&gt;bootstrap</li>\n<li>移动端：vue + react + mpvue....</li>\n<li>webpack + node  postcss-pxtorem</li>\n</ul>\n<h2 id=\"新闻类\"><a class=\"anchor\" href=\"#新闻类\">#</a> 新闻类</h2>\n<ul>\n<li>flex 布局</li>\n<li>less + sass + css</li>\n<li>单位：rem + vw</li>\n<li>iconfont:html(unicode)、css(::before)、symbol</li>\n</ul>\n",
            "tags": [
                "CSS基础",
                "CSS",
                "基础知识扫盲"
            ]
        },
        {
            "id": "https://xqlove.xyz/bootstrap%E5%8E%9F%E7%90%86/",
            "url": "https://xqlove.xyz/bootstrap%E5%8E%9F%E7%90%86/",
            "title": "bootstrap原理",
            "date_published": "2020-12-27T02:57:27.000Z",
            "content_html": "<h1 id=\"bootstrap\"><a class=\"anchor\" href=\"#bootstrap\">#</a> bootstrap</h1>\n<h2 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h2>\n<ul>\n<li>用于构建响应式、移动设备优先的 web 站点</li>\n<li>一个 CSS 框架，twitter 出品，提高通用基础样式；提供基础样式、常用组件和 JS 插件</li>\n<li>简单灵活可用于架构流行的用户界面和交互接口的 html、css、javascript 工具集</li>\n<li>基于 html5、css3，具有友好的学习曲线，卓越的兼容性，响应式设计。12 列格网，样式向导文档</li>\n<li>自定义 JQ 插件，完整的类库</li>\n<li>bootstrap3.0 基于 less，bootstrap4.0 基于 sass</li>\n</ul>\n<h2 id=\"优缺点\"><a class=\"anchor\" href=\"#优缺点\">#</a> 优缺点</h2>\n<ul>\n<li>优点：CSS 代码结构合理，现成的样式可以直接用</li>\n<li>缺点：定制较为繁琐，体积大</li>\n</ul>\n<ol>\n<li>预编译 css 和 js 文件</li>\n<li>源码文件</li>\n<li>通过软件包管理</li>\n</ol>\n<ul>\n<li>npm install bootstrap</li>\n<li>yarn add bootstrap</li>\n</ul>\n<ol start=\"4\">\n<li>BootstapCDN</li>\n</ol>\n<p><strong>有一些依赖包导入需要注意顺序：JQ、Popper.js、bootstrap.js</strong></p>\n<h2 id=\"bootstrap的响应式布局\"><a class=\"anchor\" href=\"#bootstrap的响应式布局\">#</a> bootstrap 的响应式布局</h2>\n<p><img data-src=\"https://cloud-img-1301075855.cos.ap-chengdu.myqcloud.com/xin/bootstrap%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86.png\" alt=\"\" /></p>\n",
            "tags": [
                "CSS基础",
                "CSS",
                "基础知识扫盲"
            ]
        },
        {
            "id": "https://xqlove.xyz/BFC-IFC/",
            "url": "https://xqlove.xyz/BFC-IFC/",
            "title": "BFC&IFC",
            "date_published": "2020-12-27T02:56:45.000Z",
            "content_html": "<h1 id=\"bfc\"><a class=\"anchor\" href=\"#bfc\">#</a> BFC</h1>\n<h2 id=\"什么是bfc\"><a class=\"anchor\" href=\"#什么是bfc\">#</a> 什么是 BFC</h2>\n<p>块级格式化上下文，是页面中一块渲染区域，有一套属于自己的渲染规则。<br />\n<strong>可以看做是隔离了的独立容器，容器里面的元素和外面互不影响，并且 BFC 具有普通容器所没有的一些特性。</strong></p>\n<h2 id=\"bfc布局规则\"><a class=\"anchor\" href=\"#bfc布局规则\">#</a> BFC 布局规则</h2>\n<ul>\n<li>内部的盒子会在垂直方向，一个一个地放置</li>\n<li>盒子垂直方向的距离由 margin 决定，属于 同一个 BFC 的两个相邻 BOX 的上下 margin 会发生重叠</li>\n<li>每个元素的左边，与包含的盒子的左边相接触，即使存在浮动也是如此</li>\n<li>BFC 的区域不会与 float box 重叠</li>\n<li>BFC 就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素，反之也如此</li>\n<li>计算 BFC 的高度时，浮动元素也参与计算</li>\n</ul>\n<h2 id=\"触发bfc的条件\"><a class=\"anchor\" href=\"#触发bfc的条件\">#</a> 触发 BFC 的条件</h2>\n<ul>\n<li>html 根元素或其他包含它的元素</li>\n<li>float 的属性不为 none</li>\n<li>overflow 为 auto、scroll、hidden</li>\n<li>display 为 inline-block、table-cell、table-caption 中的任何一个</li>\n<li>position 为 absolute 或 fixed</li>\n</ul>\n<h2 id=\"bfc的用处\"><a class=\"anchor\" href=\"#bfc的用处\">#</a> BFC 的用处</h2>\n<ul>\n<li>让浮动内容和周围的内容等高</li>\n<li>外边距折叠</li>\n<li>清楚浮动</li>\n<li>自适应的两列布局</li>\n</ul>\n<h1 id=\"ifc\"><a class=\"anchor\" href=\"#ifc\">#</a> IFC</h1>\n<h2 id=\"什么是ifc\"><a class=\"anchor\" href=\"#什么是ifc\">#</a> 什么是 IFC</h2>\n<p>IFC 叫做 “内联格式化上下”，内部的元素从包含块的顶部开始，从左至右（默认）排列成一行形成的一个矩形盒子叫做 line box。</p>\n<h2 id=\"ifc布局规则\"><a class=\"anchor\" href=\"#ifc布局规则\">#</a> IFC 布局规则</h2>\n<ul>\n<li>子元素水平方向横向排列，并且垂直方向起点为元素顶部</li>\n<li>子元素只会计算横向样式空间，垂直方向样式空间不会被计算。[padding、border、margin]</li>\n<li>在垂直方向上，子元素或以不同形式来对齐（vertival-align）</li>\n<li>能把在一行上的框都完全包含进去的一个矩形区域，被称为该行的行框（linebox）. 行框的宽度是由包含块（containing box）和其中的浮动来决定。</li>\n<li>IFC 中的 “line box” 一般左右边紧贴其包含快，但是 float 元素会优先排列。</li>\n<li>IFC 中的 “line box” 高度由 CSS 行高计算规则来确定，同个 IFC 下的多个 line box 高度可能会不同。</li>\n<li>当 line-level boxes 的总宽度少于包含它们的 line box 时，其水平渲染规则由 text-align 属性决定。</li>\n</ul>\n<h2 id=\"ifc的作用\"><a class=\"anchor\" href=\"#ifc的作用\">#</a> IFC 的作用</h2>\n<ul>\n<li>水平居中：当一个快要在环境中水平居中时，设置其为 inline-block 则会在外层产生 IFC 通过 text-align:center 则可以使其水平居中</li>\n<li>垂直居中：创建一个 IFC，用其中一个元素撑开父元素的高度，然后设置其 vertical-align:middle，其他行内元素则可以在此父元素下垂直居中。</li>\n</ul>\n",
            "tags": [
                "布局",
                "CSS",
                "基础知识扫盲"
            ]
        },
        {
            "id": "https://xqlove.xyz/CSS%E5%B8%B8%E8%A7%81%E5%8D%95%E4%BD%8D-%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%B8%83%E5%B1%80/",
            "url": "https://xqlove.xyz/CSS%E5%B8%B8%E8%A7%81%E5%8D%95%E4%BD%8D-%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%B8%83%E5%B1%80/",
            "title": "CSS常见单位&移动端布局",
            "date_published": "2020-12-27T02:53:33.000Z",
            "content_html": "<h1 id=\"面试题常用的单位长度有哪些区别\"><a class=\"anchor\" href=\"#面试题常用的单位长度有哪些区别\">#</a> 面试题：常用的单位长度有哪些？区别？</h1>\n<ul>\n<li>pc : px % em</li>\n<li>手机 : rem vw vh vmin vmax</li>\n<li>px 像素 (固定写死)</li>\n<li>%  相对单位 (参照对象 父元素宽高的大小)</li>\n<li>em 相对单位 (参照对象 父元素的字体大小 font-size, 通常 1em=16px 前提：父元素是 html)</li>\n<li>rem 参照对象为根元素的字体大小，通过改变 htmlfont-size 的值改变页面中元素的大小。默认 1rem = 16px，为了好计算并且减少误差（谷歌浏览器 1rem 最好 &gt; 12px，否则存在误差）,1rem=100px。</li>\n<li>vm/vh 参照对象为视口的大小</li>\n</ul>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">在使用百分比的时候，需要给父容器设置高度</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>html</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span>100%</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token selector\">body</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span>100%</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token selector\">.main</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span>100%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span>100%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span>gold<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"px-rem-vm之间换算\"><a class=\"anchor\" href=\"#px-rem-vm之间换算\">#</a> px rem vm 之间换算</h2>\n<ul>\n<li>postcss-pxtorem (webpack 插件 自动换算 px 与 rem)</li>\n<li>1rem = 100px  1px = 1/100rem</li>\n<li width:300px;height:200px=\"\">假设设计稿 尺寸 750  分辨率 375 设计稿单位 px 1rem = 100px<br />\n=&gt; .box</li>\n</ul>\n<ol>\n<li width:3rem;height:2rem=\"\">用 rem 单位 (引入脚本 小米官网)<br />\n 750 : 100; 分辨率 375 ：rem = 50px;<br />\n=&gt; .box</li>\n</ol>\n<p><img data-src=\"https://cloud-img-1301075855.cos.ap-chengdu.myqcloud.com/xin/rem.png\" alt=\"\" /><br />\n<img data-src=\"https://cloud-img-1301075855.cos.ap-chengdu.myqcloud.com/xin/rem%20mi.png\" alt=\"\" /></p>\n<ol start=\"2\">\n<li>用 vw 单位 (网易官网)<br />\n vw: 视口的宽度<br />\n 375 分辨率对应 50px<br />\nvw = 视口的 1/100 = 1/100 * 375 = 3.75<br />\n? vw = ? 3.75 = 50px<br />\n?vw = 1/100 * 375 = 50px<br />\n? = 50/3.75<br />\n13.333 vw = 50px</li>\n</ol>\n<pre><code>html&#123;\n    /*font-size = 50px*/\n    font-size:13.33333vw\n&#125;\n</code></pre>\n<p><strong>根据分辨率的不同，显示不同的尺寸，设备分辨率越大，元素 / 图片 / 文字越大，反之越小。响应式 viewport + rem (vw) + flexbox</strong></p>\n<h1 id=\"像素命名\"><a class=\"anchor\" href=\"#像素命名\">#</a> 像素命名</h1>\n<ol>\n<li>设备像素 (物理像素 / 像素分辨率)</li>\n</ol>\n<ul>\n<li>显示器的最小物理单位 (对于一个显示器来说是固定的)</li>\n<li>以手机屏幕为例，iphonex 像素分辨率为 1125*2436，是指屏幕横向能显示 1125 个物理像素点，纵向能显示 2436 个物理像素点。</li>\n<li>通常说的 4k 显示屏指的是 4096*2160</li>\n</ul>\n<ol start=\"2\">\n<li>设备独立像素 (dips)</li>\n</ol>\n<ul>\n<li>分辨率，可在控制台通过 window.screen.width/window.screen.height.</li>\n<li>一个设备独立像素可能包含多个物理像素，包含的越多，显示的越清晰。</li>\n</ul>\n<ol start=\"3\">\n<li>CSS 像素</li>\n</ol>\n<ul>\n<li>在页面不算不缩放的情况下，1px 的 CSS 像素 === 1 设备独立像素</li>\n<li>页面放大 200% 时，页面的设备独立像素依旧不变，放大的是 CSS 像素。但是此时 CSS 像素与设备独立像素的关系变化了，1px === 4 独立像素 (宽<em> 2，高</em> 2)</li>\n</ul>\n<ol start=\"4\">\n<li>devicePixelRatio (像素比)</li>\n</ol>\n<ul>\n<li>物理像素和设备独立像素的比，即 1 独立像素由多少物理像素渲染，在 JS 中可以通过 window.devicePixelRatio 获取。</li>\n</ul>\n<h1 id=\"viewport-media\"><a class=\"anchor\" href=\"#viewport-media\">#</a> viewport + media</h1>\n<ul>\n<li>\n<p>视口大小等于页面的大小。<br />\n<img data-src=\"https://cloud-img-1301075855.cos.ap-chengdu.myqcloud.com/xin/viewport.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>一般的项目：vue + react</p>\n</li>\n</ul>\n<ol>\n<li>纯 PC (浏览器兼容 px + %)</li>\n<li>纯手机 (手机适配 - rem vw vh ....)</li>\n<li>pc + 手机 + pad 同时兼容适配 (媒体查询的思想 案例：去哪儿网)</li>\n</ol>\n<p><img data-src=\"https://cloud-img-1301075855.cos.ap-chengdu.myqcloud.com/xin/media.png\" alt=\"\" /></p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* 手机宣传页 上下滑屏特效  screen and  省略不写 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token selector\">html</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> gold<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/* 竖屏 */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token atrule\"><span class=\"token rule\">@media</span> screen <span class=\"token keyword\">and</span> <span class=\"token punctuation\">(</span><span class=\"token property\">orientation</span><span class=\"token punctuation\">:</span> portrait<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token selector\">.tip</span><span class=\"token punctuation\">&#123;</span><span class=\"token property\">display</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">/* 横屏 */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token punctuation\">(</span><span class=\"token property\">orientation</span><span class=\"token punctuation\">:</span> landscape<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token selector\">.tip</span><span class=\"token punctuation\">&#123;</span><span class=\"token property\">display</span><span class=\"token punctuation\">:</span> block<span class=\"token punctuation\">;</span><span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span>50px<span class=\"token punctuation\">;</span><span class=\"token property\">text-align</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "布局",
                "CSS",
                "基础知识扫盲"
            ]
        },
        {
            "id": "https://xqlove.xyz/CSS%E5%8A%A8%E7%94%BB/",
            "url": "https://xqlove.xyz/CSS%E5%8A%A8%E7%94%BB/",
            "title": "CSS动画",
            "date_published": "2020-12-27T02:50:28.000Z",
            "content_html": "<h1 id=\"css动画类型\"><a class=\"anchor\" href=\"#css动画类型\">#</a> CSS 动画类型</h1>\n<ul>\n<li>transition 补间动画 (过渡动画)</li>\n<li>keyframes 关键帧动画</li>\n<li>逐帧动画</li>\n</ul>\n<h2 id=\"transition-补间动画\"><a class=\"anchor\" href=\"#transition-补间动画\">#</a> transition （补间动画）</h2>\n<ol>\n<li>transition-property:css 属性名称 /all 多个</li>\n<li>transition-duration:1s (持续时间，数字越大越慢，反之越快 0.1s = .1s)</li>\n<li>transition-timing-function:ease (运动曲线 ease [平均] ease-in [先慢后快] ease-out [先快后慢] ease-in-out [先慢后快再慢] linear [匀速])</li>\n<li>transition-delay:.2s (延迟时间)<br />\n** 注意：** 如果要想鼠标移入、移出都有动画，我们将其加在元素本身，而不是加在鼠标移入。</li>\n</ol>\n<h2 id=\"transformcss3属性\"><a class=\"anchor\" href=\"#transformcss3属性\">#</a> transform (css3 属性)</h2>\n<ol>\n<li>translate（位移）指定对象的 2D 平移，第一个参数对应 X 轴，第二个对应 Y 轴，若第二个参数未提供，默认为 0。</li>\n</ol>\n<pre><code>translateX():指定对象X轴(水平方向)的平移\ntranslateY():指定对象Y轴(垂直方向)的平移\n</code></pre>\n<ol start=\"2\">\n<li>rotate（旋转）: 指定对象的 2D 旋转，需先有<transform-origin>属性的定义；表示旋转一定的角度。</li>\n</ol>\n<pre><code>rotate() = rotate(angle)\nrotate3d() = rotate3d(number,number,number,angle)\nrotateX() = rotate(angle)\nrotateY() = rotate(angle)\nrotateZ() = rotate(angle)\n</code></pre>\n<ol start=\"3\">\n<li>scale（缩放）: 指定对象的 2D 缩放。第一个参数对应 X 轴，第二个参数对应 Y 轴。</li>\n</ol>\n<pre><code>scaleX():指定对象X轴的缩放\nscaleY()：指定对象Y轴的缩放\n</code></pre>\n<p><img data-src=\"https://cloud-img-1301075855.cos.ap-chengdu.myqcloud.com/xin/transition-option.png\" alt=\"\" /></p>\n<ul>\n<li>transition 往往和 tranfrom 一起使用，在控制台可以调试动画的效果，打开控制台，然后 esc, 点击... 选择 Animation 即可。</li>\n</ul>\n<h2 id=\"transform应用\"><a class=\"anchor\" href=\"#transform应用\">#</a> transform 应用</h2>\n<ul>\n<li>小米官网：鼠标移入图片的时候，图片稍微上移一点，并加入了阴影效果。</li>\n<li>鼠标移入旋转遮盖模块</li>\n<li>图片放大</li>\n</ul>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item2<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bottom<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>top<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item3<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>scale.png<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">.item1</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 150px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 150px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> cadetblue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token property\">transition</span><span class=\"token punctuation\">:</span> all 1s ease .2s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token property\">margin-top</span><span class=\"token punctuation\">:</span> 50px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token selector\">.item1:hover</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translateY</span><span class=\"token punctuation\">(</span>-20px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> darkcyan<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token selector\">.item2</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">/* 一般我们在此处设置 overflow:hidden，是防止图片放大超出范围 */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token selector\">.bottom</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 150px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 150px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> brown<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token selector\">.top</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 150px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 150px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> cornsilk<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 0px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>90deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token property\">transform-origin</span><span class=\"token punctuation\">:</span> left bottom<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token property\">transition</span><span class=\"token punctuation\">:</span> all 1s ease .2s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token selector\">.item2:hover .top</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token property\">transform</span> <span class=\"token punctuation\">:</span> <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>0deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token selector\">.item3</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token selector\">.item3 img</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token property\">transition</span><span class=\"token punctuation\">:</span>all 1s ease<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token selector\">.item3:hover img</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">scale</span><span class=\"token punctuation\">(</span>1.5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"拓展让元素隐藏的方法\"><a class=\"anchor\" href=\"#拓展让元素隐藏的方法\">#</a> 拓展 (让元素隐藏的方法)</h3>\n<pre><code>display:none                       display:block\nopacity:0                          opacity:1\ntransform:scale(0)                 transform:scale(1)\ntransform:rotate(90deg)            transform:rotate(0deg)\ntransform:translate(-9999px)\nposition + left: -9999px\n</code></pre>\n<h2 id=\"keyframes-关键帧动画\"><a class=\"anchor\" href=\"#keyframes-关键帧动画\">#</a> keyframes （关键帧动画）</h2>\n<ul>\n<li>相当于多个补间动画</li>\n<li>与元素状态的变化无关</li>\n<li>定义更加灵活</li>\n</ul>\n<h3 id=\"逐帧动画应用\"><a class=\"anchor\" href=\"#逐帧动画应用\">#</a> 逐帧动画应用</h3>\n<p><img data-src=\"https://cloud-img-1301075855.cos.ap-chengdu.myqcloud.com/xin/steps.png\" alt=\"\" /></p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   .git 动图的实现雪碧图大小 1600*1801 张图 8 个猴子</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   所以分成 8 个帧 每一帧展示一张图片，steps (8),</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   第二个参数不传，默认为 end，end 表示忽略最后一帧，</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   也就是不显示最后一帧，steps (8,start)，start 表示忽略第一帧。</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token selector\">.west</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span>200px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 180px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> cornflowerblue <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token string url\">\"monkey.png\"</span><span class=\"token punctuation\">)</span></span> no-repeat<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token property\">animation</span><span class=\"token punctuation\">:</span> monkeyAnimation .8s <span class=\"token function\">steps</span><span class=\"token punctuation\">(</span>8<span class=\"token punctuation\">)</span> infinite<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">/* 雪碧图的原理 利用背景定位 改变图像的位置 第一帧 0 0 最后一帧 -1600 0*/</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token atrule\"><span class=\"token rule\">@keyframes</span> monkeyAnimation</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token selector\">0%</span><span class=\"token punctuation\">&#123;</span> <span class=\"token property\">background-position</span><span class=\"token punctuation\">:</span> 0 0<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token selector\">100%</span><span class=\"token punctuation\">&#123;</span> <span class=\"token property\">background-position</span><span class=\"token punctuation\">:</span> -1600px 0<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">/* 效果：孙悟空的行走图 */</span></pre></td></tr></table></figure><figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*step-start 忽略第一帧 step-end 忽略最后一帧 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token selector\">.step1</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span>312px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token property\">background</span><span class=\"token punctuation\">:</span>cornflowerblue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token property\">animation</span><span class=\"token punctuation\">:</span>startAnimation 1s step-start infinite <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token selector\">.step2</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span>312px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> blueviolet<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token property\">animation</span><span class=\"token punctuation\">:</span>startAnimation 1s step-end infinite <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token atrule\"><span class=\"token rule\">@keyframes</span> startAnimation</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token selector\">0%</span><span class=\"token punctuation\">&#123;</span> <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token selector\">50%</span><span class=\"token punctuation\">&#123;</span> <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> blue<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token selector\">100%</span><span class=\"token punctuation\">&#123;</span><span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span>peru<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* steps </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>1. 横向  steps (n)  background-position:- 雪碧图宽度  0</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>2. 纵向  steps (n)  background-position:0  - 雪碧图高度</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>3. 横纵向 steps (1) bakground-position: n 个坐标点   n 个百分比</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token selector\">.container</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 1px solid red<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>sprites/animal.png<span class=\"token punctuation\">)</span></span> no-repeat<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token property\">animation</span><span class=\"token punctuation\">:</span> run 1s infinite<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token property\">animation-timing-function</span><span class=\"token punctuation\">:</span> <span class=\"token function\">steps</span><span class=\"token punctuation\">(</span>1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token atrule\"><span class=\"token rule\">@keyframes</span> run</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token selector\">0%,100%</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token property\">background-position</span><span class=\"token punctuation\">:</span> 0 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token selector\">12.5%</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token property\">background-position</span><span class=\"token punctuation\">:</span> -100px 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token selector\">25%</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token property\">background-position</span><span class=\"token punctuation\">:</span> -200px 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token selector\">37.5%</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token property\">background-position</span><span class=\"token punctuation\">:</span> -300px 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token selector\">50%</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token property\">background-position</span><span class=\"token punctuation\">:</span> 0 -100px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token selector\">62.5%</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token property\">background-position</span><span class=\"token punctuation\">:</span> -100px -100px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token selector\">75%</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token property\">background-position</span><span class=\"token punctuation\">:</span> -200px -100px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token selector\">87.5%</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token property\">background-position</span><span class=\"token punctuation\">:</span> -300px -100px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "动画",
                "CSS",
                "动画"
            ]
        },
        {
            "id": "https://xqlove.xyz/%E5%AE%9A%E4%BD%8D/",
            "url": "https://xqlove.xyz/%E5%AE%9A%E4%BD%8D/",
            "title": "定位",
            "date_published": "2020-12-27T02:47:14.000Z",
            "content_html": "<h1 id=\"定位\"><a class=\"anchor\" href=\"#定位\">#</a> 定位</h1>\n<ul>\n<li>static (默认值) : 默认值，想要取消继承的 position 属性，则可以设置将其设置为 static。<br />\n<strong>方位不起作用</strong></li>\n<li>relative (相对定位) : 相对于默认位置 (即 static 时的位置) 进行偏移，定位基点是元素的默认位置，必须搭配 top、bottom、left、right 一起使用。<br />\n<strong>1. 方位或 z-index 起作用。2. 作为绝对定位的参照物。 不脱离文档流 + 基点是自己本身。</strong></li>\n<li>absolute (绝对定位) : 相对于上一级元素（一般是父元素）进行偏移，即定位基点是父元素。但不能是 static，否则定位基点就会变成整个网页的根元素 html，必须搭配 top、bottom、left、right 一起使用，absolute 定位的元素会被 “正常页面流” 忽略，即在 “正常页面流” 中，该元素所占空间为零，周边元素不受影响。<strong>脱离文档流 (也就是后面的元素会上移)+ 基点:position (不包含 static)，若父元素无 position, 则查找 html, 若还没有则参照窗口。</strong></li>\n<li>fixed : 相对于视口 (viewport，浏览器窗口) 进行偏移，即定位基点是浏览器窗口。这会导致元素的位置不随页面滚动而变化，好像固定在网页上一样。也需要跟方位一起使用。<strong>脱离文档流 + 基点：整个浏览器窗口 + 滚动条滚动的时候固定不动。</strong></li>\n<li>sticky (粘性定位) : 产生动态效果，像 relative 和 fixed 的结合，如网页的搜索工具栏，初始加载时在自己的默认位置，页面向下滚动时，变成固定位置，重新向上滚动回到原位，工具栏也会回到默认位置。<br />\n<strong>应用：图片堆叠 表头锁定</strong></li>\n</ul>\n<h2 id=\"固定定位的特殊性\"><a class=\"anchor\" href=\"#固定定位的特殊性\">#</a> 固定定位的特殊性</h2>\n<p>正常情况下，固定定位是相对于浏览器视窗进行定位的，但是当其祖先元素中存在符合以下任意一个条件的元素时，固定定位元素会相对于该元素进行定位：</p>\n<ol>\n<li>transform 属性值不为 none</li>\n<li>transform-style:preserve-3d</li>\n<li>perspective 属性值不为 none</li>\n<li>will-change 属性指定了上面 3 个 CSS 属性中的任意一个</li>\n</ol>\n<h2 id=\"是否脱离文档流\"><a class=\"anchor\" href=\"#是否脱离文档流\">#</a> 是否脱离文档流</h2>\n<ol>\n<li>脱离：absolute + fixed</li>\n<li>不脱离：relative</li>\n</ol>\n<h2 id=\"参照物\"><a class=\"anchor\" href=\"#参照物\">#</a> 参照物</h2>\n<ol>\n<li>absolute：父元素 position:relative</li>\n<li>fixed: 窗口</li>\n<li>relative: 自己本身位置</li>\n</ol>\n<p><strong>相同点：方位 + z-index 提高层级</strong></p>\n<p><strong>用完浮动 立马清浮动，用完绝对定位，一定要加参照物 (一般为 position:relative)</strong></p>\n<h1 id=\"定位的应用九宫格\"><a class=\"anchor\" href=\"#定位的应用九宫格\">#</a> 定位的应用 (九宫格)</h1>\n<h2 id=\"float\"><a class=\"anchor\" href=\"#float\">#</a> float</h2>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>main<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">html,body,.main</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token selector\">.main,.item</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token property\">float</span><span class=\"token punctuation\">:</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 33.3%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 33.3%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token selector\">.item:nth-child(2n+1)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> blueviolet<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token selector\">.item:nth-child(2n)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> cornflowerblue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"position\"><a class=\"anchor\" href=\"#position\">#</a> position</h2>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>main<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>first_line<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>one<span class=\"token punctuation\">\"</span></span><span class=\"token style-attr language-css\"><span class=\"token attr-name\"> <span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">=\"</span><span class=\"token attr-value\"><span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> cornflowerblue<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>two<span class=\"token punctuation\">\"</span></span><span class=\"token style-attr language-css\"><span class=\"token attr-name\"> <span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">=\"</span><span class=\"token attr-value\"><span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> crimson<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        div class=\"three\" style=\"background-color: darkgrey;\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>second_line<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>one<span class=\"token punctuation\">\"</span></span><span class=\"token style-attr language-css\"><span class=\"token attr-name\"> <span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">=\"</span><span class=\"token attr-value\"><span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> darkgrey<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span><span class=\"token attr-name\">v</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>two<span class=\"token punctuation\">\"</span></span><span class=\"token style-attr language-css\"><span class=\"token attr-name\"><span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">=\"</span><span class=\"token attr-value\"><span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> cornflowerblue<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>three<span class=\"token punctuation\">\"</span></span><span class=\"token style-attr language-css\"><span class=\"token attr-name\"> <span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">=\"</span><span class=\"token attr-value\"><span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> crimson<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>third_line<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>one<span class=\"token punctuation\">\"</span></span><span class=\"token style-attr language-css\"><span class=\"token attr-name\"> <span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">=\"</span><span class=\"token attr-value\"><span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> crimson<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>two<span class=\"token punctuation\">\"</span></span><span class=\"token style-attr language-css\"><span class=\"token attr-name\"> <span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">=\"</span><span class=\"token attr-value\"><span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> darkgrey<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>three<span class=\"token punctuation\">\"</span></span><span class=\"token style-attr language-css\"><span class=\"token attr-name\"><span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">=\"</span><span class=\"token attr-value\"><span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> cornflowerblue<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">html,body,.main</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token selector\">.first_line,.second_line,.third_line</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 33.3%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token selector\">.one,.two,.three</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 33.3%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token selector\">.one</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token selector\">.two</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 33.3%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token selector\">.three</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 66.6%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "定位",
                "CSS",
                "面试经典问题",
                "项目实用布局"
            ]
        },
        {
            "id": "https://xqlove.xyz/flex%E5%B8%83%E5%B1%80%E5%8F%8A%E5%BA%94%E7%94%A8/",
            "url": "https://xqlove.xyz/flex%E5%B8%83%E5%B1%80%E5%8F%8A%E5%BA%94%E7%94%A8/",
            "title": "flex布局及应用",
            "date_published": "2020-12-27T02:42:20.000Z",
            "content_html": "<h1 id=\"flex-布局\"><a class=\"anchor\" href=\"#flex-布局\">#</a> flex 布局</h1>\n<ul>\n<li>flex 可以控制子元素的排列方式 (默认方向：水平方向)</li>\n<li>flex-direction：方向 row 水平 column 垂直</li>\n<li>[旧] box-orient：horizontal 水平 vertical 垂直方向</li>\n<li>flex-wrap:wrap (自动折行)</li>\n<li>flex-flow:flex-direction 和 flex-wrap 的缩写</li>\n<li>justify-content: 子元素水平排列方式</li>\n<li>align-items:center 控制子元素的排列</li>\n<li>align-content 控制子元素的排列（只可以是多轴，也就是说至少要一排以上，才可以设置）</li>\n<li>flex:0 =&gt; flex:0 (flex-grow 放大比例) 1 (flex-shrink 缩小比例) auto (flex-basis 分配空间之前，项目占主轴的大小)</li>\n</ul>\n<p>如果想要详细了解这些属性的用法，可以访问下面的链接哦！</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5ydWFueWlmZW5nLmNvbS9ibG9nLzIwMTUvMDcvZmxleC1ncmFtbWFyLmh0bWw=\">http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html</span></p>\n<h1 id=\"面试题多行文本省略号-2行\"><a class=\"anchor\" href=\"#面试题多行文本省略号-2行\">#</a> 面试题（多行文本省略号 2 行）</h1>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* 省略号 - 四个条件 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token selector\">p</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">display</span><span class=\"token punctuation\">:</span>-webkit-box<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">-webkit-box-orient</span><span class=\"token punctuation\">:</span>vertical<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token property\">-webkit-line-clamp</span><span class=\"token punctuation\">:</span>2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span>hidden<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/* 文本格式：省略号 */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token property\">text-overflow</span><span class=\"token punctuation\">:</span>ellipsis<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">/* 单词换行 */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token property\">word-break</span><span class=\"token punctuation\">:</span>break-word</pre></td></tr></table></figure><h1 id=\"实战app\"><a class=\"anchor\" href=\"#实战app\">#</a> 实战 APP</h1>\n<ol>\n<li>模块结构</li>\n</ol>\n<ul>\n<li>纯文字</li>\n<li>图文结合</li>\n<li>三小图 两小图 四小图</li>\n<li>大图</li>\n</ul>\n<ol start=\"2\">\n<li>技术栈</li>\n</ol>\n<ul>\n<li>布局：flexbox</li>\n<li>单位：rem + vw</li>\n<li>原生：less + sass (minix)</li>\n<li>组件复用思想</li>\n</ul>\n<h1 id=\"移动端新闻app网页模块\"><a class=\"anchor\" href=\"#移动端新闻app网页模块\">#</a> 移动端新闻 APP 网页模块</h1>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>wrap<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 图文结构 --></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>section</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>secBox<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>figure</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sec_pic<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>img/scale.png<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>figure</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>aside</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sec_txt<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tit<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>lq是个大麻瓜，大笨瓜，大傻瓜。我是喜欢大麻瓜，大笨瓜，大傻瓜的聪明瓜。</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                lq是个大麻瓜，大笨瓜，大傻瓜。我是喜欢大麻瓜，大笨瓜，大傻瓜的聪明瓜。</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                lq是个大麻瓜，大笨瓜，大傻瓜。我是喜欢大麻瓜，大笨瓜，大傻瓜的聪明瓜。</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                lq是个大麻瓜，大笨瓜，大傻瓜。我是喜欢大麻瓜，大笨瓜，大傻瓜的聪明瓜。</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>info<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>time<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>1分钟<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>msg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>comment<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>1000万<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>label_icon<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>专题<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>aside</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>section</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 纯文字 --></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>section</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>secBox<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>aside</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sec_txt .sec_txt_p<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tit<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>lq是个大麻瓜，大笨瓜，大傻瓜。我是喜欢大麻瓜，大笨瓜，大傻瓜的聪明瓜。</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                lq是个大麻瓜，大笨瓜，大傻瓜。我是喜欢大麻瓜，大笨瓜，大傻瓜的聪明瓜。</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                lq是个大麻瓜，大笨瓜，大傻瓜。我是喜欢大麻瓜，大笨瓜，大傻瓜的聪明瓜。</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                lq是个大麻瓜，大笨瓜，大傻瓜。我是喜欢大麻瓜，大笨瓜，大傻瓜的聪明瓜。</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>info<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>time<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>1分钟<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>msg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>comment<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>1000万<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>label_icon<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>专题<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>aside</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>section</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 三小图 --></span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>section</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>secBox<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>aside</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sec_txt sec_three<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tit<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>lq是个大麻瓜，大笨瓜，大傻瓜。我是喜欢大麻瓜，大笨瓜，大傻瓜的聪明瓜。</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                lq是个大麻瓜，大笨瓜，大傻瓜。我是喜欢大麻瓜，大笨瓜，大傻瓜的聪明瓜。</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                lq是个大麻瓜，大笨瓜，大傻瓜。我是喜欢大麻瓜，大笨瓜，大傻瓜的聪明瓜。</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                lq是个大麻瓜，大笨瓜，大傻瓜。我是喜欢大麻瓜，大笨瓜，大傻瓜的聪明瓜。</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>figure</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sec_pic<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sec_inner<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>img/scale.png<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>img/scale.png<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>img/scale.png<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>figure</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>info<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>time<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>1分钟<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>msg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>comment<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>1000万<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>label_icon<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>专题<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>aside</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>section</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 大图 --></span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>section</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>secBox<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>aside</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sec_txt sec_big<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tit<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>lq是个大麻瓜，大笨瓜，大傻瓜。我是喜欢大麻瓜，大笨瓜，大傻瓜的聪明瓜。</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                lq是个大麻瓜，大笨瓜，大傻瓜。我是喜欢大麻瓜，大笨瓜，大傻瓜的聪明瓜。</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>                lq是个大麻瓜，大笨瓜，大傻瓜。我是喜欢大麻瓜，大笨瓜，大傻瓜的聪明瓜。</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                lq是个大麻瓜，大笨瓜，大傻瓜。我是喜欢大麻瓜，大笨瓜，大傻瓜的聪明瓜。</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>figure</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sec_pic<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>img/scale.png<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>figure</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>info<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>time<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>1分钟<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>msg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>comment<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>1000万<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>label_icon<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>专题<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>aside</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>section</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* reset.min.css */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token selector\">a,abbr,acronym,address,applet,article,figure,aside,audio,b,big,blockquote,body,canvas,caption,center,cite,code,dd,del,details,dfn,div,dl,dt,em,fieldset,figcaption,figure,footer,form,h1,h2,h3,h4,h5,h6,header,hgroup,html,i,iframe,img,ins,kbd,label,legend,li,mark,menu,nav,object,ol,p,pre,q,s,samp,section,small,span,strike,strong,sub,summary,sup,table,tbody,td,tfoot,th,thead,time,tr,tt,u,ul,var,video</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token property\">outline</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token property\">-webkit-touch-callout</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token property\">-webkit-user-select</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token property\">-webkit-tap-highlight-color</span><span class=\"token punctuation\">:</span> transparent</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token selector\">article,aside,details,figcaption,figure,footer,header,hgroup,menu,nav,section</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> block</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token selector\">body</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"STHeiti\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Microsoft YaHei\"</span><span class=\"token punctuation\">,</span>Helvetica<span class=\"token punctuation\">,</span>Arial<span class=\"token punctuation\">,</span>sans-serif<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token property\">-webkit-tap-highlight-color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>0<span class=\"token punctuation\">,</span>0<span class=\"token punctuation\">,</span>0<span class=\"token punctuation\">,</span>0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token property\">-webkit-text-size-adjust</span><span class=\"token punctuation\">:</span> none</pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token selector\">a,a:active,a:focus,a:hover,a:visited</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token property\">text-decoration</span><span class=\"token punctuation\">:</span> none</pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token selector\">a,img</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token property\">-webkit-touch-callout</span><span class=\"token punctuation\">:</span> none</pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token selector\">li,ol,ul</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token property\">list-style</span><span class=\"token punctuation\">:</span> none</pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token selector\">input[type=password],input[type=text],textarea</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token property\">resize</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token property\">outline</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token property\">-webkit-appearance</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token property\">white-space</span><span class=\"token punctuation\">:</span> pre-wrap<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token property\">word-wrap</span><span class=\"token punctuation\">:</span> break-word<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> #fff</pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token selector\">.clearfix:after</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> block<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token property\">clear</span><span class=\"token punctuation\">:</span> both<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token property\">visibility</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 0</pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token comment\">/* css */</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token selector\">html</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 13.33333vw</pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token selector\">.wrap</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0 .2rem<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token comment\">/* 图文模块 */</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token selector\">.secBox</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token property\">margin-bottom</span><span class=\"token punctuation\">:</span> .5rem<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token selector\">.secBox .sec_pic</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 1.82rem<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token selector\">.secBox .sec_pic img</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token selector\">.secBox .sec_txt</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token property\">flex</span><span class=\"token punctuation\">:</span>1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token property\">flex-direction</span><span class=\"token punctuation\">:</span> column<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token property\">justify-content</span><span class=\"token punctuation\">:</span>space-between<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token selector\">.sec_txt .tit</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token property\">font-weight</span><span class=\"token punctuation\">:</span> normal<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token property\">line-height</span><span class=\"token punctuation\">:</span> .44rem<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> .36rem<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token comment\">/* 省略号 四个必备条件 */</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> -webkit-box<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token property\">-webkit-box-orient</span><span class=\"token punctuation\">:</span> vertical<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token property\">-webkit-line-clamp</span><span class=\"token punctuation\">:</span> 2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span>hidden</pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token selector\">.sec_txt .info</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> .22rem<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token property\">justify-content</span><span class=\"token punctuation\">:</span> space-between<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> plum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre><span class=\"token selector\">.sec_txt .msg</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre></pre></td></tr><tr><td data-num=\"94\"></td><td><pre><span class=\"token comment\">/* 纯文字 */</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre><span class=\"token selector\">.sec_txt_p .tit</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    <span class=\"token property\">margin-bottom</span><span class=\"token punctuation\">:</span> .2rem<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre><span class=\"token comment\">/* 三小图 */</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre><span class=\"token selector\">.sec_three .sec_pic</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>    <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> .2rem 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre><span class=\"token selector\">.sec_inner</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>    <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>    <span class=\"token property\">margin-left</span><span class=\"token punctuation\">:</span> -4px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre><span class=\"token selector\">.sec_three .sec_pic img</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 33.3%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>    <span class=\"token property\">border-left</span><span class=\"token punctuation\">:</span> 4px solid #fff<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> auto<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>    <span class=\"token property\">box-sizing</span><span class=\"token punctuation\">:</span>border-box<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre><span class=\"token selector\">.sec_big .sec_pic</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"效果自适应\"><a class=\"anchor\" href=\"#效果自适应\">#</a> 效果 (自适应)</h2>\n<p><img data-src=\"https://cloud-img-1301075855.cos.ap-chengdu.myqcloud.com/xin/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%87%AA%E9%80%82%E5%BA%94%E5%B8%83%E5%B1%80.png\" alt=\"\" /></p>\n",
            "tags": [
                "布局",
                "CSS",
                "面试经典问题",
                "项目实用布局"
            ]
        },
        {
            "id": "https://xqlove.xyz/CSS%E5%B8%83%E5%B1%80%E6%A8%A1%E5%9E%8B/",
            "url": "https://xqlove.xyz/CSS%E5%B8%83%E5%B1%80%E6%A8%A1%E5%9E%8B/",
            "title": "CSS布局模型",
            "date_published": "2020-12-27T02:37:38.000Z",
            "content_html": "<h1 id=\"css布局模型\"><a class=\"anchor\" href=\"#css布局模型\">#</a> CSS 布局模型</h1>\n<h2 id=\"流动模型flow\"><a class=\"anchor\" href=\"#流动模型flow\">#</a> 流动模型 (Flow)</h2>\n<p>流动是网页默认的网页布局模式。<br />\n特征：块元素按顺序自上而下排列，独占一行，默认宽度为 100%，内联元素从左到右水平分布显示。</p>\n<h3 id=\"行内元素块级元素的特点\"><a class=\"anchor\" href=\"#行内元素块级元素的特点\">#</a> 行内元素 / 块级元素的特点</h3>\n<h4 id=\"行内元素内联元素-displayinline\"><a class=\"anchor\" href=\"#行内元素内联元素-displayinline\">#</a> 行内元素 / 内联元素 display:inline</h4>\n<ul>\n<li>不独占一行 左右结构</li>\n<li>设置宽高不起作用 (若要设置宽高需要进行转化 display:block/inline-block 或者 float)</li>\n<li>受换行符的影响会产生默认的间距（父容器设置 font-size：0 可以去间距)</li>\n</ul>\n<p><strong>注意：我们在设置了 float 的时候，默认的 display:block，所以无需重复设置。</strong></p>\n<h4 id=\"块元素-displayblock\"><a class=\"anchor\" href=\"#块元素-displayblock\">#</a> 块元素 display:block</h4>\n<ul>\n<li>独占一行 上下结构</li>\n<li>设置宽高起作用</li>\n<li>不受换行符影响</li>\n</ul>\n<h4 id=\"行内块会有默认的影响-displayinline-block\"><a class=\"anchor\" href=\"#行内块会有默认的影响-displayinline-block\">#</a> 行内块 (会有默认的影响) display:inline-block</h4>\n<ul>\n<li>img input</li>\n<li>设置宽高起作用</li>\n<li>不独占一行 左右结构</li>\n</ul>\n<p><strong>注意：img 引入背景图，给其父元素添加背景颜色，img 无法完全撑开父元素，会有默认的外边距 (行内块元素的默认特点，我们可以将其转化为 display:block)</strong></p>\n<p><img data-src=\"https://cloud-img-1301075855.cos.ap-chengdu.myqcloud.com/xin/%E6%B5%81%E5%8A%A8%E6%A8%A1%E5%9E%8B%20%E8%A1%8C%E5%86%85%E5%9D%97%E5%85%83%E7%B4%A0%E7%89%B9%E7%82%B9.png\" alt=\"\" /></p>\n<h1 id=\"浮动模型float\"><a class=\"anchor\" href=\"#浮动模型float\">#</a> 浮动模型 (Float)</h1>\n<p>通过 css 的 float 属性将元素设置为浮动元素。元素浮动之后不再占据原来的位置，它们会尽可能的往包裹它们的父元素的左边框或右边框靠，并会在它们元素所处位置的下面产生浮动流，影响下面的元素定位。<br />\n浮动元素并没有完全脱离文档流，它只是从包裹它的盒子中浮动起来并尽可能远的往左侧或者右侧进行移动。</p>\n<h2 id=\"面试题清除浮动的方法原理优缺点\"><a class=\"anchor\" href=\"#面试题清除浮动的方法原理优缺点\">#</a> 面试题：清除浮动的方法？原理？优缺点？</h2>\n<h3 id=\"为什么需要清浮动-子元素浮动导致父元素告诉塌陷height0\"><a class=\"anchor\" href=\"#为什么需要清浮动-子元素浮动导致父元素告诉塌陷height0\">#</a> 为什么需要清浮动？ - 子元素浮动导致父元素告诉塌陷 (height:0)</h3>\n<ol>\n<li>手动添加 height</li>\n</ol>\n<ul>\n<li>缺点：高度固定死</li>\n</ul>\n<ol start=\"2\">\n<li>overflow:hidden</li>\n</ol>\n<ul>\n<li>缺点：溢出隐藏 (当有下拉框效果时，会隐藏下拉框，影响效果)</li>\n<li>原理：BFC (BFC 元素会把浮动元素的高度计算进来)</li>\n</ul>\n<ol start=\"3\">\n<li>clear:left/right/both</li>\n</ol>\n<ul>\n<li>在浮动元素的末尾设置一个空的块元素，并在块元素内部设置该属性（块的特点 (div)+clear:both + 空内容）</li>\n<li>缺点：添加无意义空标签</li>\n</ul>\n<ol start=\"4\">\n<li>优化第三方案：伪元素选择器 after</li>\n</ol>\n<ul>\n<li>缺点：代码量大</li>\n</ul>\n<h2 id=\"面试题让元素消失有什么方法发挥你的想象力\"><a class=\"anchor\" href=\"#面试题让元素消失有什么方法发挥你的想象力\">#</a> 面试题：让元素消失有什么方法，发挥你的想象力？</h2>\n<ul>\n<li>常规的：opacity:0 display:none visiblity:hidden overflow:hidden</li>\n<li>特别的：padding:-9999px margin:-9999px width:0 height:0 font-size:0</li>\n<li>overflow:hidden 作用：1. 溢出隐藏 2. 清除浮动 3.margin-top/bottom 4. 自适应两列布局</li>\n</ul>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* 公用的代码片段 clearfix + clear  reset.min.css*/</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token selector\">.clearfix::after</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">/* 清浮动 */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">content</span><span class=\"token punctuation\">:</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token property\">display</span><span class=\"token punctuation\">:</span>block<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token property\">clear</span><span class=\"token punctuation\">:</span>both<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">/* 让元素消失 */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span>0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span>0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span>0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span>hidden<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token property\">visiblity</span><span class=\"token punctuation\">:</span>hidden<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"层模型layer\"><a class=\"anchor\" href=\"#层模型layer\">#</a> 层模型 (Layer)</h3>\n<p>层布局模型就像是 PS 中非常流行的图层编辑功能一样，每个图层能够精确定位操作。<br />\n三种形式：position：relative position:absolute position:fixed</p>\n",
            "tags": [
                "布局",
                "CSS",
                "面试经典问题",
                "项目实用布局"
            ]
        }
    ]
}